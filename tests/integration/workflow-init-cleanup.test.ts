/**
 * 統合テスト: ワークフロー初期化とログクリーンアップ (Issue #16)
 *
 * テスト対象:
 * - ワークフロー初期化 → コミットメッセージ確認
 * - Report Phaseクリーンアップ → コミットメッセージ確認、Planning Phase削除確認
 * - Evaluation Phaseクリーンアップ → コミットメッセージ確認、ログのみ削除確認
 *
 * テスト戦略: UNIT_INTEGRATION
 * - 統合テスト: 実際のGitリポジトリでのコミット動作を検証
 */

import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';
import fs from 'fs-extra';
import path from 'node:path';
import simpleGit, { SimpleGit } from 'simple-git';
import { GitManager } from '../../src/core/git-manager.js';
import { MetadataManager } from '../../src/core/metadata-manager.js';

// テスト用の一時ディレクトリ
const TEST_DIR = path.join(process.cwd(), 'tests', 'temp', 'integration-workflow-test');

describe('ワークフロー初期化の統合テスト - Issue #16', () => {
  let testRepoDir: string;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'init-integration');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');

    // 初期コミット
    const readmePath = path.join(testRepoDir, 'README.md');
    await fs.writeFile(readmePath, '# Test Repository');
    await git.add('.');
    await git.commit('Initial commit');
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('3.1.1: ワークフロー初期化 → コミットメッセージ確認', async () => {
    // Given: ワークフローディレクトリが初期化されていない状態

    // When: ワークフロー初期化を実行（メタデータ作成 → コミット）
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-16');
    await fs.ensureDir(issueDir);
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '16',
      branch_name: 'ai-workflow/issue-16',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/16',
      issue_title: 'Git commit message improvement',
      created_at: new Date().toISOString(),
    });

    const metadataManager = new MetadataManager(metadataPath);
    const gitManager = new GitManager(testRepoDir, metadataManager);

    const commitResult = await gitManager.commitWorkflowInit(16, 'ai-workflow/issue-16');

    // Then: コミットが正常に作成される
    expect(commitResult.success).toBe(true);
    expect(commitResult.commit_hash).not.toBeNull();
    expect(commitResult.files_committed.length).toBeGreaterThan(0);

    // コミットメッセージを確認（bodyフィールドを使用）
    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';
    const commitSubject = log.latest?.message ?? '';

    // 確認項目
    expect(commitSubject).toBe('[ai-workflow] Initialize workflow for issue #16');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Action: Create workflow metadata and directory structure');
    expect(commitMessage).toContain('Branch: ai-workflow/issue-16');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');

    // Phase番号が含まれていないことを確認
    expect(commitMessage).not.toMatch(/Phase:\s*\d+/);

    // メタデータファイルが作成されていることを確認
    expect(await fs.pathExists(metadataPath)).toBe(true);
  });

  test('3.1.2: ワークフロー初期化 → コミットファイル確認', async () => {
    // Given: ワークフローディレクトリが初期化されている
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-17');
    await fs.ensureDir(issueDir);
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '17',
      branch_name: 'ai-workflow/issue-17',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/17',
      issue_title: 'Test workflow init',
      created_at: new Date().toISOString(),
    });

    const metadataManager = new MetadataManager(metadataPath);
    const gitManager = new GitManager(testRepoDir, metadataManager);

    // When: commitWorkflowInit を呼び出す
    const commitResult = await gitManager.commitWorkflowInit(17, 'ai-workflow/issue-17');

    // Then: metadata.jsonがコミットに含まれている
    expect(commitResult.success).toBe(true);
    expect(commitResult.files_committed.length).toBeGreaterThan(0);

    // コミットに含まれるファイルを確認
    const log = await git.log(['-1', '--name-only']);
    const committedFiles = log.latest?.diff?.files ?? [];
    const hasMetadata = committedFiles.some(f => f.file.includes('issue-17/metadata.json'));
    expect(hasMetadata || commitResult.files_committed.some(f => f.includes('issue-17/metadata.json'))).toBe(true);
  });
});

describe('Report Phaseクリーンアップの統合テスト - Issue #16', () => {
  let testRepoDir: string;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'report-cleanup-integration');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');

    // 初期コミット
    const readmePath = path.join(testRepoDir, 'README.md');
    await fs.writeFile(readmePath, '# Test Repository');
    await git.add('.');
    await git.commit('Initial commit');
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('3.2.1: Report Phase完了 → ログクリーンアップ → コミットメッセージ確認', async () => {
    // Given: Phase 1-8が完了し、各Phaseの実行ログが存在する
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-18');
    await fs.ensureDir(issueDir);

    // Planning Phase (Phase 0)のログを作成
    const planningDir = path.join(issueDir, '00_planning');
    await fs.ensureDir(path.join(planningDir, 'execute'));
    await fs.ensureDir(path.join(planningDir, 'review'));
    await fs.ensureDir(path.join(planningDir, 'revise'));
    await fs.ensureDir(path.join(planningDir, 'output'));

    await fs.writeFile(path.join(planningDir, 'execute', 'agent_log.md'), '# Planning Execute');
    await fs.writeFile(path.join(planningDir, 'review', 'agent_log.md'), '# Planning Review');
    await fs.writeFile(path.join(planningDir, 'revise', 'agent_log.md'), '# Planning Revise');
    await fs.writeFile(path.join(planningDir, 'output', 'planning.md'), '# Planning Output');

    // Phase 1のログを作成
    const reqDir = path.join(issueDir, '01_requirements');
    await fs.ensureDir(path.join(reqDir, 'execute'));
    await fs.ensureDir(path.join(reqDir, 'output'));
    await fs.writeFile(path.join(reqDir, 'execute', 'agent_log.md'), '# Requirements Execute');
    await fs.writeFile(path.join(reqDir, 'output', 'requirements.md'), '# Requirements Output');

    // メタデータ作成
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '18',
      branch_name: 'ai-workflow/issue-18',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/18',
      issue_title: 'Test report cleanup',
      created_at: new Date().toISOString(),
    });

    // すべてコミット
    await git.add('.');
    await git.commit('Add workflow logs');

    // When: ログクリーンアップを実行（Planning Phaseも含む）
    // Planning Phaseの実行ログを削除
    await fs.remove(path.join(planningDir, 'execute'));
    await fs.remove(path.join(planningDir, 'review'));
    await fs.remove(path.join(planningDir, 'revise'));

    // Phase 1の実行ログを削除
    await fs.remove(path.join(reqDir, 'execute'));

    const metadataManager = new MetadataManager(metadataPath);
    const gitManager = new GitManager(testRepoDir, metadataManager);

    const commitResult = await gitManager.commitCleanupLogs(18, 'report');

    // Then: クリーンアップコミットが正常に作成される
    expect(commitResult.success).toBe(true);
    expect(commitResult.commit_hash).not.toBeNull();

    // コミットメッセージを確認（bodyフィールドを使用）
    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';
    const commitSubject = log.latest?.message ?? '';

    // 確認項目
    expect(commitSubject).toBe('[ai-workflow] Clean up workflow execution logs');
    expect(commitMessage).toContain('Issue: #18');
    expect(commitMessage).toContain('Phase: 8 (report)'); // Phase 9ではない
    expect(commitMessage).toContain('Action: Remove agent execution logs (execute/review/revise directories)');
    expect(commitMessage).toContain('Preserved: metadata.json, output/*.md');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');

    // Planning Phaseの実行ログが削除されていることを確認
    expect(await fs.pathExists(path.join(planningDir, 'execute'))).toBe(false);
    expect(await fs.pathExists(path.join(planningDir, 'review'))).toBe(false);
    expect(await fs.pathExists(path.join(planningDir, 'revise'))).toBe(false);

    // Planning Phaseのoutput/planning.mdが保持されていることを確認
    expect(await fs.pathExists(path.join(planningDir, 'output', 'planning.md'))).toBe(true);

    // metadata.jsonが保持されていることを確認
    expect(await fs.pathExists(metadataPath)).toBe(true);
  });

  test('3.2.2: Report Phase完了 → Planning Phase削除確認', async () => {
    // Given: Planning Phaseのログが存在する
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-19');
    await fs.ensureDir(issueDir);

    const planningDir = path.join(issueDir, '00_planning');
    await fs.ensureDir(path.join(planningDir, 'execute'));
    await fs.ensureDir(path.join(planningDir, 'review'));
    await fs.ensureDir(path.join(planningDir, 'revise'));
    await fs.ensureDir(path.join(planningDir, 'output'));

    await fs.writeFile(path.join(planningDir, 'execute', 'agent_log.md'), '# Planning Execute');
    await fs.writeFile(path.join(planningDir, 'review', 'agent_log.md'), '# Planning Review');
    await fs.writeFile(path.join(planningDir, 'revise', 'agent_log.md'), '# Planning Revise');
    await fs.writeFile(path.join(planningDir, 'output', 'planning.md'), '# Planning Output');

    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '19',
      branch_name: 'ai-workflow/issue-19',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/19',
      issue_title: 'Test planning cleanup',
      created_at: new Date().toISOString(),
    });

    await git.add('.');
    await git.commit('Add planning logs');

    // When: ログクリーンアップを実行
    await fs.remove(path.join(planningDir, 'execute'));
    await fs.remove(path.join(planningDir, 'review'));
    await fs.remove(path.join(planningDir, 'revise'));

    const metadataManager = new MetadataManager(metadataPath);
    const gitManager = new GitManager(testRepoDir, metadataManager);
    await gitManager.commitCleanupLogs(19, 'report');

    // Then: Planning Phaseの実行ログが削除され、output/planning.mdが保持されている
    expect(await fs.pathExists(path.join(planningDir, 'execute'))).toBe(false);
    expect(await fs.pathExists(path.join(planningDir, 'review'))).toBe(false);
    expect(await fs.pathExists(path.join(planningDir, 'revise'))).toBe(false);
    expect(await fs.pathExists(path.join(planningDir, 'output', 'planning.md'))).toBe(true);
  });
});

describe('Evaluation Phaseクリーンアップの統合テスト - Issue #16', () => {
  let testRepoDir: string;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'eval-cleanup-integration');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');

    // 初期コミット
    const readmePath = path.join(testRepoDir, 'README.md');
    await fs.writeFile(readmePath, '# Test Repository');
    await git.add('.');
    await git.commit('Initial commit');
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('3.3.1: Evaluation Phase完了（デフォルト） → ログのみ削除', async () => {
    // Given: Phase 0-9が完了し、各Phaseの実行ログが存在する
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-20');
    await fs.ensureDir(issueDir);

    // Planning Phase (Phase 0)
    const planningDir = path.join(issueDir, '00_planning');
    await fs.ensureDir(path.join(planningDir, 'execute'));
    await fs.ensureDir(path.join(planningDir, 'output'));
    await fs.writeFile(path.join(planningDir, 'execute', 'agent_log.md'), '# Planning Execute');
    await fs.writeFile(path.join(planningDir, 'output', 'planning.md'), '# Planning Output');

    // Evaluation Phase (Phase 9)
    const evalDir = path.join(issueDir, '09_evaluation');
    await fs.ensureDir(path.join(evalDir, 'execute'));
    await fs.ensureDir(path.join(evalDir, 'review'));
    await fs.ensureDir(path.join(evalDir, 'revise'));
    await fs.ensureDir(path.join(evalDir, 'output'));
    await fs.writeFile(path.join(evalDir, 'execute', 'agent_log.md'), '# Evaluation Execute');
    await fs.writeFile(path.join(evalDir, 'review', 'agent_log.md'), '# Evaluation Review');
    await fs.writeFile(path.join(evalDir, 'revise', 'agent_log.md'), '# Evaluation Revise');
    await fs.writeFile(path.join(evalDir, 'output', 'evaluation.md'), '# Evaluation Output');

    // メタデータ
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '20',
      branch_name: 'ai-workflow/issue-20',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/20',
      issue_title: 'Test evaluation cleanup',
      created_at: new Date().toISOString(),
    });

    await git.add('.');
    await git.commit('Add evaluation logs');

    // When: ログクリーンアップを実行（デフォルト動作）
    await fs.remove(path.join(planningDir, 'execute'));
    await fs.remove(path.join(evalDir, 'execute'));
    await fs.remove(path.join(evalDir, 'review'));
    await fs.remove(path.join(evalDir, 'revise'));

    const metadataManager = new MetadataManager(metadataPath);
    const gitManager = new GitManager(testRepoDir, metadataManager);

    const commitResult = await gitManager.commitCleanupLogs(20, 'evaluation');

    // Then: クリーンアップコミットが正常に作成される
    expect(commitResult.success).toBe(true);
    expect(commitResult.commit_hash).not.toBeNull();

    // コミットメッセージを確認（bodyフィールドを使用）
    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';

    expect(commitMessage).toContain('[ai-workflow] Clean up workflow execution logs');
    expect(commitMessage).toContain('Issue: #20');
    expect(commitMessage).toContain('Phase: 9 (evaluation)');
    expect(commitMessage).toContain('Action: Remove agent execution logs (execute/review/revise directories)');
    expect(commitMessage).toContain('Preserved: metadata.json, output/*.md');

    // Phase 0-9の実行ログが削除されていることを確認
    expect(await fs.pathExists(path.join(planningDir, 'execute'))).toBe(false);
    expect(await fs.pathExists(path.join(evalDir, 'execute'))).toBe(false);
    expect(await fs.pathExists(path.join(evalDir, 'review'))).toBe(false);
    expect(await fs.pathExists(path.join(evalDir, 'revise'))).toBe(false);

    // output/*.mdが保持されていることを確認
    expect(await fs.pathExists(path.join(planningDir, 'output', 'planning.md'))).toBe(true);
    expect(await fs.pathExists(path.join(evalDir, 'output', 'evaluation.md'))).toBe(true);

    // metadata.jsonが保持されていることを確認
    expect(await fs.pathExists(metadataPath)).toBe(true);

    // .ai-workflow/issue-20/ディレクトリは残っている（全体削除されていない）
    expect(await fs.pathExists(issueDir)).toBe(true);
  });
});

describe('エンドツーエンドテスト - Issue #16', () => {
  let testRepoDir: string;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'e2e-test');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');

    // 初期コミット
    const readmePath = path.join(testRepoDir, 'README.md');
    await fs.writeFile(readmePath, '# Test Repository');
    await git.add('.');
    await git.commit('Initial commit');
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('3.4.1: ワークフロー全体（初期化 → Phase 8 → クリーンアップ）', async () => {
    // Given: 一時的なGitリポジトリが作成されている

    // Step 1: ワークフロー初期化
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-21');
    await fs.ensureDir(issueDir);
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '21',
      branch_name: 'ai-workflow/issue-21',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/21',
      issue_title: 'E2E test',
      created_at: new Date().toISOString(),
    });

    const metadataManager = new MetadataManager(metadataPath);
    const gitManager = new GitManager(testRepoDir, metadataManager);

    const initResult = await gitManager.commitWorkflowInit(21, 'ai-workflow/issue-21');
    expect(initResult.success).toBe(true);

    // 初期化コミットを確認
    let log = await git.log(['-1', '--oneline']);
    const hash1 = log.latest?.hash.substring(0, 7) ?? '';
    const msg1 = log.latest?.message.split('\n')[0] ?? '';
    let commitOneLine = hash1 + ' ' + msg1;
    expect(commitOneLine).toContain('[ai-workflow] Initialize workflow for issue #21');

    // Step 2: Phase 1-8を順次実行（シミュレート）
    const phases = [
      { name: '00_planning', num: 0 },
      { name: '01_requirements', num: 1 },
      { name: '08_report', num: 8 },
    ];

    for (const phase of phases) {
      const phaseDir = path.join(issueDir, phase.name);
      await fs.ensureDir(path.join(phaseDir, 'execute'));
      await fs.ensureDir(path.join(phaseDir, 'output'));
      await fs.writeFile(path.join(phaseDir, 'execute', 'agent_log.md'), `# ${phase.name} Execute`);
      await fs.writeFile(path.join(phaseDir, 'output', 'output.md'), `# ${phase.name} Output`);
    }

    await git.add('.');
    await git.commit('Add phase logs');

    // Step 3: Report Phase完了後、ログクリーンアップ
    for (const phase of phases) {
      const executePath = path.join(issueDir, phase.name, 'execute');
      if (await fs.pathExists(executePath)) {
        await fs.remove(executePath);
      }
    }

    const cleanupResult = await gitManager.commitCleanupLogs(21, 'report');
    expect(cleanupResult.success).toBe(true);

    // クリーンアップコミットを確認
    log = await git.log(['-1', '--oneline']);
    const hash2 = log.latest?.hash.substring(0, 7) ?? '';
    const msg2 = log.latest?.message.split('\n')[0] ?? '';
    commitOneLine = hash2 + ' ' + msg2;
    expect(commitOneLine).toContain('[ai-workflow] Clean up workflow execution logs');

    // Step 4: ファイルシステムを確認
    // Phase 0-8の実行ログが削除されている
    expect(await fs.pathExists(path.join(issueDir, '00_planning', 'execute'))).toBe(false);
    expect(await fs.pathExists(path.join(issueDir, '01_requirements', 'execute'))).toBe(false);
    expect(await fs.pathExists(path.join(issueDir, '08_report', 'execute'))).toBe(false);

    // output/*.mdが保持されている
    expect(await fs.pathExists(path.join(issueDir, '00_planning', 'output', 'output.md'))).toBe(true);
    expect(await fs.pathExists(path.join(issueDir, '01_requirements', 'output', 'output.md'))).toBe(true);
    expect(await fs.pathExists(path.join(issueDir, '08_report', 'output', 'output.md'))).toBe(true);

    // metadata.jsonが保持されている
    expect(await fs.pathExists(metadataPath)).toBe(true);

    // Step 5: Gitログを確認
    const fullLog = await git.log();
    const commits = fullLog.all.map(c => c.message.split('\n')[0]);

    expect(commits[0]).toContain('[ai-workflow] Clean up workflow execution logs');
    expect(commits[2]).toContain('[ai-workflow] Initialize workflow for issue #21');
  });
});
