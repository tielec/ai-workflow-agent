/**
 * ユニットテスト: git-manager.ts (Issue #16)
 *
 * テスト対象:
 * - GitManager.commitWorkflowInit()
 * - GitManager.commitCleanupLogs()
 * - GitManager.createInitCommitMessage() (private - 間接的にテスト)
 * - GitManager.createCleanupCommitMessage() (private - 間接的にテスト)
 *
 * テスト戦略: UNIT_INTEGRATION
 * - ユニットテスト: コミットメッセージ生成ロジックの正確性
 * - エラーハンドリング: ファイルなし、Git操作失敗
 */

import { describe, test, expect, beforeAll, afterAll, beforeEach, jest } from '@jest/globals';
import fs from 'fs-extra';
import path from 'node:path';
import simpleGit, { SimpleGit } from 'simple-git';
import { GitManager } from '../../src/core/git-manager.js';
import { MetadataManager } from '../../src/core/metadata-manager.js';

// テスト用の一時ディレクトリ
const TEST_DIR = path.join(process.cwd(), 'tests', 'temp', 'git-manager-issue16-test');

describe('GitManager.commitWorkflowInit() - Issue #16', () => {
  let testRepoDir: string;
  let metadataManager: MetadataManager;
  let gitManager: GitManager;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'repo-init-test');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');
  });

  beforeEach(async () => {
    // 各テスト前にディレクトリをクリーンアップ
    const workflowDir = path.join(testRepoDir, '.ai-workflow');
    if (await fs.pathExists(workflowDir)) {
      await fs.remove(workflowDir);
    }

    // メタデータマネージャーを再作成
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-16');
    await fs.ensureDir(issueDir);
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '16',
      branch_name: 'ai-workflow/issue-16',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/16',
      issue_title: 'Git commit message improvement',
      created_at: new Date().toISOString(),
    });

    metadataManager = new MetadataManager(metadataPath);
    gitManager = new GitManager(testRepoDir, metadataManager);
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('2.1.1: commitWorkflowInit_正常系_ファイルあり', async () => {
    // Given: ワークフロー初期化でファイルが作成されている
    const testFile = path.join(testRepoDir, '.ai-workflow', 'issue-16', 'metadata.json');

    // When: commitWorkflowInit を呼び出す
    const result = await gitManager.commitWorkflowInit(16, 'ai-workflow/issue-16');

    // Then: 成功が返される
    expect(result.success).toBe(true);
    expect(result.commit_hash).not.toBeNull();
    expect(result.files_committed.length).toBeGreaterThan(0);
    expect(result.error).toBeUndefined();

    // コミットメッセージを確認（bodyフィールドを使用）
    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';
    expect(commitMessage).toContain('[ai-workflow] Initialize workflow for issue #16');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Action: Create workflow metadata and directory structure');
    expect(commitMessage).toContain('Branch: ai-workflow/issue-16');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');

    // Phase番号が含まれていないことを確認
    expect(commitMessage).not.toContain('Phase:');
  });

  test('2.1.2: commitWorkflowInit_正常系_ファイルなし', async () => {
    // Given: 変更ファイルが存在しない状態
    // (beforeEachで作成したファイルをすべてコミット済みにする)
    await git.add('.');
    await git.commit('Initial commit');

    // When: commitWorkflowInit を呼び出す
    const result = await gitManager.commitWorkflowInit(16, 'ai-workflow/issue-16');

    // Then: 警告ログが出力され、成功として扱われる
    expect(result.success).toBe(true);
    expect(result.commit_hash).toBeNull();
    expect(result.files_committed.length).toBe(0);
    expect(result.error).toBeUndefined();
  });

  test('2.1.4: createInitCommitMessage_メッセージフォーマット検証', async () => {
    // Given: GitManagerインスタンスが作成されている
    const testFile = path.join(testRepoDir, '.ai-workflow', 'issue-16', 'test.txt');
    await fs.writeFile(testFile, 'test content');

    // When: commitWorkflowInit を呼び出す
    const result = await gitManager.commitWorkflowInit(16, 'ai-workflow/issue-16');

    // Then: コミットメッセージが正しいフォーマットになっている
    expect(result.success).toBe(true);
    expect(result.commit_hash).not.toBeNull();

    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';

    // 検証項目
    const lines = commitMessage.split('\n');
    expect(lines[0]).toBe('[ai-workflow] Initialize workflow for issue #16');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Action: Create workflow metadata and directory structure');
    expect(commitMessage).toContain('Branch: ai-workflow/issue-16');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');

    // Phase番号が含まれていないことを確認
    expect(commitMessage).not.toMatch(/Phase:\s*\d+/);
  });
});

describe('GitManager.commitCleanupLogs() - Issue #16', () => {
  let testRepoDir: string;
  let metadataManager: MetadataManager;
  let gitManager: GitManager;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'repo-cleanup-test');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');

    // 初期コミット
    const readmePath = path.join(testRepoDir, 'README.md');
    await fs.writeFile(readmePath, '# Test');
    await git.add('.');
    await git.commit('Initial commit');
  });

  beforeEach(async () => {
    // 各テスト前にワークフローディレクトリをクリーンアップ
    const workflowDir = path.join(testRepoDir, '.ai-workflow');
    if (await fs.pathExists(workflowDir)) {
      await fs.remove(workflowDir);
    }

    // メタデータマネージャーを再作成
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-16');
    await fs.ensureDir(issueDir);
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '16',
      branch_name: 'ai-workflow/issue-16',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/16',
      issue_title: 'Git commit message improvement',
      created_at: new Date().toISOString(),
    });

    metadataManager = new MetadataManager(metadataPath);
    gitManager = new GitManager(testRepoDir, metadataManager);
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('2.2.1: commitCleanupLogs_正常系_Report Phase', async () => {
    // Given: クリーンアップによる変更ファイルが存在する
    // ログディレクトリを削除した状態をシミュレート
    const phaseDir = path.join(testRepoDir, '.ai-workflow', 'issue-16', '01_requirements');
    await fs.ensureDir(phaseDir);
    const testFile = path.join(phaseDir, 'output', 'requirements.md');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, '# Requirements');

    // When: commitCleanupLogs を呼び出す
    const result = await gitManager.commitCleanupLogs(16, 'report');

    // Then: 成功が返される
    expect(result.success).toBe(true);
    expect(result.commit_hash).not.toBeNull();
    expect(result.files_committed.length).toBeGreaterThan(0);
    expect(result.error).toBeUndefined();

    // コミットメッセージを確認（bodyフィールドを使用）
    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';
    expect(commitMessage).toContain('[ai-workflow] Clean up workflow execution logs');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Phase: 8 (report)'); // Phase 9ではない
    expect(commitMessage).toContain('Action: Remove agent execution logs (execute/review/revise directories)');
    expect(commitMessage).toContain('Preserved: metadata.json, output/*.md');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');
  });

  test('2.2.2: commitCleanupLogs_正常系_Evaluation Phase', async () => {
    // Given: クリーンアップによる変更ファイルが存在する
    const phaseDir = path.join(testRepoDir, '.ai-workflow', 'issue-16', '09_evaluation');
    await fs.ensureDir(phaseDir);
    const testFile = path.join(phaseDir, 'output', 'evaluation.md');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, '# Evaluation');

    // When: commitCleanupLogs を呼び出す
    const result = await gitManager.commitCleanupLogs(16, 'evaluation');

    // Then: 成功が返される（Phase番号が9）
    expect(result.success).toBe(true);
    expect(result.commit_hash).not.toBeNull();

    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';
    expect(commitMessage).toContain('Phase: 9 (evaluation)');
  });

  test('2.2.3: commitCleanupLogs_正常系_ファイルなし', async () => {
    // Given: 変更ファイルが存在しない状態
    const phaseDir = path.join(testRepoDir, '.ai-workflow', 'issue-16', '08_report');
    await fs.ensureDir(phaseDir);
    const testFile = path.join(phaseDir, 'output', 'report.md');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, '# Report');

    // すべてコミット済みにする
    await git.add('.');
    await git.commit('Add report file');

    // When: commitCleanupLogs を呼び出す
    const result = await gitManager.commitCleanupLogs(16, 'report');

    // Then: 警告ログが出力され、成功として扱われる
    expect(result.success).toBe(true);
    expect(result.commit_hash).toBeNull();
    expect(result.files_committed.length).toBe(0);
    expect(result.error).toBeUndefined();
  });

  test('2.2.5: createCleanupCommitMessage_メッセージフォーマット検証_Report', async () => {
    // Given: Report Phase用のクリーンアップ
    const testFile = path.join(testRepoDir, '.ai-workflow', 'issue-16', 'test-cleanup.txt');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, 'cleanup test');

    // When: commitCleanupLogs を呼び出す
    const result = await gitManager.commitCleanupLogs(16, 'report');

    // Then: コミットメッセージが正しいフォーマットになっている
    expect(result.success).toBe(true);

    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';

    // 検証項目
    const lines = commitMessage.split('\n');
    expect(lines[0]).toBe('[ai-workflow] Clean up workflow execution logs');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Phase: 8 (report)');
    expect(commitMessage).toContain('Action: Remove agent execution logs (execute/review/revise directories)');
    expect(commitMessage).toContain('Preserved: metadata.json, output/*.md');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');
  });

  test('2.2.6: createCleanupCommitMessage_メッセージフォーマット検証_Evaluation', async () => {
    // Given: Evaluation Phase用のクリーンアップ
    const testFile = path.join(testRepoDir, '.ai-workflow', 'issue-16', 'test-cleanup-eval.txt');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, 'cleanup eval test');

    // When: commitCleanupLogs を呼び出す
    const result = await gitManager.commitCleanupLogs(16, 'evaluation');

    // Then: コミットメッセージが正しいフォーマットになっている
    expect(result.success).toBe(true);

    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';

    // 検証項目
    const lines = commitMessage.split('\n');
    expect(lines[0]).toBe('[ai-workflow] Clean up workflow execution logs');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Phase: 9 (evaluation)');
    expect(commitMessage).toContain('Action: Remove agent execution logs (execute/review/revise directories)');
    expect(commitMessage).toContain('Preserved: metadata.json, output/*.md');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');
  });

  test('2.2.7: createCleanupCommitMessage_Phase番号検証', async () => {
    // Given: 各Phaseのクリーンアップファイルをシミュレート

    // ケース1: Report Phase
    const reportFile = path.join(testRepoDir, '.ai-workflow', 'issue-16', 'report-test.txt');
    await fs.ensureDir(path.dirname(reportFile));
    await fs.writeFile(reportFile, 'report phase');

    const reportResult = await gitManager.commitCleanupLogs(16, 'report');
    expect(reportResult.success).toBe(true);

    let log = await git.log(['-1']);
    let commitMessage = log.latest?.body ?? '';
    expect(commitMessage).toContain('Phase: 8 (report)');

    // ケース2: Evaluation Phase
    const evalFile = path.join(testRepoDir, '.ai-workflow', 'issue-16', 'eval-test.txt');
    await fs.writeFile(evalFile, 'evaluation phase');

    const evalResult = await gitManager.commitCleanupLogs(16, 'evaluation');
    expect(evalResult.success).toBe(true);

    log = await git.log(['-1']);
    commitMessage = log.latest?.body ?? '';
    expect(commitMessage).toContain('Phase: 9 (evaluation)');
  });
});

describe('GitManager既存機能への影響検証 - Issue #16', () => {
  let testRepoDir: string;
  let metadataManager: MetadataManager;
  let gitManager: GitManager;
  let git: SimpleGit;

  beforeAll(async () => {
    // テスト用リポジトリディレクトリを作成
    testRepoDir = path.join(TEST_DIR, 'repo-compat-test');
    await fs.ensureDir(testRepoDir);

    // Gitリポジトリを初期化
    git = simpleGit(testRepoDir);
    await git.init();
    await git.addConfig('user.name', 'Test User', false, 'local');
    await git.addConfig('user.email', 'test@example.com', false, 'local');

    // 初期コミット
    const readmePath = path.join(testRepoDir, 'README.md');
    await fs.writeFile(readmePath, '# Test');
    await git.add('.');
    await git.commit('Initial commit');
  });

  beforeEach(async () => {
    // 各テスト前にワークフローディレクトリをクリーンアップ
    const workflowDir = path.join(testRepoDir, '.ai-workflow');
    if (await fs.pathExists(workflowDir)) {
      await fs.remove(workflowDir);
    }

    // メタデータマネージャーを再作成
    const issueDir = path.join(testRepoDir, '.ai-workflow', 'issue-16');
    await fs.ensureDir(issueDir);
    const metadataPath = path.join(issueDir, 'metadata.json');
    await fs.writeJson(metadataPath, {
      issue_number: '16',
      branch_name: 'ai-workflow/issue-16',
      issue_url: 'https://github.com/tielec/ai-workflow-agent/issues/16',
      issue_title: 'Git commit message improvement',
      created_at: new Date().toISOString(),
    });

    metadataManager = new MetadataManager(metadataPath);
    gitManager = new GitManager(testRepoDir, metadataManager);
  });

  afterAll(async () => {
    // テスト用ディレクトリを削除
    await fs.remove(TEST_DIR);
  });

  test('2.3.1: commitPhaseOutput_後方互換性', async () => {
    // Given: 既存のワークフローファイルが存在する
    const phaseDir = path.join(testRepoDir, '.ai-workflow', 'issue-16', '01_requirements');
    await fs.ensureDir(phaseDir);
    const testFile = path.join(phaseDir, 'output', 'requirements.md');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, '# Requirements');

    // When: commitPhaseOutput を呼び出す
    const result = await gitManager.commitPhaseOutput('requirements', 'completed', 'PASS');

    // Then: 既存と同じ動作（コミットメッセージフォーマットが変更されていない）
    expect(result.success).toBe(true);
    expect(result.commit_hash).not.toBeNull();

    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';

    // 既存のコミットメッセージフォーマット
    expect(commitMessage).toContain('[ai-workflow] Phase 1 (requirements) - completed');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Phase: 1 (requirements)');
    expect(commitMessage).toContain('Status: completed');
    expect(commitMessage).toContain('Review: PASS');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');
  });

  test('2.3.2: commitStepOutput_後方互換性', async () => {
    // Given: ステップ用のファイルが存在する
    const phaseDir = path.join(testRepoDir, '.ai-workflow', 'issue-16', '02_design');
    await fs.ensureDir(phaseDir);
    const testFile = path.join(phaseDir, 'execute', 'agent_log.md');
    await fs.ensureDir(path.dirname(testFile));
    await fs.writeFile(testFile, '# Design Execute');

    // When: commitStepOutput を呼び出す
    const result = await gitManager.commitStepOutput('design', 2, 'execute', 16, testRepoDir);

    // Then: 既存と同じ動作（コミットメッセージフォーマットが変更されていない）
    expect(result.success).toBe(true);
    expect(result.commit_hash).not.toBeNull();

    const log = await git.log(['-1']);
    const commitMessage = log.latest?.body ?? '';

    // 既存のコミットメッセージフォーマット
    expect(commitMessage).toContain('[ai-workflow] Phase 2 (design) - execute completed');
    expect(commitMessage).toContain('Issue: #16');
    expect(commitMessage).toContain('Phase: 2 (design)');
    expect(commitMessage).toContain('Step: execute');
    expect(commitMessage).toContain('Status: completed');
    expect(commitMessage).toContain('Auto-generated by AI Workflow');
  });
});
