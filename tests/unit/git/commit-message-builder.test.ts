/**
 * Unit tests for CommitMessageBuilder
 * Tests commit message construction logic
 */

// @ts-nocheck

import { describe, test, expect, beforeEach, jest } from '@jest/globals';
import { CommitMessageBuilder } from '../../../src/core/git/commit-message-builder';
import { MetadataManager } from '../../../src/core/metadata-manager';

describe('CommitMessageBuilder - createCommitMessage', () => {
  let messageBuilder: CommitMessageBuilder;
  let mockMetadata: jest.Mocked<MetadataManager>;

  beforeEach(() => {
    mockMetadata = {
      data: {
        issue_number: '123',
        issue_title: 'Test Issue',
      },
    } as any;

    messageBuilder = new CommitMessageBuilder(mockMetadata);
  });

  test('createCommitMessage_正常系_completedステータス', () => {
    // Given: フェーズが requirements、ステータスが completed、レビュー結果が PASS
    const phaseName = 'requirements';
    const status = 'completed';
    const reviewResult = 'PASS';

    // When: createCommitMessage を呼び出す
    const message = messageBuilder.createCommitMessage(phaseName, status, reviewResult);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Phase 2 (requirements) - completed');
    expect(message).toContain('Issue: #123');
    expect(message).toContain('Phase: 2 (requirements)');
    expect(message).toContain('Status: completed');
    expect(message).toContain('Review: PASS');
    expect(message).toContain('Auto-generated by AI Workflow');
  });

  test('createCommitMessage_正常系_failedステータス', () => {
    // Given: フェーズが implementation、ステータスが failed、レビュー結果が FAIL
    const phaseName = 'implementation';
    const status = 'failed';
    const reviewResult = 'FAIL';

    // When: createCommitMessage を呼び出す
    const message = messageBuilder.createCommitMessage(phaseName, status, reviewResult);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Phase 5 (implementation) - failed');
    expect(message).toContain('Issue: #123');
    expect(message).toContain('Phase: 5 (implementation)');
    expect(message).toContain('Status: failed');
    expect(message).toContain('Review: FAIL');
  });

  test('createCommitMessage_境界値_reviewResult未指定', () => {
    // Given: レビュー結果が未指定（undefined）
    const phaseName = 'design';
    const status = 'completed';
    const reviewResult = undefined;

    // When: createCommitMessage を呼び出す
    const message = messageBuilder.createCommitMessage(phaseName, status, reviewResult);

    // Then: Review が N/A として表示される
    expect(message).toContain('[ai-workflow] Phase 3 (design) - completed');
    expect(message).toContain('Review: N/A');
  });

  test('createCommitMessage_正常系_全フェーズの番号計算', () => {
    // Given: すべてのフェーズ名
    const phases = [
      { name: 'planning', number: 1 },
      { name: 'requirements', number: 2 },
      { name: 'design', number: 3 },
      { name: 'test_scenario', number: 4 },
      { name: 'implementation', number: 5 },
      { name: 'test_implementation', number: 6 },
      { name: 'testing', number: 7 },
      { name: 'documentation', number: 8 },
      { name: 'report', number: 9 },
      { name: 'evaluation', number: 10 },
    ];

    // When/Then: 各フェーズに対して正しい Phase番号が計算される
    phases.forEach((phase) => {
      const message = messageBuilder.createCommitMessage(phase.name, 'completed', 'PASS');
      expect(message).toContain(`Phase ${phase.number} (${phase.name})`);
    });
  });
});

describe('CommitMessageBuilder - buildStepCommitMessage', () => {
  let messageBuilder: CommitMessageBuilder;
  let mockMetadata: jest.Mocked<MetadataManager>;

  beforeEach(() => {
    mockMetadata = {
      data: {
        issue_number: '123',
      },
    } as any;

    messageBuilder = new CommitMessageBuilder(mockMetadata);
  });

  test('buildStepCommitMessage_正常系_executeステップ', () => {
    // Given: フェーズが implementation、Phase番号が 5、ステップが execute
    const phaseName = 'implementation';
    const phaseNumber = 5;
    const step = 'execute';
    const issueNumber = 123;

    // When: buildStepCommitMessage を呼び出す
    const message = messageBuilder.buildStepCommitMessage(phaseName, phaseNumber, step, issueNumber);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Phase 5 (implementation) - execute completed');
    expect(message).toContain('Issue: #123');
    expect(message).toContain('Phase: 5 (implementation)');
    expect(message).toContain('Step: execute');
    expect(message).toContain('Status: completed');
    expect(message).toContain('Auto-generated by AI Workflow');
  });

  test('buildStepCommitMessage_正常系_reviewステップ', () => {
    // Given: フェーズが requirements、Phase番号が 2、ステップが review
    const phaseName = 'requirements';
    const phaseNumber = 2;
    const step = 'review';
    const issueNumber = 456;

    // When: buildStepCommitMessage を呼び出す
    const message = messageBuilder.buildStepCommitMessage(phaseName, phaseNumber, step, issueNumber);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Phase 2 (requirements) - review completed');
    expect(message).toContain('Issue: #456');
    expect(message).toContain('Step: review');
  });
});

describe('CommitMessageBuilder - createInitCommitMessage', () => {
  let messageBuilder: CommitMessageBuilder;
  let mockMetadata: jest.Mocked<MetadataManager>;

  beforeEach(() => {
    mockMetadata = {
      data: {
        issue_number: '123',
      },
    } as any;

    messageBuilder = new CommitMessageBuilder(mockMetadata);
  });

  test('createInitCommitMessage_正常系', () => {
    // Given: Issue番号が 123、ブランチ名が ai-workflow/issue-123
    const issueNumber = 123;
    const branchName = 'ai-workflow/issue-123';

    // When: createInitCommitMessage を呼び出す
    const message = messageBuilder.createInitCommitMessage(issueNumber, branchName);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Initialize workflow for issue #123');
    expect(message).toContain('Issue: #123');
    expect(message).toContain('Action: Create workflow metadata and directory structure');
    expect(message).toContain('Branch: ai-workflow/issue-123');
    expect(message).toContain('Auto-generated by AI Workflow');
  });
});

describe('CommitMessageBuilder - createCleanupCommitMessage', () => {
  let messageBuilder: CommitMessageBuilder;
  let mockMetadata: jest.Mocked<MetadataManager>;

  beforeEach(() => {
    mockMetadata = {
      data: {
        issue_number: '123',
      },
    } as any;

    messageBuilder = new CommitMessageBuilder(mockMetadata);
  });

  test('createCleanupCommitMessage_正常系_reportフェーズ', () => {
    // Given: Issue番号が 123、フェーズが report
    const issueNumber = 123;
    const phase = 'report';

    // When: createCleanupCommitMessage を呼び出す
    const message = messageBuilder.createCleanupCommitMessage(issueNumber, phase);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Clean up workflow execution logs');
    expect(message).toContain('Issue: #123');
    expect(message).toContain('Phase: 9 (report)');
    expect(message).toContain('Action: Remove agent execution logs (execute/review/revise directories)');
    expect(message).toContain('Preserved: metadata.json, output/*.md');
    expect(message).toContain('Auto-generated by AI Workflow');
  });

  test('createCleanupCommitMessage_正常系_evaluationフェーズ', () => {
    // Given: Issue番号が 456、フェーズが evaluation
    const issueNumber = 456;
    const phase = 'evaluation';

    // When: createCleanupCommitMessage を呼び出す
    const message = messageBuilder.createCleanupCommitMessage(issueNumber, phase);

    // Then: 正しいフォーマットのメッセージが生成される
    expect(message).toContain('[ai-workflow] Clean up workflow execution logs');
    expect(message).toContain('Issue: #456');
    expect(message).toContain('Phase: 10 (evaluation)');
  });
});
