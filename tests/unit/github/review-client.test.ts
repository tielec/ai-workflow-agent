import { Octokit } from '@octokit/rest';
import { ReviewClient } from '../../../src/core/github/review-client.js';

describe('ReviewClient', () => {
  let reviewClient: ReviewClient;
  let mockOctokit: jest.Mocked<Octokit>;

  beforeEach(() => {
    // Create mock Octokit instance
    mockOctokit = {
      issues: {
        createComment: jest.fn(),
      },
    } as unknown as jest.Mocked<Octokit>;

    reviewClient = new ReviewClient(mockOctokit, 'owner', 'repo');
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('postReviewResult', () => {
    it('should post PASS review result successfully', async () => {
      // Given: Mock comment creation response
      const mockComment = {
        id: 123456,
        body: '## ‚úÖ „É¨„Éì„É•„ÉºÁµêÊûú - Ë¶Å‰ª∂ÂÆöÁæ©„Éï„Çß„Éº„Ç∫...',
        html_url: 'https://github.com/owner/repo/issues/24#issuecomment-123456',
      };

      mockOctokit.issues.createComment.mockResolvedValue({ data: mockComment } as any);

      // When: Post PASS review result
      const result = await reviewClient.postReviewResult(
        24,
        'requirements',
        'PASS',
        'Ë¶Å‰ª∂ÂÆöÁæ©Êõ∏„ÅØÂÆåÁíß„Åß„Åô„ÄÇ',
        []
      );

      // Then: Verify Octokit was called correctly
      expect(mockOctokit.issues.createComment).toHaveBeenCalledWith({
        owner: 'owner',
        repo: 'repo',
        issue_number: 24,
        body: expect.stringContaining('‚úÖ „É¨„Éì„É•„ÉºÁµêÊûú - Ë¶Å‰ª∂ÂÆöÁæ©„Éï„Çß„Éº„Ç∫'),
      });

      // And: Body should include judgment
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).toContain('**Âà§ÂÆö**: PASS');

      // And: Body should include feedback
      expect(callArgs.body).toContain('### „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ');
      expect(callArgs.body).toContain('Ë¶Å‰ª∂ÂÆöÁæ©Êõ∏„ÅØÂÆåÁíß„Åß„Åô„ÄÇ');

      // And: Body should NOT include suggestions (empty array)
      expect(callArgs.body).not.toContain('### ÊîπÂñÑÊèêÊ°à');

      // And: Result should match mock data
      expect(result).toEqual(mockComment);
    });

    it('should post PASS_WITH_SUGGESTIONS review result with suggestions', async () => {
      // Given: Mock comment creation response
      const mockComment = {
        id: 123456,
        body: '## ‚ö†Ô∏è „É¨„Éì„É•„ÉºÁµêÊûú...',
        html_url: 'https://github.com/owner/repo/issues/24#issuecomment-123456',
      };

      mockOctokit.issues.createComment.mockResolvedValue({ data: mockComment } as any);

      // When: Post PASS_WITH_SUGGESTIONS with suggestions
      const result = await reviewClient.postReviewResult(
        24,
        'design',
        'PASS_WITH_SUGGESTIONS',
        'Ë®≠Ë®àÊõ∏„ÅØËâØÂ•Ω„Åß„Åô„Åå„ÄÅÊîπÂñÑÊèêÊ°à„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ',
        ['„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅÆË©≥Á¥∞„ÇíËøΩË®ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', '„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË¶Å‰ª∂„ÇíÊòéÁ¢∫Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ']
      );

      // Then: Verify Octokit was called correctly
      expect(mockOctokit.issues.createComment).toHaveBeenCalledWith({
        owner: 'owner',
        repo: 'repo',
        issue_number: 24,
        body: expect.stringContaining('‚ö†Ô∏è „É¨„Éì„É•„ÉºÁµêÊûú - Ë®≠Ë®à„Éï„Çß„Éº„Ç∫'),
      });

      // And: Body should include judgment
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).toContain('**Âà§ÂÆö**: PASS_WITH_SUGGESTIONS');

      // And: Body should include feedback
      expect(callArgs.body).toContain('### „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ');
      expect(callArgs.body).toContain('Ë®≠Ë®àÊõ∏„ÅØËâØÂ•Ω„Åß„Åô„Åå„ÄÅÊîπÂñÑÊèêÊ°à„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ');

      // And: Body should include suggestions list
      expect(callArgs.body).toContain('### ÊîπÂñÑÊèêÊ°à');
      expect(callArgs.body).toContain('1. „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅÆË©≥Á¥∞„ÇíËøΩË®ò„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      expect(callArgs.body).toContain('2. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπË¶Å‰ª∂„ÇíÊòéÁ¢∫Âåñ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');

      // And: Result should match mock data
      expect(result).toEqual(mockComment);
    });

    it('should post FAIL review result successfully', async () => {
      // Given: Mock comment creation response
      const mockComment = {
        id: 123456,
        body: '## ‚ùå „É¨„Éì„É•„ÉºÁµêÊûú...',
        html_url: 'https://github.com/owner/repo/issues/24#issuecomment-123456',
      };

      mockOctokit.issues.createComment.mockResolvedValue({ data: mockComment } as any);

      // When: Post FAIL review result
      const result = await reviewClient.postReviewResult(
        24,
        'implementation',
        'FAIL',
        'ÂÆüË£Ö„Å´ÈáçÂ§ß„Å™ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ',
        ['„Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß„Çí‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ', '„ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ']
      );

      // Then: Verify Octokit was called correctly
      expect(mockOctokit.issues.createComment).toHaveBeenCalledWith({
        owner: 'owner',
        repo: 'repo',
        issue_number: 24,
        body: expect.stringContaining('‚ùå „É¨„Éì„É•„ÉºÁµêÊûú - ÂÆüË£Ö„Éï„Çß„Éº„Ç∫'),
      });

      // And: Body should include judgment
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).toContain('**Âà§ÂÆö**: FAIL');

      // And: Body should include feedback
      expect(callArgs.body).toContain('ÂÆüË£Ö„Å´ÈáçÂ§ß„Å™ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ');

      // And: Body should include suggestions
      expect(callArgs.body).toContain('### ÊîπÂñÑÊèêÊ°à');
      expect(callArgs.body).toContain('1. „Çª„Ç≠„É•„É™„ÉÜ„Ç£ËÑÜÂº±ÊÄß„Çí‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      expect(callArgs.body).toContain('2. „ÉÜ„Çπ„Éà„Ç´„Éê„É¨„ÉÉ„Ç∏„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ');

      // And: Result should match mock data
      expect(result).toEqual(mockComment);
    });

    it('should handle empty suggestions array', async () => {
      // Given: Mock response
      mockOctokit.issues.createComment.mockResolvedValue({ data: {} } as any);

      // When: Post review with empty suggestions
      await reviewClient.postReviewResult(
        24,
        'testing',
        'PASS',
        '„ÉÜ„Çπ„Éà„ÅØÂÆåÁíß„Åß„Åô„ÄÇ',
        []
      );

      // Then: Body should NOT include suggestions section
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).not.toContain('### ÊîπÂñÑÊèêÊ°à');
    });

    it('should handle unknown phase gracefully', async () => {
      // Given: Mock response
      mockOctokit.issues.createComment.mockResolvedValue({ data: {} } as any);

      // When: Post with unknown phase
      await reviewClient.postReviewResult(
        24,
        'unknown_phase',
        'PASS',
        '„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ',
        []
      );

      // Then: Should use phase name as-is
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).toContain('unknown_phase');
    });

    it('should handle unknown result gracefully', async () => {
      // Given: Mock response
      mockOctokit.issues.createComment.mockResolvedValue({ data: {} } as any);

      // When: Post with unknown result
      await reviewClient.postReviewResult(
        24,
        'requirements',
        'UNKNOWN_RESULT',
        '„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ',
        []
      );

      // Then: Should use default emoji
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).toContain('üìù');
      expect(callArgs.body).toContain('**Âà§ÂÆö**: UNKNOWN_RESULT');
    });

    it('should not include feedback section when feedback is empty', async () => {
      // Given: Mock response
      mockOctokit.issues.createComment.mockResolvedValue({ data: {} } as any);

      // When: Post with empty feedback
      await reviewClient.postReviewResult(24, 'requirements', 'PASS', '', []);

      // Then: Body should not include feedback section (empty string is falsy)
      const callArgs = mockOctokit.issues.createComment.mock.calls[0][0];
      expect(callArgs.body).not.toContain('### „Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ');
    });
  });
});
