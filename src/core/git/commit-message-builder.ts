import type { MetadataManager } from '../metadata-manager.js';
import type { PhaseName } from '../../types.js';

/**
 * CommitMessageBuilder - Specialized module for commit message construction
 *
 * Responsibilities:
 * - Generate phase completion commit messages
 * - Generate step completion commit messages
 * - Generate initialization commit messages
 * - Generate cleanup commit messages
 */
export class CommitMessageBuilder {
  private readonly metadata: MetadataManager;
  private readonly phaseOrder: PhaseName[] = [
    'planning',
    'requirements',
    'design',
    'test_scenario',
    'implementation',
    'test_implementation',
    'testing',
    'documentation',
    'report',
    'evaluation',
  ];

  constructor(metadataManager: MetadataManager) {
    this.metadata = metadataManager;
  }

  /**
   * Create commit message for phase completion
   * Format:
   *   [ai-workflow] Phase {number} ({name}) - {status}
   *
   *   Issue: #{issue_number}
   *   Phase: {number} ({name})
   *   Status: {status}
   *   Review: {review_result}
   *
   *   Auto-generated by AI Workflow
   */
  public createCommitMessage(
    phaseName: PhaseName,
    status: 'completed' | 'failed',
    reviewResult?: string,
  ): string {
    const phaseNumber = this.phaseOrder.indexOf(phaseName) + 1;
    const issueNumber = this.metadata.data.issue_number;
    const review = reviewResult ?? 'N/A';

    return [
      `[ai-workflow] Phase ${phaseNumber} (${phaseName}) - ${status}`,
      '',
      `Issue: #${issueNumber}`,
      `Phase: ${phaseNumber} (${phaseName})`,
      `Status: ${status}`,
      `Review: ${review}`,
      '',
      'Auto-generated by AI Workflow',
    ].join('\n');
  }

  /**
   * Build step commit message
   * Format:
   *   [ai-workflow] Phase {number} ({name}) - {step} completed
   *
   *   Issue: #{issue_number}
   *   Phase: {number} ({name})
   *   Step: {step}
   *   Status: completed
   *
   *   Auto-generated by AI Workflow
   */
  public buildStepCommitMessage(
    phaseName: string,
    phaseNumber: number,
    step: string,
    issueNumber: number,
  ): string {
    return [
      `[ai-workflow] Phase ${phaseNumber} (${phaseName}) - ${step} completed`,
      '',
      `Issue: #${issueNumber}`,
      `Phase: ${phaseNumber} (${phaseName})`,
      `Step: ${step}`,
      `Status: completed`,
      '',
      'Auto-generated by AI Workflow',
    ].join('\n');
  }

  /**
   * Create initialization commit message
   * Format:
   *   [ai-workflow] Initialize workflow for issue #{issue_number}
   *
   *   Issue: #{issue_number}
   *   Action: Create workflow metadata and directory structure
   *   Branch: {branch_name}
   *
   *   Auto-generated by AI Workflow
   */
  public createInitCommitMessage(
    issueNumber: number,
    branchName: string,
  ): string {
    return [
      `[ai-workflow] Initialize workflow for issue #${issueNumber}`,
      '',
      `Issue: #${issueNumber}`,
      `Action: Create workflow metadata and directory structure`,
      `Branch: ${branchName}`,
      '',
      'Auto-generated by AI Workflow',
    ].join('\n');
  }

  /**
   * Create cleanup commit message
   * Format:
   *   [ai-workflow] Clean up workflow execution logs
   *
   *   Issue: #{issue_number}
   *   Phase: {number} ({phase})
   *   Action: Remove agent execution logs (execute/review/revise directories)
   *   Preserved: metadata.json, output/*.md
   *
   *   Auto-generated by AI Workflow
   */
  public createCleanupCommitMessage(
    issueNumber: number,
    phase: 'report' | 'evaluation',
  ): string {
    // Calculate correct phase number
    const phaseNumber = phase === 'report' ? 8 : 9;

    return [
      `[ai-workflow] Clean up workflow execution logs`,
      '',
      `Issue: #${issueNumber}`,
      `Phase: ${phaseNumber} (${phase})`,
      `Action: Remove agent execution logs (execute/review/revise directories)`,
      `Preserved: metadata.json, output/*.md`,
      '',
      'Auto-generated by AI Workflow',
    ].join('\n');
  }
}
