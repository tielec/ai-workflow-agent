# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-1/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-1/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue概要

- **Issue番号**: #1
- **タイトル**: [REFACTOR] 大規模ファイルのリファクタリング計画
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/1
- **ラベル**: なし

### 本文

## 概要

AI Workflow Agent のソースコードが肥大化しており、保守性と可読性が低下しています。
1000行を超えるファイルが複数存在し、責務の分離が不十分な状態です。

**移行元**: https://github.com/tielec/infrastructure-as-code/issues/414

## 現状分析

### ファイルサイズ（行数）

1. **main.ts**: 1159行 ⚠️
2. **base-phase.ts**: 1156行 ⚠️
3. **github-client.ts**: 702行 ⚠️
4. **git-manager.ts**: 548行
5. **content-parser.ts**: 359行
6. **report.ts**: 350行
7. **evaluation.ts**: 344行
8. **phase-dependencies.ts**: 336行

## リファクタリング計画

### 1. main.ts のリファクタリング（最優先）

**現状の問題**:
- CLIエントリーポイントとコマンドハンドラが混在
- 1159行の巨大ファイル
- コマンドごとの処理が複雑化

**リファクタリング案**:
```
src/
  commands/
    init-command.ts       # init コマンド処理
    run-command.ts        # run コマンド処理
    resume-command.ts     # resume コマンド処理
    status-command.ts     # status コマンド処理
    preset-command.ts     # preset コマンド処理
  main.ts                 # CLIエントリーポイント（ルーティングのみ）
```

**期待効果**:
- main.ts を200行以下に削減
- コマンドごとの責務を明確化
- テストしやすい構造に

---

### 2. base-phase.ts のリファクタリング（最優先）

**現状の問題**:
- BasePhaseクラスが1156行
- 複数の責務が混在（Agent実行、ログ処理、レビューサイクル、進捗管理）
- Codex/Claude Agent のログフォーマット処理が300行以上

**リファクタリング案**:
```
src/phases/
  base/
    base-phase.ts           # コア機能のみ（300行以下）
    agent-executor.ts       # Agent実行ロジック
    review-cycle-manager.ts # レビューサイクル管理
    progress-formatter.ts   # 進捗コメント生成
    agent-log-formatter.ts  # Agentログフォーマット
```

**期待効果**:
- base-phase.ts を300行以下に削減
- 各責務を独立したクラスに分離
- テストしやすい構造に
- 新しいフェーズの追加が容易に

---

### 3. github-client.ts のリファクタリング（高優先）

**現状の問題**:
- GitHub API呼び出しが集中（702行）
- Issue操作、PR操作、コメント操作が混在

**リファクタリング案**:
```
src/core/github/
  github-client.ts         # ファサード（統合インターフェース）
  issue-client.ts          # Issue操作
  pr-client.ts             # PR操作
  comment-client.ts        # コメント操作
  review-client.ts         # レビュー投稿
```

**期待効果**:
- 責務ごとに分離
- 各クラスを200行以下に
- GitHub API変更時の影響範囲を限定

---

### 4. git-manager.ts のリファクタリング（中優先）

**現状の問題**:
- Git操作が集中（548行）
- コミット、プッシュ、ブランチ管理が混在

**リファクタリング案**:
```
src/core/git/
  git-manager.ts           # ファサード
  commit-manager.ts        # コミット操作
  branch-manager.ts        # ブランチ操作
  remote-manager.ts        # リモート操作
```

**期待効果**:
- 責務ごとに分離
- 各クラスを200行以下に
- テストしやすい構造に

---

## 優先順位

1. **Phase 1**: main.ts のリファクタリング（最優先）
2. **Phase 2**: base-phase.ts のリファクタリング（最優先）
3. **Phase 3**: github-client.ts のリファクタリング（高優先）
4. **Phase 4**: git-manager.ts のリファクタリング（中優先）

## 実装方針

### 原則

1. **後方互換性の維持**: 既存の動作を壊さない
2. **段階的リファクタリング**: 1ファイルずつ対応
3. **テストカバレッジの維持**: リファクタリング前後で動作確認
4. **既存機能の保持**: 機能削除は行わない

### 手順

各リファクタリングは以下の手順で実施：

1. 新しいファイル構造を作成
2. 既存コードを新しい構造に移動
3. 既存ファイルから新しいファイルを参照
4. ビルド＆動作確認
5. コミット

## TODO

- [x] リファクタリング計画の策定
- [ ] Phase 1: main.ts のリファクタリング実施
- [ ] Phase 2: base-phase.ts のリファクタリング実施
- [ ] Phase 3: github-client.ts のリファクタリング実施
- [ ] Phase 4: git-manager.ts のリファクタリング実施

## 参考

- SOLID原則（特に単一責任の原則）
- リファクタリング: 既存のコードを安全に改善する技術

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-1/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
