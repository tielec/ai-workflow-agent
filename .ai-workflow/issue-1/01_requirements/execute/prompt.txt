# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-1/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #1
- **タイトル**: [REFACTOR] 大規模ファイルのリファクタリング計画
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/1
- **ラベル**: なし

### 本文

## 概要

AI Workflow Agent のソースコードが肥大化しており、保守性と可読性が低下しています。
1000行を超えるファイルが複数存在し、責務の分離が不十分な状態です。

**移行元**: https://github.com/tielec/infrastructure-as-code/issues/414

## 現状分析

### ファイルサイズ（行数）

1. **main.ts**: 1159行 ⚠️
2. **base-phase.ts**: 1156行 ⚠️
3. **github-client.ts**: 702行 ⚠️
4. **git-manager.ts**: 548行
5. **content-parser.ts**: 359行
6. **report.ts**: 350行
7. **evaluation.ts**: 344行
8. **phase-dependencies.ts**: 336行

## リファクタリング計画

### 1. main.ts のリファクタリング（最優先）

**現状の問題**:
- CLIエントリーポイントとコマンドハンドラが混在
- 1159行の巨大ファイル
- コマンドごとの処理が複雑化

**リファクタリング案**:
```
src/
  commands/
    init-command.ts       # init コマンド処理
    run-command.ts        # run コマンド処理
    resume-command.ts     # resume コマンド処理
    status-command.ts     # status コマンド処理
    preset-command.ts     # preset コマンド処理
  main.ts                 # CLIエントリーポイント（ルーティングのみ）
```

**期待効果**:
- main.ts を200行以下に削減
- コマンドごとの責務を明確化
- テストしやすい構造に

---

### 2. base-phase.ts のリファクタリング（最優先）

**現状の問題**:
- BasePhaseクラスが1156行
- 複数の責務が混在（Agent実行、ログ処理、レビューサイクル、進捗管理）
- Codex/Claude Agent のログフォーマット処理が300行以上

**リファクタリング案**:
```
src/phases/
  base/
    base-phase.ts           # コア機能のみ（300行以下）
    agent-executor.ts       # Agent実行ロジック
    review-cycle-manager.ts # レビューサイクル管理
    progress-formatter.ts   # 進捗コメント生成
    agent-log-formatter.ts  # Agentログフォーマット
```

**期待効果**:
- base-phase.ts を300行以下に削減
- 各責務を独立したクラスに分離
- テストしやすい構造に
- 新しいフェーズの追加が容易に

---

### 3. github-client.ts のリファクタリング（高優先）

**現状の問題**:
- GitHub API呼び出しが集中（702行）
- Issue操作、PR操作、コメント操作が混在

**リファクタリング案**:
```
src/core/github/
  github-client.ts         # ファサード（統合インターフェース）
  issue-client.ts          # Issue操作
  pr-client.ts             # PR操作
  comment-client.ts        # コメント操作
  review-client.ts         # レビュー投稿
```

**期待効果**:
- 責務ごとに分離
- 各クラスを200行以下に
- GitHub API変更時の影響範囲を限定

---

### 4. git-manager.ts のリファクタリング（中優先）

**現状の問題**:
- Git操作が集中（548行）
- コミット、プッシュ、ブランチ管理が混在

**リファクタリング案**:
```
src/core/git/
  git-manager.ts           # ファサード
  commit-manager.ts        # コミット操作
  branch-manager.ts        # ブランチ操作
  remote-manager.ts        # リモート操作
```

**期待効果**:
- 責務ごとに分離
- 各クラスを200行以下に
- テストしやすい構造に

---

## 優先順位

1. **Phase 1**: main.ts のリファクタリング（最優先）
2. **Phase 2**: base-phase.ts のリファクタリング（最優先）
3. **Phase 3**: github-client.ts のリファクタリング（高優先）
4. **Phase 4**: git-manager.ts のリファクタリング（中優先）

## 実装方針

### 原則

1. **後方互換性の維持**: 既存の動作を壊さない
2. **段階的リファクタリング**: 1ファイルずつ対応
3. **テストカバレッジの維持**: リファクタリング前後で動作確認
4. **既存機能の保持**: 機能削除は行わない

### 手順

各リファクタリングは以下の手順で実施：

1. 新しいファイル構造を作成
2. 既存コードを新しい構造に移動
3. 既存ファイルから新しいファイルを参照
4. ビルド＆動作確認
5. コミット

## TODO

- [x] リファクタリング計画の策定
- [ ] Phase 1: main.ts のリファクタリング実施
- [ ] Phase 2: base-phase.ts のリファクタリング実施
- [ ] Phase 3: github-client.ts のリファクタリング実施
- [ ] Phase 4: git-manager.ts のリファクタリング実施

## 参考

- SOLID原則（特に単一責任の原則）
- リファクタリング: 既存のコードを安全に改善する技術

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-1/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
