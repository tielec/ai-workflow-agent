# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-1/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-1/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-1/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #1
- **タイトル**: [REFACTOR] 大規模ファイルのリファクタリング計画
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/1
- **ラベル**: なし

### 本文

## 概要

AI Workflow Agent のソースコードが肥大化しており、保守性と可読性が低下しています。
1000行を超えるファイルが複数存在し、責務の分離が不十分な状態です。

**移行元**: https://github.com/tielec/infrastructure-as-code/issues/414

## 現状分析

### ファイルサイズ（行数）

1. **main.ts**: 1159行 ⚠️
2. **base-phase.ts**: 1156行 ⚠️
3. **github-client.ts**: 702行 ⚠️
4. **git-manager.ts**: 548行
5. **content-parser.ts**: 359行
6. **report.ts**: 350行
7. **evaluation.ts**: 344行
8. **phase-dependencies.ts**: 336行

## リファクタリング計画

### 1. main.ts のリファクタリング（最優先）

**現状の問題**:
- CLIエントリーポイントとコマンドハンドラが混在
- 1159行の巨大ファイル
- コマンドごとの処理が複雑化

**リファクタリング案**:
```
src/
  commands/
    init-command.ts       # init コマンド処理
    run-command.ts        # run コマンド処理
    resume-command.ts     # resume コマンド処理
    status-command.ts     # status コマンド処理
    preset-command.ts     # preset コマンド処理
  main.ts                 # CLIエントリーポイント（ルーティングのみ）
```

**期待効果**:
- main.ts を200行以下に削減
- コマンドごとの責務を明確化
- テストしやすい構造に

---

### 2. base-phase.ts のリファクタリング（最優先）

**現状の問題**:
- BasePhaseクラスが1156行
- 複数の責務が混在（Agent実行、ログ処理、レビューサイクル、進捗管理）
- Codex/Claude Agent のログフォーマット処理が300行以上

**リファクタリング案**:
```
src/phases/
  base/
    base-phase.ts           # コア機能のみ（300行以下）
    agent-executor.ts       # Agent実行ロジック
    review-cycle-manager.ts # レビューサイクル管理
    progress-formatter.ts   # 進捗コメント生成
    agent-log-formatter.ts  # Agentログフォーマット
```

**期待効果**:
- base-phase.ts を300行以下に削減
- 各責務を独立したクラスに分離
- テストしやすい構造に
- 新しいフェーズの追加が容易に

---

### 3. github-client.ts のリファクタリング（高優先）

**現状の問題**:
- GitHub API呼び出しが集中（702行）
- Issue操作、PR操作、コメント操作が混在

**リファクタリング案**:
```
src/core/github/
  github-client.ts         # ファサード（統合インターフェース）
  issue-client.ts          # Issue操作
  pr-client.ts             # PR操作
  comment-client.ts        # コメント操作
  review-client.ts         # レビュー投稿
```

**期待効果**:
- 責務ごとに分離
- 各クラスを200行以下に
- GitHub API変更時の影響範囲を限定

---

### 4. git-manager.ts のリファクタリング（中優先）

**現状の問題**:
- Git操作が集中（548行）
- コミット、プッシュ、ブランチ管理が混在

**リファクタリング案**:
```
src/core/git/
  git-manager.ts           # ファサード
  commit-manager.ts        # コミット操作
  branch-manager.ts        # ブランチ操作
  remote-manager.ts        # リモート操作
```

**期待効果**:
- 責務ごとに分離
- 各クラスを200行以下に
- テストしやすい構造に

---

## 優先順位

1. **Phase 1**: main.ts のリファクタリング（最優先）
2. **Phase 2**: base-phase.ts のリファクタリング（最優先）
3. **Phase 3**: github-client.ts のリファクタリング（高優先）
4. **Phase 4**: git-manager.ts のリファクタリング（中優先）

## 実装方針

### 原則

1. **後方互換性の維持**: 既存の動作を壊さない
2. **段階的リファクタリング**: 1ファイルずつ対応
3. **テストカバレッジの維持**: リファクタリング前後で動作確認
4. **既存機能の保持**: 機能削除は行わない

### 手順

各リファクタリングは以下の手順で実施：

1. 新しいファイル構造を作成
2. 既存コードを新しい構造に移動
3. 既存ファイルから新しいファイルを参照
4. ビルド＆動作確認
5. コミット

## TODO

- [x] リファクタリング計画の策定
- [ ] Phase 1: main.ts のリファクタリング実施
- [ ] Phase 2: base-phase.ts のリファクタリング実施
- [ ] Phase 3: github-client.ts のリファクタリング実施
- [ ] Phase 4: git-manager.ts のリファクタリング実施

## 参考

- SOLID原則（特に単一責任の原則）
- リファクタリング: 既存のコードを安全に改善する技術

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-1/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
