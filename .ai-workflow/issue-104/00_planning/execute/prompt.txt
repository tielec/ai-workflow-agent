# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue概要

- **Issue番号**: #104
- **タイトル**: Evaluation Phase のフォローアップ Issue を改善: タイトルと本文を明確で実行可能にする
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/104
- **ラベル**: なし

### 本文

## 問題

現在、AI Workflow の Evaluation フェーズ（Phase 9）で自動生成されるフォローアップ Issue は、タイトルと本文の両方に問題があります。

### 1. タイトルが内容を反映していない

**現状の例**:
- `[FOLLOW-UP] Issue #91 - 残タスク`
- `[FOLLOW-UP] Issue #52 - 残タスク`
- `[FOLLOW-UP] Issue #74 - 残タスク`

**問題点**:
- **すべて同じフォーマット**: どの Issue も「残タスク」としか書かれていない
- **内容が推測できない**: Issue リストを見ても、何のタスクなのか分からない
- **検索性が低い**: タイトルで検索できない（すべて「残タスク」で引っかかる）

**改善例**:
- `[FOLLOW-UP] #91: テストカバレッジ改善とパフォーマンスベンチマーク`
- `[FOLLOW-UP] #52: Jest 設定修正とテスト期待値更新`
- `[FOLLOW-UP] #74: ESLint ルール追加と SecretMasker 統合の検討`

### 2. タスク内容が理解しにくい

**現状の例**:
```markdown
## 残タスク一覧

- [ ] Coverage improvement to 90% for key modules (Phase: test_implementation, 優先度: Medium)
- [ ] Performance benchmark execution and verification (Phase: testing, 優先度: Medium)
```

**問題点**:
- **何をすべきか不明確**: "Coverage improvement to 90%" だけでは、どのファイルをどう修正するのか分からない
- **優先度の根拠がない**: なぜ Medium なのか？　何から始めればいいのか？
- **成功条件が不明**: どうなれば完了とみなせるのか？

### 3. コンテキスト情報が不足

**現状**:
```markdown
## 参考

- 元Issue: #91
- Evaluation Report: `AI_Workflow/ai_workflow_orchestrator_develop/.ai-workflow/issue-91/09_evaluation/output/evaluation_report.md`
```

**問題点**:
- Evaluation Report のパスが示されているが、GitHub Issue コメントからは直接アクセスできない
- 元 Issue の Summary や、なぜこれらのタスクが残ったのかの説明がない
- タスク間の依存関係が不明（例: タスク1完了後にタスク2を実行、など）

### 4. 実行に必要な情報が欠けている

**欠けている情報**:
- **対象ファイル**: どのファイルを修正すべきか
- **具体的な手順**: 何をどう変更すべきか（例: Jest設定の具体的な修正箇所）
- **テスト手順**: 修正後にどうやって確認するか
- **Acceptance Criteria**: どうなれば完了とみなせるか

## 期待される改善

### 1. タイトルの改善

タスク内容を反映した、検索可能で分かりやすいタイトルにする：

**フォーマット案**:
```
[FOLLOW-UP] #{元Issue番号}: {タスクの概要（1-3個のキーワード）}
```

**実装方法**:
- 残タスクリストから主要なキーワードを抽出（最大3個）
- または、元 Issue のタイトルを要約したものを使用
- 長すぎる場合は 80 文字で切り詰め

**例**:
- `[FOLLOW-UP] #91: テストカバレッジ改善・パフォーマンスベンチマーク・ドキュメント更新`
- `[FOLLOW-UP] #52: Jest 設定修正・テスト期待値更新`
- `[FOLLOW-UP] #46: execute.ts リファクタリング・テスト失敗対応`

### 2. タスク記述の改善

各タスクに以下の情報を含める：

```markdown
### Task 1: カバレッジを 90% に改善

**対象モジュール**:
- `src/core/phase-factory.ts` (現在: 75%)
- `src/commands/execute/agent-setup.ts` (現在: 80%)

**必要な作業**:
1. 不足しているテストケースを特定（カバレッジレポート参照）
2. 以下のエッジケースのテストを追加:
   - エラーハンドリング分岐
   - 無効な入力値の処理
   - タイムアウト処理

**Acceptance Criteria**:
- [ ] すべての対象モジュールで 90% 以上のカバレッジを達成
- [ ] `npm run test:coverage` がすべてパス
- [ ] 既存テストがすべてパス（リグレッションなし）

**優先度**: Medium（元 Issue #91 の推奨事項、ブロッカーではない）

**参考**:
- Evaluation Report（該当箇所）: 行 XX-YY
- Coverage Report: `tests/coverage/lcov-report/index.html`
```

### 3. コンテキスト情報の充実

```markdown
## 背景

この Issue は、Issue #91「[FOLLOW-UP] Issue #49 - 残タスク」の Evaluation フェーズで特定された残タスクをまとめたものです。

**元 Issue の要約**:
Issue #91 では、BasePhase モジュール分解（Issue #49）で発生した 15 件のテスト失敗を修正しました。すべてのブロッカーは解決済みですが、以下の推奨改善項目が残っています。

**なぜこれらのタスクが残ったか**:
- テスト失敗修正を優先したため、カバレッジ改善は後回しにした（Planning Document 411-416 行）
- パフォーマンスベンチマークは「強く推奨」だがマージのブロッカーではないと判断（Phase 6 テスト結果 386-388 行）
```

### 4. タスク間の依存関係を明示

```markdown
## タスク実行順序

1. **Task 1** (ブロッカーなし): カバレッジ改善
2. **Task 2** (Task 1 完了後): パフォーマンスベンチマーク実行
3. **Task 3** (Task 2 完了後): パフォーマンス特性のドキュメント化
```

## 実装の提案

### 修正対象ファイル
- `src/core/github/issue-client.ts` の `createIssueFromEvaluation()` メソッド（178-232 行）

### 必要な変更

#### 1. タイトル生成ロジックの追加

```typescript
private generateFollowUpTitle(issueNumber: number, remainingTasks: RemainingTask[]): string {
  // タスクから主要なキーワードを抽出
  const keywords = this.extractKeywords(remainingTasks, 3);
  
  const title = keywords.length > 0
    ? `[FOLLOW-UP] #${issueNumber}: ${keywords.join('・')}`
    : `[FOLLOW-UP] Issue #${issueNumber} - 残タスク`; // フォールバック
  
  // 80文字制限
  return title.length > 80 ? title.substring(0, 77) + '...' : title;
}

private extractKeywords(tasks: RemainingTask[], maxCount: number): string[] {
  // タスクテキストから重要なキーワードを抽出
  // 例: "Coverage improvement to 90%" -> "カバレッジ改善"
  //     "Jest設定を修正して..." -> "Jest設定修正"
  const keywords: string[] = [];
  
  for (const task of tasks.slice(0, maxCount)) {
    const taskText = String(task.task ?? '');
    // 簡略化ロジック（括弧前まで、または最初の20文字）
    const keyword = taskText.split('（')[0].split('(')[0].trim().substring(0, 20);
    if (keyword) keywords.push(keyword);
  }
  
  return keywords;
}
```

#### 2. Evaluation Report からの情報抽出を強化

```typescript
public async createIssueFromEvaluation(
  issueNumber: number,
  remainingTasks: RemainingTask[],
  evaluationReportPath: string,
  // 新規パラメータ
  issueContext?: {
    summary: string;
    blockerStatus: string;
    deferredReason: string;
  },
): Promise<IssueCreationResult> {
  const title = this.generateFollowUpTitle(issueNumber, remainingTasks);
  const lines: string[] = [];
  
  lines.push('## 背景', '');
  lines.push(issueContext?.summary ?? `AI Workflow Issue #${issueNumber} の評価フェーズで残タスクが見つかりました。`, '');
  
  if (issueContext?.blockerStatus) {
    lines.push('### 元 Issue のステータス', '');
    lines.push(issueContext.blockerStatus, '');
  }
  
  if (issueContext?.deferredReason) {
    lines.push('### なぜこれらのタスクが残ったか', '');
    lines.push(issueContext.deferredReason, '');
  }
  
  lines.push('## 残タスク詳細', '');
  
  for (const task of remainingTasks) {
    lines.push(`### ${task.task}`, '');
    
    if (task.targetFiles) {
      lines.push('**対象ファイル**:', '');
      task.targetFiles.forEach(file => lines.push(`- \`${file}\``));
      lines.push('');
    }
    
    if (task.steps) {
      lines.push('**必要な作業**:', '');
      task.steps.forEach((step, i) => lines.push(`${i + 1}. ${step}`));
      lines.push('');
    }
    
    if (task.acceptanceCriteria) {
      lines.push('**Acceptance Criteria**:', '');
      task.acceptanceCriteria.forEach(ac => lines.push(`- [ ] ${ac}`));
      lines.push('');
    }
    
    lines.push(`**Phase**: ${task.phase ?? 'unknown'}`, '');
    lines.push(`**優先度**: ${task.priority ?? '中'}${task.priorityReason ? ` - ${task.priorityReason}` : ''}`, '');
    lines.push('');
  }
  
  lines.push('## 参考', '');
  lines.push(`- 元Issue: #${issueNumber}`);
  lines.push(`- Evaluation Report: \`${evaluationReportPath}\``);
  lines.push('', '---', '*自動生成: AI Workflow Phase 9 (Evaluation)*');
  
  const { data } = await this.octokit.issues.create({
    owner: this.owner,
    repo: this.repo,
    title, // 改善されたタイトル
    body: lines.join('\n'),
    labels: ['enhancement', 'ai-workflow-follow-up'],
  });
  
  // ...
}
```

#### 3. RemainingTask 型の拡張（必要に応じて）

```typescript
// src/types.ts
export interface RemainingTask {
  task: string;
  phase?: string;
  priority?: string;
  priorityReason?: string;        // 新規: 優先度の理由
  targetFiles?: string[];         // 新規: 対象ファイル
  steps?: string[];               // 新規: 実行手順
  acceptanceCriteria?: string[];  // 新規: AC
  dependencies?: string[];        // 新規: 依存タスク
}
```

## Acceptance Criteria

- [ ] フォローアップ Issue のタイトルがタスク内容を反映している（主要なキーワードを含む）
- [ ] タイトルは 80 文字以内に収まる
- [ ] タイトルから Issue の内容が推測できる
- [ ] フォローアップ Issue に「背景」セクションが追加される（元 Issue の要約、なぜタスクが残ったか）
- [ ] 各タスクに以下の情報が含まれる（該当する場合）:
  - [ ] 対象ファイル/モジュール
  - [ ] 必要な作業の具体的な手順
  - [ ] Acceptance Criteria
  - [ ] 優先度の根拠
- [ ] タスク間の依存関係が明示される（該当する場合）
- [ ] Evaluation Report へのアクセス方法が改善される（リンクまたは本文への埋め込み）
- [ ] 既存のフォローアップ Issue 作成機能が壊れない（後方互換性）

## 補足情報

### 関連 Issue
- Issue #94: `[FOLLOW-UP] Issue #91 - 残タスク`（タイトルが不明瞭）
- Issue #96: `[FOLLOW-UP] Issue #90 - 残タスク`（タイトルが不明瞭）
- Issue #98: `[FOLLOW-UP] Issue #74 - 残タスク`（タイトルが不明瞭）
- Issue #102: `[FOLLOW-UP] Issue #52 - 残タスク`（タイトルが不明瞭）

### 参考資料
- `src/core/github/issue-client.ts:178-232` - 現在の実装
- `src/types.ts` - `RemainingTask` 型定義（拡張が必要になる可能性あり）

---
*AI Workflow の改善提案*

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

## ⚠️ 重要: チェックリスト標準フォーマット（必須）

各フェーズのタスクは、**必ずチェックリスト形式**で記述してください。このチェックリストは、Review Phaseで完了判定に使用されます。

### 標準フォーマット

```markdown
### Phase X: [フェーズ名] (見積もり: X~Yh)

- [ ] Task X-1: [タスク名] (見積もり時間)
  - [サブタスク1]
  - [サブタスク2]
- [ ] Task X-2: [タスク名] (見積もり時間)
  - [サブタスク1]
```

**重要**: このチェックリストは、Review Phaseで完了判定に使用されます。各タスクは明確で検証可能な内容にしてください。

**良い例**:
```
- [ ] Task 4-1: CLI層の分離 (3~5h)
  - cli/commands.py の作成
  - main.pyからCLIロジックを抽出
```

**悪い例**:
```
- [ ] リファクタリングを実施
```
（検証不可能なため不適切）

### 各フェーズのタスクリスト

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)

- [ ] Task 1-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2
- [ ] Task 1-2: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 2: 設計 (見積もり: Xh)

- [ ] Task 2-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 3: テストシナリオ (見積もり: Xh)

- [ ] Task 3-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 4: 実装 (見積もり: Xh)

- [ ] Task 4-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 5: テストコード実装 (見積もり: Xh)

- [ ] Task 5-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 6: テスト実行 (見積もり: Xh)

- [ ] Task 6-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 7: ドキュメント (見積もり: Xh)

- [ ] Task 7-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 8: レポート (見積もり: Xh)

- [ ] Task 8-1: [タスク名] (見積もり時間)
  - サブタスク1

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能
- **検証可能**: Review Phaseで「完了したか」を客観的に判断できる内容

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-104/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
