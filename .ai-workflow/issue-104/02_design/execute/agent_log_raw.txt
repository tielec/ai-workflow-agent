{"type":"system","subtype":"init","cwd":"/tmp/jenkins-a61a4102/workspace/AI_Workflow/ai_workflow_orchestrator_develop","session_id":"17909280-5bff-4931-a474-39d2b71a8bde","tools":["Task","Bash","Glob","Grep","ExitPlanMode","Read","Edit","Write","NotebookEdit","WebFetch","TodoWrite","WebSearch","BashOutput","KillShell","Skill","SlashCommand"],"mcp_servers":[],"model":"claude-sonnet-4-5-20250929","permissionMode":"bypassPermissions","slash_commands":["compact","context","cost","init","output-style:new","pr-comments","release-notes","todos","review","security-review"],"apiKeySource":"none","claude_code_version":"2.0.21","output_style":"default","agents":["general-purpose","statusline-setup","output-style-setup","Explore"],"uuid":"566c1e0a-41cd-4d29-a731-a27b4a48a880"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01BQwr7DFr9MR3pPEV5htyCb","type":"message","role":"assistant","content":[{"type":"text","text":"I'll create a detailed design document for Issue #104 based on the planning document, requirements specification, and project architecture."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":68967,"cache_read_input_tokens":12593,"cache_creation":{"ephemeral_5m_input_tokens":68967,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"17909280-5bff-4931-a474-39d2b71a8bde","uuid":"a00ed174-ed81-4210-9c3e-4f94e3c36fa9"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01BQwr7DFr9MR3pPEV5htyCb","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01PMm9dDhYzWFgQ4EgkjNfzU","name":"Write","input":{"file_path":"/tmp/jenkins-a61a4102/workspace/AI_Workflow/ai_workflow_orchestrator_develop/.ai-workflow/issue-104/02_design/output/design.md","content":"# 詳細設計書 - Issue #104\n\n## 0. Planning Document の確認\n\nPlanning Phase (Phase 0) で策定された開発計画を確認しました。主要な戦略は以下の通りです：\n\n### 開発計画の全体像\n- **複雑度**: 中程度\n- **見積もり工数**: 10~14時間\n- **実装戦略**: EXTEND（既存の `IssueClient.createIssueFromEvaluation()` メソッドを拡張）\n- **テスト戦略**: UNIT_INTEGRATION（ユニットテストとインテグレーションテストの組み合わせ）\n- **テストコード戦略**: BOTH_TEST（既存テストの拡張 + 新規テスト作成）\n\n### 主なリスク\n- `RemainingTask` 型の拡張による後方互換性の破壊（軽減策: すべてオプショナルフィールドとして定義）\n- Evaluation レポートから詳細情報を抽出できない可能性（軽減策: フォールバック処理とデフォルト値の使用）\n- タイトル生成のキーワード抽出が不正確（軽減策: シンプルなアルゴリズムとフォールバック）\n\n---\n\n## 1. アーキテクチャ設計\n\n### 1.1 システム全体図\n\n```\n┌─────────────────────────────────────────────────────────────────┐\n│                     Evaluation Phase (Phase 9)                  │\n│                   src/phases/evaluation.ts                      │\n└────────────────────────┬────────────────────────────────────────┘\n                         │\n                         │ handlePassWithIssues()\n                         │ ・Issue Summary 抽出\n                         │ ・Blocker Status 抽出\n                         │ ・Deferred Reason 抽出\n                         ▼\n              ┌──────────────────────────┐\n              │   IssueContext 構築      │\n              │ {                        │\n              │   summary: string        │\n              │   blockerStatus: string  │\n              │   deferredReason: string │\n              │ }                        │\n              └──────────┬───────────────┘\n                         │\n                         │ createIssueFromEvaluation() 呼び出し\n                         ▼\n┌─────────────────────────────────────────────────────────────────┐\n│                   IssueClient (GitHub API)                      │\n│              src/core/github/issue-client.ts                    │\n│                                                                 │\n│  ┌────────────────────────────────────────────────────────┐   │\n│  │  createIssueFromEvaluation()                           │   │\n│  │  ・新規パラメータ: issueContext?: IssueContext         │   │\n│  │  ・タイトル生成: generateFollowUpTitle()               │   │\n│  │  ・本文生成: 背景セクション + 詳細タスク情報           │   │\n│  └──────────────┬─────────────────────────────────────────┘   │\n│                 │                                               │\n│                 ├──► generateFollowUpTitle()                    │\n│                 │    ・キーワード抽出: extractKeywords()        │\n│                 │    ・80文字制限 + フォールバック              │\n│                 │                                               │\n│                 └──► formatTaskDetails()                        │\n│                      ・対象ファイル表示                         │\n│                      ・必要な作業表示                           │\n│                      ・Acceptance Criteria 表示                 │\n│                      ・優先度の根拠表示                         │\n└─────────────────────────────────────────────────────────────────┘\n                         │\n                         │ GitHub API (Octokit)\n                         ▼\n              ┌──────────────────────────┐\n              │  GitHub Issue 作成       │\n              │  ・改善されたタイトル    │\n              │  ・背景セクション付き    │\n              │  ・詳細タスク情報付き    │\n              └──────────────────────────┘\n```\n\n### 1.2 データフロー\n\n```\n[Evaluation Phase]\n       │\n       ├─► Evaluation レポート解析\n       │   ・元 Issue タイトル取得\n       │   ・ブロッカーステータス抽出\n       │   ・タスク後回し理由抽出\n       │\n       ├─► IssueContext オブジェクト構築\n       │   {\n       │     summary: string,\n       │     blockerStatus: string,\n       │     deferredReason: string\n       │   }\n       │\n       └─► createIssueFromEvaluation() 呼び出し\n              │\n              ├─► generateFollowUpTitle()\n              │   ├─► extractKeywords(tasks, 3)\n              │   │   └─► タスクテキストから主要キーワード抽出\n              │   └─► フォーマット: [FOLLOW-UP] #{num}: {keywords}\n              │\n              ├─► 本文生成\n              │   ├─► 背景セクション\n              │   │   ├─► Issue Summary\n              │   │   ├─► Blocker Status\n              │   │   └─► Deferred Reason\n              │   │\n              │   └─► 残タスク詳細セクション\n              │       ├─► 対象ファイル (targetFiles?)\n              │       ├─► 必要な作業 (steps?)\n              │       ├─► Acceptance Criteria (acceptanceCriteria?)\n              │       ├─► 優先度 + 根拠 (priority + priorityReason?)\n              │       ├─► 依存タスク (dependencies?)\n              │       └─► 見積もり工数 (estimatedHours?)\n              │\n              └─► GitHub Issue 作成\n```\n\n### 1.3 コンポーネント間の関係\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                        Types Layer                          │\n│                      src/types.ts                           │\n│                                                             │\n│  ┌──────────────────────────────────────────────────────┐  │\n│  │  RemainingTask (拡張)                                │  │\n│  │  ・既存: task, phase, priority                       │  │\n│  │  ・新規: priorityReason?, targetFiles?, steps?,      │  │\n│  │         acceptanceCriteria?, dependencies?,          │  │\n│  │         estimatedHours?                              │  │\n│  └──────────────────────────────────────────────────────┘  │\n│                                                             │\n│  ┌──────────────────────────────────────────────────────┐  │\n│  │  IssueContext (新規)                                 │  │\n│  │  {                                                   │  │\n│  │    summary: string,                                  │  │\n│  │    blockerStatus: string,                            │  │\n│  │    deferredReason: string                            │  │\n│  │  }                                                   │  │\n│  └──────────────────────────────────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n                            │\n                            │ 型定義を利用\n                            ▼\n┌─────────────────────────────────────────────────────────────┐\n│                   GitHub Client Layer                       │\n│           src/core/github/issue-client.ts                   │\n│                                                             │\n│  ┌──────────────────────────────────────────────────────┐  │\n│  │  IssueClient クラス                                  │  │\n│  │                                                       │  │\n│  │  ◆ 既存メソッド（拡張）:                             │  │\n│  │    createIssueFromEvaluation(                        │  │\n│  │      issueNumber,                                    │  │\n│  │      remainingTasks,                                 │  │\n│  │      evaluationReportPath,                           │  │\n│  │      issueContext?: IssueContext  ← 新規             │  │\n│  │    )                                                 │  │\n│  │                                                       │  │\n│  │  ◆ 新規 private メソッド:                            │  │\n│  │    generateFollowUpTitle()                           │  │\n│  │    extractKeywords()                                 │  │\n│  │    formatTaskDetails()                               │  │\n│  └──────────────────────────────────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n                            ▲\n                            │ 呼び出し\n                            │\n┌─────────────────────────────────────────────────────────────┐\n│                   Evaluation Phase Layer                    │\n│                src/phases/evaluation.ts                     │\n│                                                             │\n│  ┌──────────────────────────────────────────────────────┐  │\n│  │  EvaluationPhase クラス                              │  │\n│  │                                                       │  │\n│  │  ◆ 修正メソッド:                                     │  │\n│  │    handlePassWithIssues()                            │  │\n│  │    ・Evaluation レポートから情報抽出                 │  │\n│  │    ・IssueContext オブジェクト構築                   │  │\n│  │    ・createIssueFromEvaluation() に渡す              │  │\n│  └──────────────────────────────────────────────────────┘  │\n└─────────────────────────────────────────────────────────────┘\n```\n\n---\n\n## 2. 実装戦略判断\n\n### 実装戦略: EXTEND\n\n**判断根拠**:\n- **既存コードの拡張が中心**: `IssueClient.createIssueFromEvaluation()` メソッドを拡張し、新規パラメータを追加する\n- **新規ファイル作成は不要**: すべての修正は既存モジュール（`src/core/github/issue-client.ts`, `src/types.ts`, `src/phases/evaluation.ts`）への追加が中心\n- **アーキテクチャレベルの変更は不要**: GitHub API 統合パターン、Evaluation Phase のフロー、型定義パターンは既存のままで十分\n- **後方互換性を維持**: 新規パラメータはすべてオプショナル（`?:`）として定義し、既存の呼び出し元は無変更で動作する\n\n---\n\n## 3. テスト戦略判断\n\n### テスト戦略: UNIT_INTEGRATION\n\n**判断根拠**:\n\n#### ユニットテストが必要な理由\n- **新規ヘルパーメソッドの独立性**: `generateFollowUpTitle()`, `extractKeywords()`, `formatTaskDetails()` は独立した関数として設計されており、ユニットテストで境界値テスト（空配列、長文、特殊文字等）が実施可能\n- **タイトル生成ロジックの正確性検証**: キーワード抽出アルゴリズムが正しく動作するか、80文字制限とフォールバック処理が適切に機能するかを確認\n- **型安全性の検証**: `RemainingTask` 型の新規オプショナルフィールドが正しく扱われるか確認\n\n#### インテグレーションテストが必要な理由\n- **Evaluation Phase との統合検証**: `handlePassWithIssues()` → `createIssueFromEvaluation()` のフロー全体が正しく動作するか確認\n- **GitHub API モック（Octokit）との統合**: Issue 作成時に正しいタイトルと本文が送信されるか確認\n- **既存フローの破壊がないことを確認**: 新規パラメータ未指定時、従来と同じ動作をすることを確認（後方互換性テスト）\n\n#### BDD が不要な理由\n- **エンドユーザー向けUI変更ではない**: フォローアップ Issue の改善は内部処理の改善であり、ユーザーストーリー形式のテストは不要\n- **技術的な正確性が重要**: Given-When-Then よりも、関数単位の境界値テストや統合テストが適している\n\n---\n\n## 4. テストコード戦略判断\n\n### テストコード戦略: BOTH_TEST\n\n**判断根拠**:\n\n#### 既存テストの拡張が必要な理由\n- **既存テストファイルが存在**: `tests/unit/github/issue-client.test.ts` に `createIssueFromEvaluation()` のテストが既に存在する（行301-397）\n- **後方互換性の検証**: 新規パラメータ未指定時、既存の動作が保たれることを確認するため、既存テストケースを拡張する\n- **統一性の維持**: 既存のテストケース構造（モック、アサーション）に合わせてテストを追加することで、テストコード全体の一貫性を維持\n\n#### 新規テストの作成が必要な理由\n- **新規機能の専用テストスイート**: タイトル生成とキーワード抽出は完全に新しい機能であり、専用のテストスイートを作成することで可読性とメンテナンス性が向上\n- **境界値テストの網羅**: 空配列、長大なタイトル、特殊文字、日本語・英語混在等のエッジケースを体系的にテスト\n- **拡張された `RemainingTask` 型のフィールド処理テスト**: オプショナルフィールドが存在する場合・存在しない場合の両方をテスト\n\n---\n\n## 5. 影響範囲分析\n\n### 5.1 既存コードへの影響\n\n#### 変更が必要なファイル\n\n1. **`src/types.ts`** (型定義の拡張)\n   - **影響箇所**: `RemainingTask` interface（32-36行付近）\n   - **変更内容**: 6つの新規フィールド追加（すべてオプショナル）\n   - **影響度**: 低（後方互換性を維持）\n   - **リスク**: 既存コードは新規フィールドを無視するだけで動作するため、破壊的変更なし\n\n2. **`src/core/github/issue-client.ts`** (コア実装)\n   - **影響箇所**: `createIssueFromEvaluation()` メソッド（178-232行）\n   - **変更内容**:\n     - メソッドシグネチャ拡張（新規パラメータ `issueContext?` 追加）\n     - 新規 private メソッド追加（`generateFollowUpTitle`, `extractKeywords`, `formatTaskDetails`）\n   - **影響度**: 中（既存の呼び出し元には影響なし、内部ロジックは大きく変更）\n   - **リスク**: 新規パラメータがオプショナルなため、既存の呼び出し元は無変更で動作\n\n3. **`src/phases/evaluation.ts`** (呼び出し側)\n   - **影響箇所**: `handlePassWithIssues()` メソッド（420-449行付近）\n   - **変更内容**:\n     - Evaluation レポートから情報抽出ロジックの追加\n     - `IssueContext` オブジェクトの構築\n     - `createIssueFromEvaluation()` 呼び出し時に `issueContext` を渡す\n   - **影響度**: 中（Evaluation Phase の内部処理のみ影響、外部インターフェースには影響なし）\n   - **リスク**: Evaluation レポートに必要な情報が含まれていない可能性（→ フォールバック処理で対応）\n\n4. **`tests/unit/github/issue-client.test.ts`** (既存テスト)\n   - **影響箇所**: `createIssueFromEvaluation()` のテストケース（301-397行）\n   - **変更内容**:\n     - 既存テストケースの拡張（新規パラメータ指定時のテスト追加）\n     - 後方互換性テストの追加（新規パラメータ未指定時のテスト）\n   - **影響度**: 低（テストコードの追加のみ）\n\n#### 新規作成が必要なファイル\n\n以下のファイルは **推奨** であり、必須ではありません。既存のテストファイルに統合する形でも問題ありません。\n\n- **`tests/unit/github/issue-title-generator.test.ts`** (新規テストファイル、オプション)\n  - タイトル生成ロジックとキーワード抽出ロジックの専用テストスイート\n  - 境界値テスト、エッジケーステストを体系的に実施\n\n### 5.2 依存関係の変更\n\n**新規依存の追加**: なし\n\n**既存依存の変更**: なし\n\n**型定義の拡張**:\n- `RemainingTask` 型の拡張（`src/types.ts`）\n  - すべてのフィールドをオプショナル（`?:`）として定義することで、後方互換性を維持\n  - Evaluation Phase 以外で `RemainingTask` を使用している箇所がないことを確認（Grep で検索）\n\n### 5.3 マイグレーション要否\n\n**不要**\n\n**理由**:\n- すべての新規フィールドはオプショナル（`?:`）として定義\n- 新規パラメータ（`issueContext`）もオプショナルとして定義\n- 既存のコードは新規フィールドを無視するだけで動作する\n- Evaluation Phase 以外で `RemainingTask` を使用している箇所がない（影響範囲が限定的）\n\n---\n\n## 6. 変更・追加ファイルリスト\n\n### 6.1 新規作成ファイル\n\nなし（すべて既存ファイルへの追加）\n\n### 6.2 修正が必要な既存ファイル\n\n1. `src/types.ts`\n   - `RemainingTask` interface の拡張\n   - `IssueContext` interface の追加\n\n2. `src/core/github/issue-client.ts`\n   - `createIssueFromEvaluation()` メソッドの拡張\n   - `generateFollowUpTitle()` メソッドの追加\n   - `extractKeywords()` メソッドの追加\n   - `formatTaskDetails()` メソッドの追加\n\n3. `src/phases/evaluation.ts`\n   - `handlePassWithIssues()` メソッドの修正\n\n4. `tests/unit/github/issue-client.test.ts`\n   - 既存テストケースの拡張\n   - 新規テストケースの追加\n\n### 6.3 削除が必要なファイル\n\nなし\n\n---\n\n## 7. 詳細設計\n\n### 7.1 型定義の拡張（`src/types.ts`）\n\n#### 7.1.1 `RemainingTask` interface の拡張\n\n```typescript\n/**\n * Evaluation Phase で検出された残タスク\n */\nexport interface RemainingTask {\n  // ===== 既存フィールド（必須） =====\n  /** タスクの説明 */\n  task: string;\n\n  /** 対象フェーズ（例: \"implementation\", \"testing\"） */\n  phase: string;\n\n  /** 優先度（例: \"High\", \"Medium\", \"Low\"） */\n  priority: string;\n\n  // ===== 新規フィールド（すべてオプショナル） =====\n\n  /**\n   * 優先度の理由\n   * 例: \"元 Issue #91 の推奨事項、ブロッカーではない\"\n   */\n  priorityReason?: string;\n\n  /**\n   * 対象ファイル/モジュールのリスト\n   * 例: [\"src/core/phase-factory.ts\", \"src/commands/execute/agent-setup.ts\"]\n   */\n  targetFiles?: string[];\n\n  /**\n   * 実行手順（番号付きリスト）\n   * 例: [\"不足しているテストケースを特定\", \"エッジケースのテストを追加\"]\n   */\n  steps?: string[];\n\n  /**\n   * 受け入れ基準（Acceptance Criteria）\n   * 例: [\"すべての対象モジュールで 90% 以上のカバレッジを達成\", \"npm run test:coverage がすべてパス\"]\n   */\n  acceptanceCriteria?: string[];\n\n  /**\n   * 依存タスク\n   * 例: [\"Task 1 完了後に実行\", \"Phase 4 の修正が必要\"]\n   */\n  dependencies?: string[];\n\n  /**\n   * 見積もり工数\n   * 例: \"2-4h\", \"1日\", \"0.5h\"\n   */\n  estimatedHours?: string;\n}\n```\n\n#### 7.1.2 `IssueContext` interface の追加\n\n```typescript\n/**\n * フォローアップ Issue の背景コンテキスト\n * Evaluation Phase から IssueClient に渡される\n */\nexport interface IssueContext {\n  /**\n   * 元 Issue の概要\n   * 例: \"Issue #91 では、BasePhase モジュール分解（Issue #49）で発生した 15 件のテスト失敗を修正しました。\"\n   */\n  summary: string;\n\n  /**\n   * ブロッカーのステータス\n   * 例: \"すべてのブロッカーは解決済み\"\n   */\n  blockerStatus: string;\n\n  /**\n   * タスクが残った理由\n   * 例: \"テスト失敗修正を優先したため、カバレッジ改善は後回しにした\"\n   */\n  deferredReason: string;\n}\n```\n\n### 7.2 IssueClient の実装（`src/core/github/issue-client.ts`）\n\n#### 7.2.1 `createIssueFromEvaluation()` メソッドの拡張\n\n**既存シグネチャ**:\n```typescript\npublic async createIssueFromEvaluation(\n  issueNumber: number,\n  remainingTasks: RemainingTask[],\n  evaluationReportPath: string,\n): Promise<IssueCreationResult>\n```\n\n**新規シグネチャ**:\n```typescript\npublic async createIssueFromEvaluation(\n  issueNumber: number,\n  remainingTasks: RemainingTask[],\n  evaluationReportPath: string,\n  issueContext?: IssueContext,  // 新規パラメータ（オプショナル）\n): Promise<IssueCreationResult>\n```\n\n**実装方針**:\n1. タイトル生成: `generateFollowUpTitle()` を呼び出し\n2. 本文生成:\n   - 背景セクション: `issueContext` が存在する場合のみ表示\n   - 残タスク詳細セクション: `formatTaskDetails()` を呼び出し、各タスクの詳細情報を表示\n3. GitHub Issue 作成: Octokit API 呼び出し\n\n**実装例**:\n```typescript\n/**\n * Evaluation Phase の結果から、フォローアップ Issue を作成する\n *\n * @param issueNumber - 元 Issue 番号\n * @param remainingTasks - 残タスクのリスト\n * @param evaluationReportPath - Evaluation レポートのパス\n * @param issueContext - Issue コンテキスト（背景情報、オプショナル）\n * @returns Issue 作成結果\n */\npublic async createIssueFromEvaluation(\n  issueNumber: number,\n  remainingTasks: RemainingTask[],\n  evaluationReportPath: string,\n  issueContext?: IssueContext,\n): Promise<IssueCreationResult> {\n  logger.info(`Creating follow-up issue for #${issueNumber} with ${remainingTasks.length} remaining tasks`);\n\n  // タイトル生成\n  const title = this.generateFollowUpTitle(issueNumber, remainingTasks);\n\n  // 本文生成\n  const lines: string[] = [];\n\n  // 背景セクション（issueContext が存在する場合のみ）\n  if (issueContext) {\n    lines.push('## 背景', '');\n    lines.push(issueContext.summary, '');\n\n    if (issueContext.blockerStatus) {\n      lines.push('### 元 Issue のステータス', '');\n      lines.push(issueContext.blockerStatus, '');\n    }\n\n    if (issueContext.deferredReason) {\n      lines.push('### なぜこれらのタスクが残ったか', '');\n      lines.push(issueContext.deferredReason, '');\n    }\n  } else {\n    // フォールバック: issueContext がない場合は従来形式\n    lines.push('## 背景', '');\n    lines.push(`AI Workflow Issue #${issueNumber} の評価フェーズで残タスクが見つかりました。`, '');\n  }\n\n  // 残タスク詳細セクション\n  lines.push('## 残タスク詳細', '');\n\n  for (let i = 0; i < remainingTasks.length; i++) {\n    const task = remainingTasks[i];\n    const taskNumber = i + 1;\n\n    lines.push(...this.formatTaskDetails(task, taskNumber));\n    lines.push(''); // タスク間の空行\n  }\n\n  // 参考セクション\n  lines.push('## 参考', '');\n  lines.push(`- 元Issue: #${issueNumber}`);\n  lines.push(`- Evaluation Report: \\`${evaluationReportPath}\\``);\n  lines.push('', '---', '*自動生成: AI Workflow Phase 9 (Evaluation)*');\n\n  // GitHub Issue 作成\n  try {\n    const { data } = await this.octokit.issues.create({\n      owner: this.owner,\n      repo: this.repo,\n      title,\n      body: lines.join('\\n'),\n      labels: ['enhancement', 'ai-workflow-follow-up'],\n    });\n\n    logger.info(`Follow-up issue created: #${data.number} - ${title}`);\n\n    return {\n      success: true,\n      issueNumber: data.number,\n      issueUrl: data.html_url,\n    };\n  } catch (error) {\n    const errorMessage = getErrorMessage(error);\n    logger.error(`Failed to create follow-up issue: ${errorMessage}`);\n    throw error;\n  }\n}\n```\n\n#### 7.2.2 `generateFollowUpTitle()` メソッド（新規 private メソッド）\n\n**目的**: フォローアップ Issue のタイトルを生成する\n\n**アルゴリズム**:\n1. `remainingTasks` から最大3つのタスクを取得\n2. 各タスクから主要なキーワードを抽出（`extractKeywords()` を呼び出し）\n3. キーワードを中黒（`・`）で結合\n4. フォーマット: `[FOLLOW-UP] #{元Issue番号}: {キーワード1}・{キーワード2}・{キーワード3}`\n5. 80文字を超える場合は77文字で切り詰め + `...`\n6. キーワードが抽出できない場合はフォールバック: `[FOLLOW-UP] Issue #{元Issue番号} - 残タスク`\n\n**実装例**:\n```typescript\n/**\n * フォローアップ Issue のタイトルを生成する\n *\n * @param issueNumber - 元 Issue 番号\n * @param remainingTasks - 残タスクのリスト\n * @returns Issue タイトル（80文字以内）\n */\nprivate generateFollowUpTitle(issueNumber: number, remainingTasks: RemainingTask[]): string {\n  // キーワード抽出（最大3個）\n  const keywords = this.extractKeywords(remainingTasks, 3);\n\n  // キーワードが抽出できた場合\n  if (keywords.length > 0) {\n    const keywordsStr = keywords.join('・');\n    const title = `[FOLLOW-UP] #${issueNumber}: ${keywordsStr}`;\n\n    // 80文字制限\n    if (title.length > 80) {\n      return title.substring(0, 77) + '...';\n    }\n\n    return title;\n  }\n\n  // フォールバック: キーワードが抽出できない場合は従来形式\n  return `[FOLLOW-UP] Issue #${issueNumber} - 残タスク`;\n}\n```\n\n#### 7.2.3 `extractKeywords()` メソッド（新規 private メソッド）\n\n**目的**: タスクテキストから主要なキーワードを抽出する\n\n**アルゴリズム**:\n1. `remainingTasks` から `maxCount` 個のタスクを取得\n2. 各タスクのテキスト（`task.task`）から以下のルールでキーワードを抽出:\n   - 括弧（`（`, `(`）の前まで\n   - または、最初の20文字\n   - 前後の空白を削除\n3. 空文字列は除外\n4. 抽出されたキーワードの配列を返す\n\n**実装例**:\n```typescript\n/**\n * 残タスクから主要なキーワードを抽出する\n *\n * @param tasks - 残タスクのリスト\n * @param maxCount - 抽出する最大キーワード数\n * @returns キーワードの配列\n */\nprivate extractKeywords(tasks: RemainingTask[], maxCount: number): string[] {\n  const keywords: string[] = [];\n\n  for (const task of tasks.slice(0, maxCount)) {\n    const taskText = String(task.task ?? '');\n\n    if (!taskText.trim()) {\n      continue; // 空のタスクはスキップ\n    }\n\n    // 括弧前まで、または最初の20文字を抽出\n    let keyword = taskText.split('（')[0].split('(')[0].trim();\n\n    // 20文字制限\n    if (keyword.length > 20) {\n      keyword = keyword.substring(0, 20);\n    }\n\n    if (keyword) {\n      keywords.push(keyword);\n    }\n  }\n\n  return keywords;\n}\n```\n\n**設計判断**:\n- **シンプルなアルゴリズム**: 複雑な自然言語処理は避け、正規表現ベースのシンプルなロジックを採用\n- **複数言語対応**: 日本語・英語の括弧（`（`, `(`）に対応\n- **フォールバック**: キーワードが抽出できない場合は空配列を返し、`generateFollowUpTitle()` 側でフォールバック処理\n\n#### 7.2.4 `formatTaskDetails()` メソッド（新規 private メソッド）\n\n**目的**: 残タスクの詳細情報をフォーマットする\n\n**アルゴリズム**:\n1. タスク見出し: `### Task {番号}: {task.task}`\n2. 対象ファイル: `task.targetFiles` が存在する場合のみ表示\n3. 必要な作業: `task.steps` が存在する場合のみ表示（番号付きリスト）\n4. Acceptance Criteria: `task.acceptanceCriteria` が存在する場合のみ表示（チェックリスト形式）\n5. Phase: `task.phase`（デフォルト: `'unknown'`）\n6. 優先度: `task.priority`（デフォルト: `'中'`） + `task.priorityReason`（存在する場合）\n7. 見積もり工数: `task.estimatedHours`（デフォルト: `'未定'`）\n8. 依存タスク: `task.dependencies` が存在する場合のみ表示\n\n**実装例**:\n```typescript\n/**\n * 残タスクの詳細情報をフォーマットする\n *\n * @param task - 残タスク\n * @param taskNumber - タスク番号（1始まり）\n * @returns フォーマットされた行の配列\n */\nprivate formatTaskDetails(task: RemainingTask, taskNumber: number): string[] {\n  const lines: string[] = [];\n\n  // タスク見出し\n  lines.push(`### Task ${taskNumber}: ${task.task}`, '');\n\n  // 対象ファイル（存在する場合のみ）\n  if (task.targetFiles && task.targetFiles.length > 0) {\n    lines.push('**対象ファイル**:', '');\n    task.targetFiles.forEach(file => lines.push(`- \\`${file}\\``));\n    lines.push('');\n  }\n\n  // 必要な作業（存在する場合のみ）\n  if (task.steps && task.steps.length > 0) {\n    lines.push('**必要な作業**:', '');\n    task.steps.forEach((step, i) => lines.push(`${i + 1}. ${step}`));\n    lines.push('');\n  }\n\n  // Acceptance Criteria（存在する場合のみ）\n  if (task.acceptanceCriteria && task.acceptanceCriteria.length > 0) {\n    lines.push('**Acceptance Criteria**:', '');\n    task.acceptanceCriteria.forEach(ac => lines.push(`- [ ] ${ac}`));\n    lines.push('');\n  }\n\n  // Phase\n  lines.push(`**Phase**: ${task.phase ?? 'unknown'}`, '');\n\n  // 優先度 + 根拠\n  const priority = task.priority ?? '中';\n  const priorityLine = task.priorityReason\n    ? `**優先度**: ${priority} - ${task.priorityReason}`\n    : `**優先度**: ${priority}`;\n  lines.push(priorityLine, '');\n\n  // 見積もり工数\n  lines.push(`**見積もり**: ${task.estimatedHours ?? '未定'}`, '');\n\n  // 依存タスク（存在する場合のみ）\n  if (task.dependencies && task.dependencies.length > 0) {\n    lines.push('**依存タスク**:', '');\n    task.dependencies.forEach(dep => lines.push(`- ${dep}`));\n    lines.push('');\n  }\n\n  lines.push('---'); // タスク間の区切り線\n\n  return lines;\n}\n```\n\n### 7.3 Evaluation Phase の実装（`src/phases/evaluation.ts`）\n\n#### 7.3.1 `handlePassWithIssues()` メソッドの修正\n\n**既存処理**:\n1. `remainingTasks` を取得\n2. `createIssueFromEvaluation()` を呼び出し\n\n**新規処理**:\n1. `remainingTasks` を取得\n2. **Evaluation レポートから情報抽出**（新規）:\n   - Issue Summary: `issueTitle` から取得、またはメタデータから\n   - Blocker Status: デフォルト値 `\"すべてのブロッカーは解決済み\"`（Evaluation レポートからの抽出は Phase 1 で調査し、不足している場合は別 Issue として提案）\n   - Deferred Reason: デフォルト値 `\"タスク優先度の判断により後回し\"`（同上）\n3. **`IssueContext` オブジェクト構築**（新規）\n4. `createIssueFromEvaluation()` に `issueContext` を渡す\n\n**実装例**:\n```typescript\n/**\n * Evaluation 結果が「Pass with Issues」の場合の処理\n * フォローアップ Issue を作成する\n */\nprivate async handlePassWithIssues(\n  evaluationResult: EvaluationResult,\n  issueNumber: number,\n  evaluationReportPath: string,\n): Promise<void> {\n  const remainingTasks = evaluationResult.remainingTasks ?? [];\n\n  if (remainingTasks.length === 0) {\n    logger.warn('Evaluation result is \"Pass with Issues\", but no remaining tasks found');\n    return;\n  }\n\n  logger.info(`Creating follow-up issue for ${remainingTasks.length} remaining tasks`);\n\n  // ===== 新規: Issue コンテキストの構築 =====\n\n  // Issue Summary: issueTitle から取得（メタデータに存在する場合）\n  const metadata = this.metadataManager.getMetadata();\n  const issueTitle = metadata.issue_title ?? `Issue #${issueNumber}`;\n\n  // Blocker Status: デフォルト値（Evaluation レポートからの抽出は Phase 1 で調査）\n  // TODO: 将来的には Evaluation レポートから抽出する（Phase 9 改善、別 Issue として提案）\n  const blockerStatus = 'すべてのブロッカーは解決済み';\n\n  // Deferred Reason: デフォルト値（同上）\n  // TODO: 将来的には Evaluation レポートから抽出する（Phase 9 改善、別 Issue として提案）\n  const deferredReason = 'タスク優先度の判断により後回し';\n\n  const issueContext: IssueContext = {\n    summary: `この Issue は、Issue #${issueNumber}「${issueTitle}」の Evaluation フェーズで特定された残タスクをまとめたものです。`,\n    blockerStatus,\n    deferredReason,\n  };\n\n  // ===== 既存: フォローアップ Issue 作成 =====\n\n  const result = await this.githubClient.createIssueFromEvaluation(\n    issueNumber,\n    remainingTasks,\n    evaluationReportPath,\n    issueContext, // 新規パラメータ\n  );\n\n  if (result.success) {\n    logger.info(`Follow-up issue created: #${result.issueNumber}`);\n    logger.info(`Follow-up issue URL: ${result.issueUrl}`);\n\n    // メタデータに記録\n    this.metadataManager.updatePhase(this.phaseName, {\n      output_files: [evaluationReportPath],\n      followUpIssue: {\n        number: result.issueNumber,\n        url: result.issueUrl,\n      },\n    });\n  } else {\n    logger.error('Failed to create follow-up issue');\n  }\n}\n```\n\n**設計判断**:\n- **デフォルト値の使用**: Evaluation レポートから情報が抽出できない場合（Phase 1 で調査）は、デフォルト値を使用\n- **フォールバックロジック**: `issueContext` パラメータ自体がオプショナルなため、情報が不足している場合でも Issue 作成は可能\n- **TODO コメント**: 将来的な改善（Phase 9 のプロンプト改善）を明記し、別 Issue として提案する\n\n---\n\n## 8. セキュリティ考慮事項\n\n### 8.1 認証・認可\n\n**現状のセキュリティ対策**:\n- GitHub API アクセスには `GITHUB_TOKEN` 環境変数を使用\n- Octokit クライアントは `src/core/github-client.ts` で一元管理\n- トークンは環境変数経由で注入され、コードにハードコードされない\n\n**本 Issue による影響**:\n- 新規の認証・認可要件なし\n- 既存の GitHub API 統合パターンをそのまま利用\n\n### 8.2 データ保護\n\n**リスク**:\n- **Evaluation レポートの機密情報**: Evaluation レポートには Issue 内容、コード変更、テスト結果等の情報が含まれる可能性がある\n- **フォローアップ Issue への情報流出**: フォローアップ Issue の本文に機密情報が含まれる可能性\n\n**対策**:\n- **パブリックリポジトリでは慎重に使用**: フォローアップ Issue はリポジトリと同じ可視性（public/private）で作成される\n- **機密情報のフィルタリングは実施しない**: 本 Issue の範囲外（将来的な改善として別 Issue で提案）\n- **既存の SecretMasker との統合は不要**: フォローアップ Issue 作成時には Git コミット処理は発生しないため\n\n### 8.3 セキュリティリスクと対策\n\n| リスク | 影響度 | 対策 |\n|--------|--------|------|\n| GitHub API トークンの流出 | 高 | 環境変数経由で注入、コードにハードコードしない（既存対策） |\n| Evaluation レポート内の機密情報が Issue に含まれる | 中 | パブリックリポジトリでは慎重に使用（運用レベルで対応） |\n| タイトル生成時の XSS（クロスサイトスクリプティング） | 低 | GitHub Issue タイトルは自動エスケープされる（GitHub 側で対策済み） |\n\n---\n\n## 9. 非機能要件への対応\n\n### 9.1 パフォーマンス\n\n**要件**（要件定義書 NFR-2 より）:\n- タイトル生成処理時間: 100ms 以内\n- キーワード抽出処理時間: 50ms 以内（タスク1件あたり）\n- Issue 作成全体の処理時間: 既存実装と比較して 10% 以内の増加\n\n**対策**:\n- **シンプルなアルゴリズム**: `extractKeywords()` は正規表現ベースのシンプルなロジックを採用し、複雑な自然言語処理を避ける\n- **最大3タスク制限**: タイトル生成時に処理するタスク数を最大3個に制限（`remainingTasks.slice(0, maxCount)`）\n- **GitHub API 呼び出しは1回のみ**: Issue 作成は `octokit.issues.create()` を1回呼び出すのみ\n\n**測定方法**:\n- ユニットテストで `generateFollowUpTitle()` と `extractKeywords()` の実行時間を計測\n- インテグレーションテストで `createIssueFromEvaluation()` 全体の実行時間を計測\n\n### 9.2 スケーラビリティ\n\n**考慮事項**:\n- **大量の残タスク**: 残タスクが10個以上の場合、Issue 本文が長大になる可能性\n- **GitHub API レート制限**: Issue 作成は GitHub API を使用するため、レート制限に注意\n\n**対策**:\n- **タイトル生成は最大3タスク**: `extractKeywords(tasks, 3)` により、タスク数が多くてもタイトルは適切な長さを維持\n- **本文長の制限は実施しない**: GitHub Issue 本文には実質的な長さ制限がないため、タスク数による制限は不要\n- **レート制限エラーハンドリング**: GitHub API 呼び出し時のエラーハンドリングは既存の `IssueClient` で実装済み（リトライロジック）\n\n### 9.3 保守性\n\n**要件**（要件定義書 NFR-3 より）:\n- タイトル生成ロジックを独立したメソッド（`generateFollowUpTitle()`）に分離\n- キーワード抽出ロジックを独立したメソッド（`extractKeywords()`）に分離\n- Issue 本文生成ロジックを独立したメソッド（`formatTaskDetails()`）に分離\n- 各メソッドに JSDoc コメントを追加\n- `RemainingTask` 型の新規フィールドに JSDoc コメントを追加\n\n**実装方針**:\n- **Single Responsibility Principle（単一責任の原則）**: 各メソッドは1つの責務のみを持つ\n- **DRY原則（Don't Repeat Yourself）**: タスク詳細フォーマット処理を `formatTaskDetails()` に集約\n- **JSDoc コメントの徹底**: すべての public/private メソッドに JSDoc コメントを追加し、パラメータ・戻り値・例外を明記\n\n**メソッド責務分担**:\n```\ncreateIssueFromEvaluation()  … オーケストレーション（全体フロー制御）\n├─ generateFollowUpTitle()   … タイトル生成\n│  └─ extractKeywords()       … キーワード抽出\n└─ formatTaskDetails()        … タスク詳細フォーマット\n```\n\n---\n\n## 10. 実装の順序\n\n### 10.1 推奨実装順序\n\n実装は以下の順序で行うことを推奨します（依存関係を考慮）：\n\n#### Phase 1: 型定義の拡張\n1. `src/types.ts` の `RemainingTask` interface を拡張\n   - 6つの新規フィールド追加（すべてオプショナル）\n   - JSDoc コメント追加\n2. `src/types.ts` に `IssueContext` interface を追加\n   - JSDoc コメント追加\n\n**理由**: 型定義が完成しないと、後続の実装でTypeScriptコンパイルエラーが発生する\n\n#### Phase 2: IssueClient のヘルパーメソッド実装\n3. `src/core/github/issue-client.ts` に `extractKeywords()` メソッドを追加\n   - キーワード抽出ロジック\n   - JSDoc コメント\n4. `src/core/github/issue-client.ts` に `generateFollowUpTitle()` メソッドを追加\n   - タイトル生成ロジック\n   - `extractKeywords()` を呼び出し\n   - JSDoc コメント\n5. `src/core/github/issue-client.ts` に `formatTaskDetails()` メソッドを追加\n   - タスク詳細フォーマットロジック\n   - JSDoc コメント\n\n**理由**: ヘルパーメソッドを先に実装することで、ユニットテストを早期に開始できる\n\n#### Phase 3: IssueClient のメインメソッド拡張\n6. `src/core/github/issue-client.ts` の `createIssueFromEvaluation()` メソッドを拡張\n   - 新規パラメータ `issueContext?` を追加\n   - `generateFollowUpTitle()` を呼び出し\n   - 本文生成ロジックを修正（背景セクション、詳細タスク情報）\n   - `formatTaskDetails()` を呼び出し\n\n**理由**: ヘルパーメソッドが完成した後にメインメソッドを実装することで、スムーズな統合が可能\n\n#### Phase 4: Evaluation Phase の修正\n7. `src/phases/evaluation.ts` の `handlePassWithIssues()` メソッドを修正\n   - `IssueContext` オブジェクト構築\n   - `createIssueFromEvaluation()` 呼び出し時に `issueContext` を渡す\n   - デフォルト値の使用（Blocker Status, Deferred Reason）\n\n**理由**: IssueClient の実装が完了した後に Evaluation Phase を修正することで、統合テストが容易\n\n#### Phase 5: テストコード実装\n8. `tests/unit/github/issue-client.test.ts` に新規テストケースを追加\n   - `extractKeywords()` のユニットテスト\n   - `generateFollowUpTitle()` のユニットテスト\n   - `formatTaskDetails()` のユニットテスト\n   - `createIssueFromEvaluation()` の拡張テスト（新規パラメータ指定時）\n   - 後方互換性テスト（新規パラメータ未指定時）\n9. （オプション）`tests/unit/github/issue-title-generator.test.ts` を作成\n   - 境界値テスト、エッジケーステストを体系的に実施\n\n**理由**: すべての実装が完了した後にテストコードを実装することで、統合的なテストが可能\n\n### 10.2 依存関係の考慮\n\n```\nPhase 1 (型定義)\n   │\n   ├─► Phase 2 (ヘルパーメソッド) ─┐\n   │                               │\n   └─► Phase 3 (メインメソッド) ◄─┘\n          │\n          └─► Phase 4 (Evaluation Phase)\n                 │\n                 └─► Phase 5 (テストコード)\n```\n\n**並列化可能な箇所**:\n- Phase 2（ヘルパーメソッド）の3つのメソッドは並列実装可能（依存関係がない）\n- Phase 5（テストコード）の各テストスイートは並列実装可能\n\n---\n\n## 11. テスト戦略の詳細\n\n### 11.1 ユニットテスト\n\n#### 11.1.1 `extractKeywords()` のテスト\n\n**テストケース**:\n1. **正常系**:\n   - 3つのタスクから3つのキーワードを抽出\n   - 1つのタスクから1つのキーワードを抽出\n   - 括弧前まで抽出（日本語括弧 `（`）\n   - 括弧前まで抽出（英語括弧 `(`）\n2. **境界値**:\n   - 空配列 → 空配列を返す\n   - タスクが10個ある場合、最大3個のみ抽出\n   - タスクテキストが20文字を超える場合、20文字で切り詰め\n3. **異常系**:\n   - タスクテキストが空文字列 → スキップ\n   - タスクテキストが `null` / `undefined` → スキップ\n   - すべてのタスクが空 → 空配列を返す\n\n**実装例**:\n```typescript\ndescribe('extractKeywords', () => {\n  it('should extract keywords from tasks', () => {\n    const tasks: RemainingTask[] = [\n      { task: 'Coverage improvement to 90%', phase: 'test_implementation', priority: 'Medium' },\n      { task: 'Performance benchmark execution', phase: 'testing', priority: 'Medium' },\n      { task: 'Documentation updates', phase: 'documentation', priority: 'Low' },\n    ];\n\n    const keywords = issueClient['extractKeywords'](tasks, 3);\n\n    expect(keywords).toEqual([\n      'Coverage improvement to 90%',\n      'Performance benchmark execution',\n      'Documentation updates',\n    ]);\n  });\n\n  it('should extract keywords before parentheses', () => {\n    const tasks: RemainingTask[] = [\n      { task: 'Jest設定を修正（src/jest.config.js）', phase: 'implementation', priority: 'High' },\n    ];\n\n    const keywords = issueClient['extractKeywords'](tasks, 1);\n\n    expect(keywords).toEqual(['Jest設定を修正']);\n  });\n\n  it('should truncate keywords to 20 characters', () => {\n    const tasks: RemainingTask[] = [\n      { task: 'This is a very long task description that exceeds 20 characters', phase: 'implementation', priority: 'High' },\n    ];\n\n    const keywords = issueClient['extractKeywords'](tasks, 1);\n\n    expect(keywords[0]).toHaveLength(20);\n  });\n\n  it('should return empty array for empty tasks', () => {\n    const tasks: RemainingTask[] = [];\n\n    const keywords = issueClient['extractKeywords'](tasks, 3);\n\n    expect(keywords).toEqual([]);\n  });\n});\n```\n\n#### 11.1.2 `generateFollowUpTitle()` のテスト\n\n**テストケース**:\n1. **正常系**:\n   - 3つのキーワードから正しいタイトルを生成\n   - 1つのキーワードから正しいタイトルを生成\n2. **境界値**:\n   - タイトルが80文字以内の場合、そのまま返す\n   - タイトルが80文字を超える場合、77文字で切り詰め + `...`\n3. **異常系**:\n   - キーワードが抽出できない場合、フォールバック形式を返す\n\n**実装例**:\n```typescript\ndescribe('generateFollowUpTitle', () => {\n  it('should generate title with keywords', () => {\n    const tasks: RemainingTask[] = [\n      { task: 'テストカバレッジ改善', phase: 'test_implementation', priority: 'Medium' },\n      { task: 'パフォーマンスベンチマーク', phase: 'testing', priority: 'Medium' },\n    ];\n\n    const title = issueClient['generateFollowUpTitle'](91, tasks);\n\n    expect(title).toBe('[FOLLOW-UP] #91: テストカバレッジ改善・パフォーマンスベンチマーク');\n  });\n\n  it('should truncate title to 80 characters', () => {\n    const tasks: RemainingTask[] = [\n      { task: 'Very long task description 1', phase: 'implementation', priority: 'High' },\n      { task: 'Very long task description 2', phase: 'implementation', priority: 'High' },\n      { task: 'Very long task description 3', phase: 'implementation', priority: 'High' },\n    ];\n\n    const title = issueClient['generateFollowUpTitle'](123, tasks);\n\n    expect(title).toHaveLength(80);\n    expect(title).toEndWith('...');\n  });\n\n  it('should use fallback format when no keywords', () => {\n    const tasks: RemainingTask[] = [\n      { task: '', phase: 'implementation', priority: 'High' },\n    ];\n\n    const title = issueClient['generateFollowUpTitle'](52, tasks);\n\n    expect(title).toBe('[FOLLOW-UP] Issue #52 - 残タスク');\n  });\n});\n```\n\n#### 11.1.3 `formatTaskDetails()` のテスト\n\n**テストケース**:\n1. **正常系**:\n   - すべてのオプショナルフィールドが存在する場合、すべて表示\n   - すべてのオプショナルフィールドが存在しない場合、最小限の情報のみ表示\n2. **境界値**:\n   - `targetFiles` が空配列の場合、セクション非表示\n   - `steps` が1個の場合、番号付きリストで表示\n   - `acceptanceCriteria` が複数の場合、すべてチェックリスト形式で表示\n\n**実装例**:\n```typescript\ndescribe('formatTaskDetails', () => {\n  it('should format task with all fields', () => {\n    const task: RemainingTask = {\n      task: 'カバレッジを 90% に改善',\n      phase: 'test_implementation',\n      priority: 'Medium',\n      priorityReason: '元 Issue #91 の推奨事項',\n      targetFiles: ['src/core/phase-factory.ts', 'src/commands/execute/agent-setup.ts'],\n      steps: ['不足しているテストケースを特定', 'エッジケースのテストを追加'],\n      acceptanceCriteria: ['90% 以上のカバレッジを達成', 'npm run test:coverage がパス'],\n      estimatedHours: '2-4h',\n    };\n\n    const lines = issueClient['formatTaskDetails'](task, 1);\n\n    expect(lines).toContain('### Task 1: カバレッジを 90% に改善');\n    expect(lines).toContain('**対象ファイル**:');\n    expect(lines).toContain('**必要な作業**:');\n    expect(lines).toContain('**Acceptance Criteria**:');\n    expect(lines).toContain('**優先度**: Medium - 元 Issue #91 の推奨事項');\n    expect(lines).toContain('**見積もり**: 2-4h');\n  });\n\n  it('should format task with minimal fields', () => {\n    const task: RemainingTask = {\n      task: 'ドキュメント更新',\n      phase: 'documentation',\n      priority: 'Low',\n    };\n\n    const lines = issueClient['formatTaskDetails'](task, 2);\n\n    expect(lines).toContain('### Task 2: ドキュメント更新');\n    expect(lines).toContain('**Phase**: documentation');\n    expect(lines).toContain('**優先度**: Low');\n    expect(lines).toContain('**見積もり**: 未定');\n    expect(lines).not.toContain('**対象ファイル**:');\n    expect(lines).not.toContain('**必要な作業**:');\n  });\n});\n```\n\n### 11.2 インテグレーションテスト\n\n#### 11.2.1 `createIssueFromEvaluation()` の統合テスト\n\n**テストケース**:\n1. **正常系**:\n   - `issueContext` 指定時、背景セクションが含まれる\n   - `issueContext` 未指定時、フォールバック形式の背景が含まれる\n   - タイトルがタスク内容を反映している\n2. **後方互換性**:\n   - 新規パラメータ未指定時、従来と同じ Issue が作成される\n   - 既存の呼び出し元が壊れない\n\n**実装例**:\n```typescript\ndescribe('createIssueFromEvaluation - integration', () => {\n  it('should create issue with issueContext', async () => {\n    const remainingTasks: RemainingTask[] = [\n      { task: 'テストカバレッジ改善', phase: 'test_implementation', priority: 'Medium' },\n    ];\n\n    const issueContext: IssueContext = {\n      summary: 'Issue #91 の評価フェーズで残タスクが見つかりました',\n      blockerStatus: 'すべてのブロッカーは解決済み',\n      deferredReason: 'テスト失敗修正を優先したため',\n    };\n\n    const result = await issueClient.createIssueFromEvaluation(\n      91,\n      remainingTasks,\n      '.ai-workflow/issue-91/09_evaluation/output/evaluation_report.md',\n      issueContext,\n    );\n\n    expect(result.success).toBe(true);\n    expect(mockOctokit.issues.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        title: expect.stringContaining('[FOLLOW-UP] #91:'),\n        body: expect.stringContaining('## 背景'),\n      }),\n    );\n  });\n\n  it('should create issue without issueContext (backward compatibility)', async () => {\n    const remainingTasks: RemainingTask[] = [\n      { task: 'ドキュメント更新', phase: 'documentation', priority: 'Low' },\n    ];\n\n    const result = await issueClient.createIssueFromEvaluation(\n      52,\n      remainingTasks,\n      '.ai-workflow/issue-52/09_evaluation/output/evaluation_report.md',\n      // issueContext 未指定\n    );\n\n    expect(result.success).toBe(true);\n    expect(mockOctokit.issues.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        title: expect.stringContaining('[FOLLOW-UP]'),\n        body: expect.stringContaining('AI Workflow Issue #52 の評価フェーズで残タスクが見つかりました'),\n      }),\n    );\n  });\n});\n```\n\n### 11.3 カバレッジ目標\n\n**目標**: 90% 以上\n\n**重要なメソッドのカバレッジ目標**: 100%\n- `generateFollowUpTitle()`\n- `extractKeywords()`\n- `formatTaskDetails()`\n- `createIssueFromEvaluation()`\n\n---\n\n## 12. 設計の検証と品質ゲート確認\n\n### 12.1 品質ゲート（Phase 2）の確認\n\n- [x] **実装戦略の判断根拠が明記されている**\n  - セクション 2「実装戦略判断」で EXTEND を選択し、4つの具体的な判断根拠を記載\n\n- [x] **テスト戦略の判断根拠が明記されている**\n  - セクション 3「テスト戦略判断」で UNIT_INTEGRATION を選択し、ユニットテストとインテグレーションテストが必要な理由、BDD が不要な理由を記載\n\n- [x] **テストコード戦略の判断根拠が明記されている**\n  - セクション 4「テストコード戦略判断」で BOTH_TEST を選択し、既存テストの拡張と新規テストの作成が必要な理由を記載\n\n- [x] **既存コードへの影響範囲が分析されている**\n  - セクション 5「影響範囲分析」で、変更が必要なファイル4つ、影響度、リスクを詳細に記載\n\n- [x] **変更が必要なファイルがリストアップされている**\n  - セクション 6「変更・追加ファイルリスト」で、修正が必要な既存ファイル4つをリストアップ\n\n- [x] **設計が実装可能である**\n  - セクション 7「詳細設計」で、クラス設計、関数設計、実装例を具体的に記載\n  - セクション 10「実装の順序」で、実装手順と依存関係を明示\n\n### 12.2 要件定義書との整合性\n\n| 要件ID | 要件 | 設計での対応 | セクション |\n|--------|------|------------|-----------|\n| FR-1 | タイトル生成の改善 | `generateFollowUpTitle()`, `extractKeywords()` メソッドを設計 | 7.2.2, 7.2.3 |\n| FR-2 | Issue 本文の背景セクション追加 | `IssueContext` 型と `createIssueFromEvaluation()` の拡張を設計 | 7.1.2, 7.2.1 |\n| FR-3 | タスク詳細情報の拡充 | `RemainingTask` 型の拡張と `formatTaskDetails()` メソッドを設計 | 7.1.1, 7.2.4 |\n| FR-4 | Evaluation Phase 側の情報抽出強化 | `handlePassWithIssues()` メソッドの修正を設計 | 7.3.1 |\n| FR-5 | Issue 本文テンプレートの改善 | `createIssueFromEvaluation()` の本文生成ロジックを設計 | 7.2.1 |\n| NFR-1 | 後方互換性 | 新規パラメータをすべてオプショナルとして設計 | 7.1.1, 7.2.1 |\n| NFR-2 | パフォーマンス | シンプルなアルゴリズムと最大3タスク制限を設計 | 9.1 |\n| NFR-3 | 保守性・拡張性 | ヘルパーメソッドへの分離と JSDoc コメントを設計 | 9.3 |\n| NFR-4 | テスト容易性 | ユニットテストとインテグレーションテストの詳細を設計 | 11 |\n\n### 12.3 Planning Document との整合性\n\n| Planning Document の項目 | 設計での対応 | セクション |\n|-------------------------|------------|-----------|\n| 実装戦略: EXTEND | ✅ 一致（既存コードの拡張） | 2 |\n| テスト戦略: UNIT_INTEGRATION | ✅ 一致（ユニットテスト + インテグレーションテスト） | 3 |\n| テストコード戦略: BOTH_TEST | ✅ 一致（既存テスト拡張 + 新規テスト作成） | 4 |\n| 主なリスク: 後方互換性の破壊 | ✅ オプショナルフィールドで対応 | 7.1.1 |\n| 主なリスク: Evaluation レポート情報不足 | ✅ デフォルト値とフォールバック処理で対応 | 7.3.1 |\n| 主なリスク: タイトル生成の不正確 | ✅ シンプルなアルゴリズムとフォールバックで対応 | 7.2.2, 7.2.3 |\n\n---\n\n## 13. まとめ\n\n### 13.1 設計の概要\n\n本設計書では、Issue #104「Evaluation Phase のフォローアップ Issue を改善」に対する詳細設計を行いました。主な設計内容は以下の通りです：\n\n1. **型定義の拡張**: `RemainingTask` interface に6つの新規フィールド（すべてオプショナル）を追加し、`IssueContext` interface を新規定義\n2. **IssueClient の拡張**: `createIssueFromEvaluation()` メソッドを拡張し、3つの新規 private メソッド（`generateFollowUpTitle`, `extractKeywords`, `formatTaskDetails`）を追加\n3. **Evaluation Phase の修正**: `handlePassWithIssues()` メソッドを修正し、`IssueContext` オブジェクトを構築して `createIssueFromEvaluation()` に渡す\n4. **テスト戦略**: ユニットテスト（ヘルパーメソッド）とインテグレーションテスト（全体フロー）を実施し、カバレッジ 90% 以上を目標\n\n### 13.2 設計の特徴\n\n- **後方互換性の維持**: すべての新規パラメータとフィールドをオプショナルとして定義し、既存の呼び出し元は無変更で動作\n- **シンプルなアルゴリズム**: タイトル生成とキーワード抽出は正規表現ベースのシンプルなロジックを採用し、複雑な自然言語処理を避ける\n- **フォールバック処理**: 情報が不足している場合でも適切なデフォルト値を使用し、Issue 作成を継続\n- **保守性の高い設計**: ヘルパーメソッドへの分離、JSDoc コメントの徹底、単一責任の原則の遵守\n\n### 13.3 次のフェーズへの引き継ぎ事項\n\n**Phase 3（Test Scenario）で確認すべき事項**:\n- ユニットテストのテストケース設計（境界値、異常系）\n- インテグレーションテストのシナリオ設計（Evaluation Phase との統合）\n- 後方互換性テストのシナリオ設計\n\n**Phase 4（Implementation）で注意すべき事項**:\n- `extractKeywords()` のキーワード抽出アルゴリズムの実装（括弧前まで、20文字制限）\n- `formatTaskDetails()` のオプショナルフィールド存在チェック（条件分岐）\n- `handlePassWithIssues()` のデフォルト値設定（Blocker Status, Deferred Reason）\n\n---\n\n**設計書作成日**: 2025-01-30\n**想定実装期間**: Phase 4（Implementation）完了時まで（見積もり: 10~14時間）\n**リスクレベル**: 中（主なリスク: Evaluation レポート情報不足、型拡張の影響範囲）\n"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":68967,"cache_read_input_tokens":12593,"cache_creation":{"ephemeral_5m_input_tokens":68967,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"17909280-5bff-4931-a474-39d2b71a8bde","uuid":"e9cb8283-14d1-4253-a9de-3c4ae4fccce1"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01PMm9dDhYzWFgQ4EgkjNfzU","type":"tool_result","content":"File created successfully at: /tmp/jenkins-a61a4102/workspace/AI_Workflow/ai_workflow_orchestrator_develop/.ai-workflow/issue-104/02_design/output/design.md"}]},"parent_tool_use_id":null,"session_id":"17909280-5bff-4931-a474-39d2b71a8bde","uuid":"50dc86a8-af07-49c7-a532-7647a27be2fc"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01FSt9XDd73C552rpPPZd7Wf","type":"message","role":"assistant","content":[{"type":"text","text":"設計書を作成しました。以下のポイントに注力しています：\n\n## 主要な設計内容\n\n### 1. **実装戦略判断（EXTEND）**\n- 既存の `IssueClient.createIssueFromEvaluation()` メソッドを拡張\n- 新規ファイル作成は不要\n- 後方互換性を完全に維持（すべてオプショナルフィールド）\n\n### 2. **テスト戦略判断（UNIT_INTEGRATION）**\n- **ユニットテスト**: タイトル生成、キーワード抽出の境界値テスト\n- **インテグレーションテスト**: Evaluation Phase との統合、GitHub API モック\n- **BDD不要**: 内部処理改善のため\n\n### 3. **詳細なアーキテクチャ設計**\n- システム全体図、データフロー図、コンポーネント関係図を提供\n- 3つの新規 private メソッド設計:\n  - `generateFollowUpTitle()`: タイトル生成（80文字制限）\n  - `extractKeywords()`: キーワード抽出（括弧前まで、20文字制限）\n  - `formatTaskDetails()`: タスク詳細フォーマット\n\n### 4. **型定義の拡張**\n- `RemainingTask` interface: 6つの新規オプショナルフィールド\n- `IssueContext` interface: 背景情報（新規）\n\n### 5. **実装順序の明示**\n- Phase 1（型定義）→ Phase 2（ヘルパーメソッド）→ Phase 3（メインメソッド）→ Phase 4（Evaluation Phase）→ Phase 5（テスト）\n- 依存関係を考慮した実装手順\n\n### 6. **品質ゲート確認**\n- ✅ 実装戦略の判断根拠が明記されている\n- ✅ テスト戦略の判断根拠が明記されている\n- ✅ テストコード戦略の判断根拠が明記されている\n- ✅ 既存コードへの影響範囲が分析されている\n- ✅ 変更が必要なファイルがリストアップされている\n- ✅ 設計が実装可能である\n\n設計書は `.ai-workflow/issue-104/02_design/output/design.md` として保存されました。"}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":19037,"cache_read_input_tokens":81560,"cache_creation":{"ephemeral_5m_input_tokens":19037,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"17909280-5bff-4931-a474-39d2b71a8bde","uuid":"6701eecf-b570-4b2e-9055-b003e7d9d174"}
{"type":"result","subtype":"success","is_error":false,"duration_ms":296357,"duration_api_ms":298021,"num_turns":9,"result":"設計書を作成しました。以下のポイントに注力しています：\n\n## 主要な設計内容\n\n### 1. **実装戦略判断（EXTEND）**\n- 既存の `IssueClient.createIssueFromEvaluation()` メソッドを拡張\n- 新規ファイル作成は不要\n- 後方互換性を完全に維持（すべてオプショナルフィールド）\n\n### 2. **テスト戦略判断（UNIT_INTEGRATION）**\n- **ユニットテスト**: タイトル生成、キーワード抽出の境界値テスト\n- **インテグレーションテスト**: Evaluation Phase との統合、GitHub API モック\n- **BDD不要**: 内部処理改善のため\n\n### 3. **詳細なアーキテクチャ設計**\n- システム全体図、データフロー図、コンポーネント関係図を提供\n- 3つの新規 private メソッド設計:\n  - `generateFollowUpTitle()`: タイトル生成（80文字制限）\n  - `extractKeywords()`: キーワード抽出（括弧前まで、20文字制限）\n  - `formatTaskDetails()`: タスク詳細フォーマット\n\n### 4. **型定義の拡張**\n- `RemainingTask` interface: 6つの新規オプショナルフィールド\n- `IssueContext` interface: 背景情報（新規）\n\n### 5. **実装順序の明示**\n- Phase 1（型定義）→ Phase 2（ヘルパーメソッド）→ Phase 3（メインメソッド）→ Phase 4（Evaluation Phase）→ Phase 5（テスト）\n- 依存関係を考慮した実装手順\n\n### 6. **品質ゲート確認**\n- ✅ 実装戦略の判断根拠が明記されている\n- ✅ テスト戦略の判断根拠が明記されている\n- ✅ テストコード戦略の判断根拠が明記されている\n- ✅ 既存コードへの影響範囲が分析されている\n- ✅ 変更が必要なファイルがリストアップされている\n- ✅ 設計が実装可能である\n\n設計書は `.ai-workflow/issue-104/02_design/output/design.md` として保存されました。","session_id":"17909280-5bff-4931-a474-39d2b71a8bde","total_cost_usd":0.6572589000000001,"usage":{"input_tokens":7,"cache_creation_input_tokens":88004,"cache_read_input_tokens":94153,"output_tokens":19834,"server_tool_use":{"web_search_requests":0},"service_tier":"standard","cache_creation":{"ephemeral_1h_input_tokens":0,"ephemeral_5m_input_tokens":88004}},"modelUsage":{"claude-haiku-4-5-20251001":{"inputTokens":632,"outputTokens":167,"cacheReadInputTokens":0,"cacheCreationInputTokens":0,"webSearchRequests":0,"costUSD":0.001467,"contextWindow":200000},"claude-sonnet-4-5-20250929":{"inputTokens":7,"outputTokens":19834,"cacheReadInputTokens":94153,"cacheCreationInputTokens":88004,"webSearchRequests":0,"costUSD":0.6557919000000001,"contextWindow":200000}},"permission_denials":[],"uuid":"f7bd7cf6-b7d5-447c-bda5-303ed4d0bf1b"}