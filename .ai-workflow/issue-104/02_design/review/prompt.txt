# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-104/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-104/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #104
- **タイトル**: Evaluation Phase のフォローアップ Issue を改善: タイトルと本文を明確で実行可能にする
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/104
- **ラベル**: なし

### 本文

## 問題

現在、AI Workflow の Evaluation フェーズ（Phase 9）で自動生成されるフォローアップ Issue は、タイトルと本文の両方に問題があります。

### 1. タイトルが内容を反映していない

**現状の例**:
- `[FOLLOW-UP] Issue #91 - 残タスク`
- `[FOLLOW-UP] Issue #52 - 残タスク`
- `[FOLLOW-UP] Issue #74 - 残タスク`

**問題点**:
- **すべて同じフォーマット**: どの Issue も「残タスク」としか書かれていない
- **内容が推測できない**: Issue リストを見ても、何のタスクなのか分からない
- **検索性が低い**: タイトルで検索できない（すべて「残タスク」で引っかかる）

**改善例**:
- `[FOLLOW-UP] #91: テストカバレッジ改善とパフォーマンスベンチマーク`
- `[FOLLOW-UP] #52: Jest 設定修正とテスト期待値更新`
- `[FOLLOW-UP] #74: ESLint ルール追加と SecretMasker 統合の検討`

### 2. タスク内容が理解しにくい

**現状の例**:
```markdown
## 残タスク一覧

- [ ] Coverage improvement to 90% for key modules (Phase: test_implementation, 優先度: Medium)
- [ ] Performance benchmark execution and verification (Phase: testing, 優先度: Medium)
```

**問題点**:
- **何をすべきか不明確**: "Coverage improvement to 90%" だけでは、どのファイルをどう修正するのか分からない
- **優先度の根拠がない**: なぜ Medium なのか？　何から始めればいいのか？
- **成功条件が不明**: どうなれば完了とみなせるのか？

### 3. コンテキスト情報が不足

**現状**:
```markdown
## 参考

- 元Issue: #91
- Evaluation Report: `AI_Workflow/ai_workflow_orchestrator_develop/.ai-workflow/issue-91/09_evaluation/output/evaluation_report.md`
```

**問題点**:
- Evaluation Report のパスが示されているが、GitHub Issue コメントからは直接アクセスできない
- 元 Issue の Summary や、なぜこれらのタスクが残ったのかの説明がない
- タスク間の依存関係が不明（例: タスク1完了後にタスク2を実行、など）

### 4. 実行に必要な情報が欠けている

**欠けている情報**:
- **対象ファイル**: どのファイルを修正すべきか
- **具体的な手順**: 何をどう変更すべきか（例: Jest設定の具体的な修正箇所）
- **テスト手順**: 修正後にどうやって確認するか
- **Acceptance Criteria**: どうなれば完了とみなせるか

## 期待される改善

### 1. タイトルの改善

タスク内容を反映した、検索可能で分かりやすいタイトルにする：

**フォーマット案**:
```
[FOLLOW-UP] #{元Issue番号}: {タスクの概要（1-3個のキーワード）}
```

**実装方法**:
- 残タスクリストから主要なキーワードを抽出（最大3個）
- または、元 Issue のタイトルを要約したものを使用
- 長すぎる場合は 80 文字で切り詰め

**例**:
- `[FOLLOW-UP] #91: テストカバレッジ改善・パフォーマンスベンチマーク・ドキュメント更新`
- `[FOLLOW-UP] #52: Jest 設定修正・テスト期待値更新`
- `[FOLLOW-UP] #46: execute.ts リファクタリング・テスト失敗対応`

### 2. タスク記述の改善

各タスクに以下の情報を含める：

```markdown
### Task 1: カバレッジを 90% に改善

**対象モジュール**:
- `src/core/phase-factory.ts` (現在: 75%)
- `src/commands/execute/agent-setup.ts` (現在: 80%)

**必要な作業**:
1. 不足しているテストケースを特定（カバレッジレポート参照）
2. 以下のエッジケースのテストを追加:
   - エラーハンドリング分岐
   - 無効な入力値の処理
   - タイムアウト処理

**Acceptance Criteria**:
- [ ] すべての対象モジュールで 90% 以上のカバレッジを達成
- [ ] `npm run test:coverage` がすべてパス
- [ ] 既存テストがすべてパス（リグレッションなし）

**優先度**: Medium（元 Issue #91 の推奨事項、ブロッカーではない）

**参考**:
- Evaluation Report（該当箇所）: 行 XX-YY
- Coverage Report: `tests/coverage/lcov-report/index.html`
```

### 3. コンテキスト情報の充実

```markdown
## 背景

この Issue は、Issue #91「[FOLLOW-UP] Issue #49 - 残タスク」の Evaluation フェーズで特定された残タスクをまとめたものです。

**元 Issue の要約**:
Issue #91 では、BasePhase モジュール分解（Issue #49）で発生した 15 件のテスト失敗を修正しました。すべてのブロッカーは解決済みですが、以下の推奨改善項目が残っています。

**なぜこれらのタスクが残ったか**:
- テスト失敗修正を優先したため、カバレッジ改善は後回しにした（Planning Document 411-416 行）
- パフォーマンスベンチマークは「強く推奨」だがマージのブロッカーではないと判断（Phase 6 テスト結果 386-388 行）
```

### 4. タスク間の依存関係を明示

```markdown
## タスク実行順序

1. **Task 1** (ブロッカーなし): カバレッジ改善
2. **Task 2** (Task 1 完了後): パフォーマンスベンチマーク実行
3. **Task 3** (Task 2 完了後): パフォーマンス特性のドキュメント化
```

## 実装の提案

### 修正対象ファイル
- `src/core/github/issue-client.ts` の `createIssueFromEvaluation()` メソッド（178-232 行）

### 必要な変更

#### 1. タイトル生成ロジックの追加

```typescript
private generateFollowUpTitle(issueNumber: number, remainingTasks: RemainingTask[]): string {
  // タスクから主要なキーワードを抽出
  const keywords = this.extractKeywords(remainingTasks, 3);
  
  const title = keywords.length > 0
    ? `[FOLLOW-UP] #${issueNumber}: ${keywords.join('・')}`
    : `[FOLLOW-UP] Issue #${issueNumber} - 残タスク`; // フォールバック
  
  // 80文字制限
  return title.length > 80 ? title.substring(0, 77) + '...' : title;
}

private extractKeywords(tasks: RemainingTask[], maxCount: number): string[] {
  // タスクテキストから重要なキーワードを抽出
  // 例: "Coverage improvement to 90%" -> "カバレッジ改善"
  //     "Jest設定を修正して..." -> "Jest設定修正"
  const keywords: string[] = [];
  
  for (const task of tasks.slice(0, maxCount)) {
    const taskText = String(task.task ?? '');
    // 簡略化ロジック（括弧前まで、または最初の20文字）
    const keyword = taskText.split('（')[0].split('(')[0].trim().substring(0, 20);
    if (keyword) keywords.push(keyword);
  }
  
  return keywords;
}
```

#### 2. Evaluation Report からの情報抽出を強化

```typescript
public async createIssueFromEvaluation(
  issueNumber: number,
  remainingTasks: RemainingTask[],
  evaluationReportPath: string,
  // 新規パラメータ
  issueContext?: {
    summary: string;
    blockerStatus: string;
    deferredReason: string;
  },
): Promise<IssueCreationResult> {
  const title = this.generateFollowUpTitle(issueNumber, remainingTasks);
  const lines: string[] = [];
  
  lines.push('## 背景', '');
  lines.push(issueContext?.summary ?? `AI Workflow Issue #${issueNumber} の評価フェーズで残タスクが見つかりました。`, '');
  
  if (issueContext?.blockerStatus) {
    lines.push('### 元 Issue のステータス', '');
    lines.push(issueContext.blockerStatus, '');
  }
  
  if (issueContext?.deferredReason) {
    lines.push('### なぜこれらのタスクが残ったか', '');
    lines.push(issueContext.deferredReason, '');
  }
  
  lines.push('## 残タスク詳細', '');
  
  for (const task of remainingTasks) {
    lines.push(`### ${task.task}`, '');
    
    if (task.targetFiles) {
      lines.push('**対象ファイル**:', '');
      task.targetFiles.forEach(file => lines.push(`- \`${file}\``));
      lines.push('');
    }
    
    if (task.steps) {
      lines.push('**必要な作業**:', '');
      task.steps.forEach((step, i) => lines.push(`${i + 1}. ${step}`));
      lines.push('');
    }
    
    if (task.acceptanceCriteria) {
      lines.push('**Acceptance Criteria**:', '');
      task.acceptanceCriteria.forEach(ac => lines.push(`- [ ] ${ac}`));
      lines.push('');
    }
    
    lines.push(`**Phase**: ${task.phase ?? 'unknown'}`, '');
    lines.push(`**優先度**: ${task.priority ?? '中'}${task.priorityReason ? ` - ${task.priorityReason}` : ''}`, '');
    lines.push('');
  }
  
  lines.push('## 参考', '');
  lines.push(`- 元Issue: #${issueNumber}`);
  lines.push(`- Evaluation Report: \`${evaluationReportPath}\``);
  lines.push('', '---', '*自動生成: AI Workflow Phase 9 (Evaluation)*');
  
  const { data } = await this.octokit.issues.create({
    owner: this.owner,
    repo: this.repo,
    title, // 改善されたタイトル
    body: lines.join('\n'),
    labels: ['enhancement', 'ai-workflow-follow-up'],
  });
  
  // ...
}
```

#### 3. RemainingTask 型の拡張（必要に応じて）

```typescript
// src/types.ts
export interface RemainingTask {
  task: string;
  phase?: string;
  priority?: string;
  priorityReason?: string;        // 新規: 優先度の理由
  targetFiles?: string[];         // 新規: 対象ファイル
  steps?: string[];               // 新規: 実行手順
  acceptanceCriteria?: string[];  // 新規: AC
  dependencies?: string[];        // 新規: 依存タスク
}
```

## Acceptance Criteria

- [ ] フォローアップ Issue のタイトルがタスク内容を反映している（主要なキーワードを含む）
- [ ] タイトルは 80 文字以内に収まる
- [ ] タイトルから Issue の内容が推測できる
- [ ] フォローアップ Issue に「背景」セクションが追加される（元 Issue の要約、なぜタスクが残ったか）
- [ ] 各タスクに以下の情報が含まれる（該当する場合）:
  - [ ] 対象ファイル/モジュール
  - [ ] 必要な作業の具体的な手順
  - [ ] Acceptance Criteria
  - [ ] 優先度の根拠
- [ ] タスク間の依存関係が明示される（該当する場合）
- [ ] Evaluation Report へのアクセス方法が改善される（リンクまたは本文への埋め込み）
- [ ] 既存のフォローアップ Issue 作成機能が壊れない（後方互換性）

## 補足情報

### 関連 Issue
- Issue #94: `[FOLLOW-UP] Issue #91 - 残タスク`（タイトルが不明瞭）
- Issue #96: `[FOLLOW-UP] Issue #90 - 残タスク`（タイトルが不明瞭）
- Issue #98: `[FOLLOW-UP] Issue #74 - 残タスク`（タイトルが不明瞭）
- Issue #102: `[FOLLOW-UP] Issue #52 - 残タスク`（タイトルが不明瞭）

### 参考資料
- `src/core/github/issue-client.ts:178-232` - 現在の実装
- `src/types.ts` - `RemainingTask` 型定義（拡張が必要になる可能性あり）

---
*AI Workflow の改善提案*

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-104/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 2:" または "## Phase 2:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 設計内容との照合

設計書（design.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載の設計項目が記述されているか
- Task記載の戦略判断が明記されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 2-2: テスト戦略の決定
  - 不足: テスト戦略の判断根拠が記載されていません
- [ ] Task 2-3: 影響範囲分析
  - 不足: 既存コードへの影響範囲が分析されていません

これらのタスクを完了してから再提出してください。
```

### ⚠️ 重要: Planning.mdの内容はレビュー結果に含めない

Planning.mdの読み込みと照合作業は必要ですが、**planning.mdの全文やPlanning Phaseのレビュー内容をレビュー結果に含めないでください**。

レビュー結果には以下のみを含めること:
- 設計書（design.md）に対する評価
- Planning.mdとの照合で発見した未完了タスク（FAIL時のみ）
- 設計書固有の改善提案

Planning Phaseのレビュー詳細やplanning.mdの内容全体は出力しないこと。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ⚠️ 最重要: 品質ゲートは絶対条件

**品質ゲート（5項目）は必須要件です。1つでも満たされていない場合、判定は自動的にFAILになります。**

- 品質ゲートは「最低限クリアすべき基準」であり、交渉の余地はありません
- 「80点で十分」の原則は、品質ゲートを満たした上での改善提案に適用されます
- 品質ゲートを満たさない状態で次フェーズに進むことは許されません

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

### 判定ルール

#### PASS（合格）

以下の**すべて**を満たす場合のみPASS：
- ✅ **5つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーが存在しない
- ✅ 軽微な改善提案のみ（または改善提案なし）

#### PASS_WITH_SUGGESTIONS（条件付き合格）

以下の**すべて**を満たす場合のみPASS_WITH_SUGGESTIONS：
- ✅ **5つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーは存在しない
- ✅ 次フェーズに進めるが、検討すべき改善点がある

#### FAIL（不合格）

以下の**いずれか1つでも**該当すればFAIL：
- ❌ **品質ゲート（5項目）のうち1つでも満たされていない**
- ❌ ブロッカーが1つ以上存在する

**重要: 品質ゲートは絶対条件であり、1つでも満たされていなければ自動的にFAILです。**

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

**⚠️ 重要: 各項目に対して明示的にPASS/FAILを判定してください。1つでもFAILがあれば最終判定は自動的にFAILです。**

- [x/  ] **実装戦略の判断根拠が明記されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **テスト戦略の判断根拠が明記されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **既存コードへの影響範囲が分析されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **変更が必要なファイルがリストアップされている**: **PASS / FAIL** - （判定理由）
- [x/  ] **設計が実装可能である**: **PASS / FAIL** - （判定理由）

**品質ゲート総合判定: PASS / FAIL**
- PASS: 上記5項目すべてがPASS
- FAIL: 上記5項目のうち1つでもFAIL

**品質ゲート判定がFAILの場合、最終判定は自動的にFAILになります。**

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

**重要**: 最終行に必ず上記フォーマットで判定を明記してください。
