{"type":"system","subtype":"init","cwd":"/tmp/jenkins-d3e0067f/workspace/AI_Workflow/ai_workflow_orchestrator_develop","session_id":"d7028e33-dcb2-4eb0-b0e1-b956c18e451f","tools":["Task","Bash","Glob","Grep","ExitPlanMode","Read","Edit","Write","NotebookEdit","WebFetch","TodoWrite","WebSearch","BashOutput","KillShell","Skill","SlashCommand"],"mcp_servers":[],"model":"claude-sonnet-4-5-20250929","permissionMode":"bypassPermissions","slash_commands":["compact","context","cost","init","output-style:new","pr-comments","release-notes","todos","review","security-review"],"apiKeySource":"none","claude_code_version":"2.0.21","output_style":"default","agents":["general-purpose","statusline-setup","output-style-setup","Explore"],"uuid":"64250836-f089-44a9-bd80-5aaa8c0ab567"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_017gX9SVTMXLV1KQm7XSWR14","type":"message","role":"assistant","content":[{"type":"text","text":"I'll create a comprehensive test scenario document based on the planning document, requirements, and design documents for Issue #90 (Phase Rollback Feature)."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":73552,"cache_read_input_tokens":12202,"cache_creation":{"ephemeral_5m_input_tokens":73552,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"d7028e33-dcb2-4eb0-b0e1-b956c18e451f","uuid":"4e1dbdf4-1123-463d-a315-b1809abec15c"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_017gX9SVTMXLV1KQm7XSWR14","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_018bgU6TpQCykBgMA7GiDtwZ","name":"Write","input":{"file_path":"/tmp/jenkins-d3e0067f/workspace/AI_Workflow/ai_workflow_orchestrator_develop/.ai-workflow/issue-90/03_test_scenario/output/test-scenario.md","content":"# テストシナリオ - Issue #90: フェーズ差し戻し機能の実装\n\n**作成日**: 2025-01-30\n**Issue番号**: #90\n**プロジェクト**: AI Workflow Agent\n**バージョン**: v0.4.0\n\n---\n\n## 0. テスト戦略サマリー\n\n### 選択されたテスト戦略\n\n**UNIT_INTEGRATION** (Phase 2で決定)\n\n**判断根拠**:\n- **ユニットテスト**: 各クラスの新規メソッド（MetadataManager、BasePhase、ContentParser）の動作を個別に検証\n- **インテグレーションテスト**: エンドツーエンドの差し戻しシナリオ（Phase 6 → Phase 4）、プロンプト注入の検証、メタデータ更新の検証\n- **BDDテストは不要**: ユーザーストーリーよりも、システム内部の状態遷移とデータフローの検証が重要\n\n### テスト対象の範囲\n\n**新規作成モジュール**:\n- `src/commands/rollback.ts` - Rollbackコマンドハンドラ\n\n**拡張モジュール**:\n- `src/core/metadata-manager.ts` - 差し戻しコンテキスト管理メソッド（6個）\n- `src/phases/base-phase.ts` - プロンプト注入ロジック拡張\n- `src/phases/lifecycle/phase-runner.ts` - revise完了後のクリア処理\n- `src/core/content-parser.ts` - ブロッカー情報抽出メソッド（2個）\n\n**新規型定義**:\n- `src/types/commands.ts` - RollbackCommandOptions、RollbackContext、RollbackHistoryEntry\n- `src/types.ts` - WorkflowMetadata型の拡張（rollback_context、rollback_history）\n\n### テストの目的\n\n1. **差し戻し理由の伝達**: 差し戻し理由がメタデータに正しく記録され、プロンプトに注入されることを検証\n2. **メタデータの整合性**: 差し戻し時のメタデータ更新が正しく行われることを検証\n3. **後方互換性**: 既存のワークフローに影響を与えないことを検証\n4. **エラーハンドリング**: 不正な入力や状態に対して適切にエラー処理が行われることを検証\n5. **統合動作**: 複数コンポーネント（MetadataManager、BasePhase、ContentParser、Rollbackコマンド）が連携して正しく動作することを検証\n\n---\n\n## 1. ユニットテストシナリオ\n\n### 1.1. MetadataManager - 差し戻しコンテキスト管理\n\n#### UC-MM-01: setRollbackContext() - 正常系\n\n**目的**: 差し戻しコンテキストが正しく設定されることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズ（implementation）が存在する\n\n**入力**:\n```typescript\nphaseName = 'implementation';\ncontext = {\n  triggered_at: '2025-01-30T12:34:56.789Z',\n  from_phase: 'testing',\n  from_step: 'review',\n  reason: 'Type definition missing: PhaseExecutionResult needs approved and feedback fields',\n  review_result: '@.ai-workflow/issue-49/06_testing/review/result.md',\n  details: {\n    blocker_count: 2,\n    suggestion_count: 4,\n    affected_tests: ['StepExecutor', 'PhaseRunner']\n  }\n};\n```\n\n**期待結果**:\n- `metadata.phases.implementation.rollback_context`にcontextが設定される\n- `metadata.save()`が呼び出される\n- ログに`\"Rollback context set for phase implementation\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-MM-01: setRollbackContext() - 正常系', () => {\n  const metadata = new MetadataManager(metadataPath);\n  const context = { /* ... */ };\n\n  metadata.setRollbackContext('implementation', context);\n\n  expect(metadata.data.phases.implementation.rollback_context).toEqual(context);\n  expect(metadata.save).toHaveBeenCalled();\n});\n```\n\n---\n\n#### UC-MM-02: getRollbackContext() - コンテキスト存在時\n\n**目的**: 差し戻しコンテキストが正しく取得されることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズにrollback_contextが設定されている\n\n**入力**:\n```typescript\nphaseName = 'implementation';\n```\n\n**期待結果**:\n- 設定されているrollback_contextが返される\n- nullではない\n\n**テストコード例**:\n```typescript\ntest('UC-MM-02: getRollbackContext() - コンテキスト存在時', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.rollback_context = { /* ... */ };\n\n  const result = metadata.getRollbackContext('implementation');\n\n  expect(result).not.toBeNull();\n  expect(result.reason).toBe('Type definition missing...');\n});\n```\n\n---\n\n#### UC-MM-03: getRollbackContext() - コンテキスト未設定時\n\n**目的**: rollback_contextが未設定の場合にnullが返されることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズにrollback_contextが設定されていない\n\n**入力**:\n```typescript\nphaseName = 'implementation';\n```\n\n**期待結果**:\n- nullが返される\n\n**テストコード例**:\n```typescript\ntest('UC-MM-03: getRollbackContext() - コンテキスト未設定時', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.rollback_context = undefined;\n\n  const result = metadata.getRollbackContext('implementation');\n\n  expect(result).toBeNull();\n});\n```\n\n---\n\n#### UC-MM-04: clearRollbackContext() - 正常系\n\n**目的**: 差し戻しコンテキストが正しくクリアされることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズにrollback_contextが設定されている\n\n**入力**:\n```typescript\nphaseName = 'implementation';\n```\n\n**期待結果**:\n- `metadata.phases.implementation.rollback_context`がnullに設定される\n- `metadata.save()`が呼び出される\n- ログに`\"Rollback context cleared for phase implementation\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-MM-04: clearRollbackContext() - 正常系', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.rollback_context = { /* ... */ };\n\n  metadata.clearRollbackContext('implementation');\n\n  expect(metadata.data.phases.implementation.rollback_context).toBeNull();\n  expect(metadata.save).toHaveBeenCalled();\n});\n```\n\n---\n\n#### UC-MM-05: addRollbackHistory() - 正常系\n\n**目的**: 差し戻し履歴が正しく追加されることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- rollback_history配列が存在する（または未初期化）\n\n**入力**:\n```typescript\nentry = {\n  timestamp: '2025-01-30T12:34:56.789Z',\n  from_phase: 'testing',\n  from_step: 'review',\n  to_phase: 'implementation',\n  to_step: 'revise',\n  reason: 'Type definition missing...',\n  triggered_by: 'manual',\n  review_result_path: '.ai-workflow/issue-49/06_testing/review/result.md'\n};\n```\n\n**期待結果**:\n- `metadata.rollback_history`にentryが追加される\n- 配列が未初期化の場合は自動的に初期化される\n- `metadata.save()`が呼び出される\n- ログに履歴追加が記録される\n\n**テストコード例**:\n```typescript\ntest('UC-MM-05: addRollbackHistory() - 正常系', () => {\n  const metadata = new MetadataManager(metadataPath);\n  const entry = { /* ... */ };\n\n  metadata.addRollbackHistory(entry);\n\n  expect(metadata.data.rollback_history).toContainEqual(entry);\n  expect(metadata.save).toHaveBeenCalled();\n});\n```\n\n---\n\n#### UC-MM-06: updatePhaseForRollback() - reviseステップへの差し戻し\n\n**目的**: フェーズが差し戻し用に正しく更新されることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズがcompleted状態である\n\n**入力**:\n```typescript\nphaseName = 'implementation';\ntoStep = 'revise';\n```\n\n**期待結果**:\n- `status`が`'in_progress'`に変更される\n- `current_step`が`'revise'`に設定される\n- `completed_at`が`null`に設定される\n- `completed_steps`は維持される（execute, reviewは完了済み）\n- `metadata.save()`が呼び出される\n\n**テストコード例**:\n```typescript\ntest('UC-MM-06: updatePhaseForRollback() - reviseステップへの差し戻し', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.status = 'completed';\n  metadata.data.phases.implementation.completed_steps = ['execute', 'review', 'revise'];\n\n  metadata.updatePhaseForRollback('implementation', 'revise');\n\n  expect(metadata.data.phases.implementation.status).toBe('in_progress');\n  expect(metadata.data.phases.implementation.current_step).toBe('revise');\n  expect(metadata.data.phases.implementation.completed_at).toBeNull();\n  expect(metadata.data.phases.implementation.completed_steps).toEqual(['execute', 'review', 'revise']);\n});\n```\n\n---\n\n#### UC-MM-07: updatePhaseForRollback() - executeステップへの差し戻し\n\n**目的**: executeステップへの差し戻し時にcompleted_stepsがクリアされることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズがcompleted状態である\n\n**入力**:\n```typescript\nphaseName = 'implementation';\ntoStep = 'execute';\n```\n\n**期待結果**:\n- `status`が`'in_progress'`に変更される\n- `current_step`が`'execute'`に設定される\n- `completed_at`が`null`に設定される\n- `completed_steps`が空配列にクリアされる\n\n**テストコード例**:\n```typescript\ntest('UC-MM-07: updatePhaseForRollback() - executeステップへの差し戻し', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.status = 'completed';\n  metadata.data.phases.implementation.completed_steps = ['execute', 'review', 'revise'];\n\n  metadata.updatePhaseForRollback('implementation', 'execute');\n\n  expect(metadata.data.phases.implementation.status).toBe('in_progress');\n  expect(metadata.data.phases.implementation.current_step).toBe('execute');\n  expect(metadata.data.phases.implementation.completed_steps).toEqual([]);\n});\n```\n\n---\n\n#### UC-MM-08: resetSubsequentPhases() - 後続フェーズのリセット\n\n**目的**: 指定フェーズより後のすべてのフェーズが正しくリセットされることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 後続フェーズが存在する（test_implementation, testing, documentation等）\n\n**入力**:\n```typescript\nfromPhase = 'implementation';\n```\n\n**期待結果**:\n- 後続フェーズ（test_implementation, testing, documentation, report, evaluation）がすべてpendingに変更される\n- 各フェーズの`started_at`、`completed_at`、`current_step`がnullに設定される\n- `completed_steps`が空配列に設定される\n- `retry_count`が0に設定される\n- `rollback_context`がnullに設定される（既存の差し戻しコンテキストもクリア）\n- リセットされたフェーズ名の配列が返される\n\n**テストコード例**:\n```typescript\ntest('UC-MM-08: resetSubsequentPhases() - 後続フェーズのリセット', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.test_implementation.status = 'completed';\n  metadata.data.phases.testing.status = 'completed';\n\n  const resetPhases = metadata.resetSubsequentPhases('implementation');\n\n  expect(resetPhases).toEqual(['test_implementation', 'testing', 'documentation', 'report', 'evaluation']);\n  expect(metadata.data.phases.test_implementation.status).toBe('pending');\n  expect(metadata.data.phases.testing.status).toBe('pending');\n  expect(metadata.data.phases.test_implementation.completed_steps).toEqual([]);\n});\n```\n\n---\n\n#### UC-MM-09: resetSubsequentPhases() - 最後のフェーズの場合\n\n**目的**: 最後のフェーズ（evaluation）を指定した場合、リセット対象がないことを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズがevaluationである\n\n**入力**:\n```typescript\nfromPhase = 'evaluation';\n```\n\n**期待結果**:\n- 空配列が返される\n- どのフェーズの状態も変更されない\n\n**テストコード例**:\n```typescript\ntest('UC-MM-09: resetSubsequentPhases() - 最後のフェーズの場合', () => {\n  const metadata = new MetadataManager(metadataPath);\n\n  const resetPhases = metadata.resetSubsequentPhases('evaluation');\n\n  expect(resetPhases).toEqual([]);\n});\n```\n\n---\n\n### 1.2. BasePhase - プロンプト注入ロジック\n\n#### UC-BP-01: loadPrompt() - rollback_contextが存在しない場合\n\n**目的**: 差し戻しコンテキストがない場合、既存のロジックが維持されることを検証（後方互換性）\n\n**前提条件**:\n- BasePhaseインスタンスが作成されている\n- rollback_contextが未設定である\n- プロンプトファイルが存在する\n\n**入力**:\n```typescript\npromptType = 'revise';\n```\n\n**期待結果**:\n- プロンプトファイルが読み込まれる\n- 差し戻し情報は注入されない\n- 元のプロンプト内容がそのまま返される\n\n**テストコード例**:\n```typescript\ntest('UC-BP-01: loadPrompt() - rollback_contextが存在しない場合', () => {\n  const basePhase = new TestPhase(/* ... */);\n  jest.spyOn(metadata, 'getRollbackContext').mockReturnValue(null);\n\n  const prompt = basePhase.loadPrompt('revise');\n\n  expect(prompt).not.toContain('⚠️ 差し戻し情報');\n  expect(prompt).toContain('# Phase implementation - 修正プロンプト');\n});\n```\n\n---\n\n#### UC-BP-02: loadPrompt() - rollback_contextが存在する場合（reviseステップ）\n\n**目的**: reviseステップ時に差し戻し情報がプロンプトに注入されることを検証\n\n**前提条件**:\n- BasePhaseインスタンスが作成されている\n- rollback_contextが設定されている\n- プロンプトファイルが存在する\n\n**入力**:\n```typescript\npromptType = 'revise';\nrollbackContext = {\n  triggered_at: '2025-01-30T12:34:56.789Z',\n  from_phase: 'testing',\n  reason: 'Type definition missing...',\n  details: { blocker_count: 2 }\n};\n```\n\n**期待結果**:\n- プロンプトファイルが読み込まれる\n- `buildRollbackPromptSection()`が呼び出される\n- 差し戻し情報がプロンプトの先頭に注入される\n- 元のプロンプト内容も含まれる\n- ログに`\"Rollback context injected into revise prompt\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-BP-02: loadPrompt() - rollback_contextが存在する場合（reviseステップ）', () => {\n  const basePhase = new TestPhase(/* ... */);\n  const context = { /* ... */ };\n  jest.spyOn(metadata, 'getRollbackContext').mockReturnValue(context);\n\n  const prompt = basePhase.loadPrompt('revise');\n\n  expect(prompt).toContain('⚠️ 差し戻し情報');\n  expect(prompt).toContain('Type definition missing...');\n  expect(prompt).toContain('# Phase implementation - 修正プロンプト');\n});\n```\n\n---\n\n#### UC-BP-03: loadPrompt() - rollback_contextが存在するがexecuteステップ\n\n**目的**: executeステップ時は差し戻し情報が注入されないことを検証\n\n**前提条件**:\n- BasePhaseインスタンスが作成されている\n- rollback_contextが設定されている\n- プロンプトファイルが存在する\n\n**入力**:\n```typescript\npromptType = 'execute';\nrollbackContext = { /* ... */ };\n```\n\n**期待結果**:\n- プロンプトファイルが読み込まれる\n- 差し戻し情報は注入されない（executeステップのみに差し戻し情報を注入）\n- 元のプロンプト内容がそのまま返される\n\n**テストコード例**:\n```typescript\ntest('UC-BP-03: loadPrompt() - rollback_contextが存在するがexecuteステップ', () => {\n  const basePhase = new TestPhase(/* ... */);\n  jest.spyOn(metadata, 'getRollbackContext').mockReturnValue({ /* ... */ });\n\n  const prompt = basePhase.loadPrompt('execute');\n\n  expect(prompt).not.toContain('⚠️ 差し戻し情報');\n});\n```\n\n---\n\n#### UC-BP-04: buildRollbackPromptSection() - 完全な差し戻しコンテキスト\n\n**目的**: 差し戻し情報がMarkdown形式で正しく生成されることを検証\n\n**前提条件**:\n- BasePhaseインスタンスが作成されている\n\n**入力**:\n```typescript\ncontext = {\n  triggered_at: '2025-01-30T12:34:56.789Z',\n  from_phase: 'testing',\n  from_step: 'review',\n  reason: 'Type definition missing: PhaseExecutionResult needs approved and feedback fields',\n  review_result: '@.ai-workflow/issue-49/06_testing/review/result.md',\n  details: {\n    blocker_count: 2,\n    suggestion_count: 4,\n    affected_tests: ['StepExecutor', 'PhaseRunner']\n  }\n};\n```\n\n**期待結果**:\n- Markdown形式の差し戻し情報が返される\n- ヘッダー（`# ⚠️ 差し戻し情報`）が含まれる\n- 差し戻し元フェーズ（`Phase testing`）が含まれる\n- 差し戻し理由が含まれる\n- 詳細情報（blocker_count, suggestion_count, affected_tests）が含まれる\n- 参照ドキュメント（review_result）が含まれる\n- 区切り線（`---`）が含まれる\n\n**テストコード例**:\n```typescript\ntest('UC-BP-04: buildRollbackPromptSection() - 完全な差し戻しコンテキスト', () => {\n  const basePhase = new TestPhase(/* ... */);\n  const context = { /* ... */ };\n\n  const section = basePhase.buildRollbackPromptSection(context);\n\n  expect(section).toContain('# ⚠️ 差し戻し情報');\n  expect(section).toContain('Phase testing');\n  expect(section).toContain('Type definition missing...');\n  expect(section).toContain('ブロッカー数: 2');\n  expect(section).toContain('@.ai-workflow/issue-49/06_testing/review/result.md');\n  expect(section).toContain('---');\n});\n```\n\n---\n\n#### UC-BP-05: buildRollbackPromptSection() - 最小限の差し戻しコンテキスト\n\n**目的**: 詳細情報がない場合も正しく動作することを検証\n\n**前提条件**:\n- BasePhaseインスタンスが作成されている\n\n**入力**:\n```typescript\ncontext = {\n  triggered_at: '2025-01-30T12:34:56.789Z',\n  from_phase: null,\n  reason: 'Manual rollback for testing',\n  review_result: null,\n  details: null\n};\n```\n\n**期待結果**:\n- Markdown形式の差し戻し情報が返される\n- ヘッダーと理由のみが含まれる\n- 詳細情報と参照ドキュメントは含まれない（または「なし」と表示）\n- from_phaseがnullの場合は「不明なフェーズ」と表示される\n\n**テストコード例**:\n```typescript\ntest('UC-BP-05: buildRollbackPromptSection() - 最小限の差し戻しコンテキスト', () => {\n  const basePhase = new TestPhase(/* ... */);\n  const context = { triggered_at: '...', from_phase: null, reason: 'Manual rollback...', review_result: null, details: null };\n\n  const section = basePhase.buildRollbackPromptSection(context);\n\n  expect(section).toContain('# ⚠️ 差し戻し情報');\n  expect(section).toContain('不明なフェーズ');\n  expect(section).toContain('Manual rollback...');\n  expect(section).not.toContain('詳細情報:');\n  expect(section).not.toContain('参照すべきドキュメント:');\n});\n```\n\n---\n\n### 1.3. PhaseRunner - revise完了後のクリア処理\n\n#### UC-PR-01: finalizePhase() - revise完了後にrollback_contextがクリアされる\n\n**目的**: reviseステップ完了後に差し戻しコンテキストが自動的にクリアされることを検証\n\n**前提条件**:\n- PhaseRunnerインスタンスが作成されている\n- reviseステップが完了している\n- rollback_contextが設定されている\n\n**入力**:\n```typescript\ncompletedSteps = ['execute', 'review', 'revise'];\nrollbackContext = { /* ... */ };\n```\n\n**期待結果**:\n- `metadata.clearRollbackContext()`が呼び出される\n- ログに`\"Rollback context cleared after revise completion\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-PR-01: finalizePhase() - revise完了後にrollback_contextがクリアされる', async () => {\n  const phaseRunner = new PhaseRunner(/* ... */);\n  jest.spyOn(metadata, 'getCompletedSteps').mockReturnValue(['execute', 'review', 'revise']);\n  jest.spyOn(metadata, 'getRollbackContext').mockReturnValue({ /* ... */ });\n  jest.spyOn(metadata, 'clearRollbackContext');\n\n  await phaseRunner.finalizePhase(null, {});\n\n  expect(metadata.clearRollbackContext).toHaveBeenCalledWith('implementation');\n});\n```\n\n---\n\n#### UC-PR-02: finalizePhase() - revise未完了時はrollback_contextをクリアしない\n\n**目的**: reviseステップが未完了の場合は差し戻しコンテキストがクリアされないことを検証\n\n**前提条件**:\n- PhaseRunnerインスタンスが作成されている\n- reviseステップが未完了である\n- rollback_contextが設定されている\n\n**入力**:\n```typescript\ncompletedSteps = ['execute', 'review'];\nrollbackContext = { /* ... */ };\n```\n\n**期待結果**:\n- `metadata.clearRollbackContext()`が呼び出されない\n- rollback_contextが維持される\n\n**テストコード例**:\n```typescript\ntest('UC-PR-02: finalizePhase() - revise未完了時はrollback_contextをクリアしない', async () => {\n  const phaseRunner = new PhaseRunner(/* ... */);\n  jest.spyOn(metadata, 'getCompletedSteps').mockReturnValue(['execute', 'review']);\n  jest.spyOn(metadata, 'clearRollbackContext');\n\n  await phaseRunner.finalizePhase(null, {});\n\n  expect(metadata.clearRollbackContext).not.toHaveBeenCalled();\n});\n```\n\n---\n\n### 1.4. ContentParser - ブロッカー情報抽出\n\n#### UC-CP-01: extractBlockers() - ブロッカー情報が存在する場合\n\n**目的**: レビュー結果からブロッカー情報が正しく抽出されることを検証\n\n**前提条件**:\n- ContentParserインスタンスが作成されている\n- OpenAI APIがモックされている\n\n**入力**:\n```typescript\nreviewResult = `\n# Phase 6 (testing) のレビュー結果\n\n## ブロッカー（BLOCKER）\n\n1. **型定義の不整合**\n   - 問題: PhaseExecutionResult型にapprovedとfeedbackフィールドが定義されていない\n   - 影響: StepExecutor、PhaseRunnerのテストがコンパイルエラーで全失敗\n   - 対策: src/types.tsのPhaseExecutionResult型にフィールドを追加\n\n2. **テスト成功率47%**\n   - 問題: 新規テスト32ケース中17ケースが失敗\n   - 影響: リファクタリングの品質が保証できない\n   - 対策: Phase 4で型定義を修正後、Phase 6でテスト再実行\n`;\n```\n\n**期待結果**:\n- OpenAI APIが呼び出される\n- 2個のブロッカーが抽出される\n- 各ブロッカーに`title`、`problem`、`impact`、`solution`が含まれる\n- ログに`\"Extracted 2 blockers from review result\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-CP-01: extractBlockers() - ブロッカー情報が存在する場合', async () => {\n  const contentParser = new ContentParser();\n  const reviewResult = `...`;\n\n  const mockedResponse = {\n    choices: [{\n      message: {\n        content: JSON.stringify([\n          { title: '型定義の不整合', problem: '...', impact: '...', solution: '...' },\n          { title: 'テスト成功率47%', problem: '...', impact: '...', solution: '...' }\n        ])\n      }\n    }]\n  };\n  jest.spyOn(contentParser.client.chat.completions, 'create').mockResolvedValue(mockedResponse);\n\n  const blockers = await contentParser.extractBlockers(reviewResult);\n\n  expect(blockers).toHaveLength(2);\n  expect(blockers[0].title).toBe('型定義の不整合');\n});\n```\n\n---\n\n#### UC-CP-02: extractBlockers() - ブロッカー情報が存在しない場合\n\n**目的**: ブロッカー情報がない場合に空配列が返されることを検証\n\n**前提条件**:\n- ContentParserインスタンスが作成されている\n- OpenAI APIがモックされている\n\n**入力**:\n```typescript\nreviewResult = `\n# Phase 6 (testing) のレビュー結果\n\n## 全テスト成功\n\nすべてのテストが成功しました。\n`;\n```\n\n**期待結果**:\n- OpenAI APIが呼び出される\n- 空配列が返される\n- ログに`\"Extracted 0 blockers from review result\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-CP-02: extractBlockers() - ブロッカー情報が存在しない場合', async () => {\n  const contentParser = new ContentParser();\n  const reviewResult = `...`;\n\n  const mockedResponse = {\n    choices: [{ message: { content: '[]' } }]\n  };\n  jest.spyOn(contentParser.client.chat.completions, 'create').mockResolvedValue(mockedResponse);\n\n  const blockers = await contentParser.extractBlockers(reviewResult);\n\n  expect(blockers).toEqual([]);\n});\n```\n\n---\n\n#### UC-CP-03: extractBlockers() - OpenAI APIエラー時\n\n**目的**: OpenAI API呼び出しに失敗した場合、空配列が返されることを検証\n\n**前提条件**:\n- ContentParserインスタンスが作成されている\n- OpenAI APIがエラーをスローする\n\n**入力**:\n```typescript\nreviewResult = `...`;\n```\n\n**期待結果**:\n- OpenAI APIエラーがキャッチされる\n- 空配列が返される\n- 警告ログに`\"Failed to extract blockers\"`が出力される\n- プログラムが終了しない（エラーハンドリング）\n\n**テストコード例**:\n```typescript\ntest('UC-CP-03: extractBlockers() - OpenAI APIエラー時', async () => {\n  const contentParser = new ContentParser();\n  jest.spyOn(contentParser.client.chat.completions, 'create').mockRejectedValue(new Error('API Error'));\n\n  const blockers = await contentParser.extractBlockers('...');\n\n  expect(blockers).toEqual([]);\n});\n```\n\n---\n\n#### UC-CP-04: extractSuggestions() - 改善提案が存在する場合\n\n**目的**: レビュー結果から改善提案が正しく抽出されることを検証\n\n**前提条件**:\n- ContentParserインスタンスが作成されている\n- OpenAI APIがモックされている\n\n**入力**:\n```typescript\nreviewResult = `\n# Phase 6 (testing) のレビュー結果\n\n## 改善提案（SUGGESTION）\n\n- テストカバレッジを80%以上に向上させる\n- エッジケースのテストを追加する\n- モック化をより詳細に行う\n`;\n```\n\n**期待結果**:\n- OpenAI APIが呼び出される\n- 3個の改善提案が抽出される\n- ログに`\"Extracted 3 suggestions from review result\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-CP-04: extractSuggestions() - 改善提案が存在する場合', async () => {\n  const contentParser = new ContentParser();\n  const reviewResult = `...`;\n\n  const mockedResponse = {\n    choices: [{\n      message: {\n        content: JSON.stringify([\n          'テストカバレッジを80%以上に向上させる',\n          'エッジケースのテストを追加する',\n          'モック化をより詳細に行う'\n        ])\n      }\n    }]\n  };\n  jest.spyOn(contentParser.client.chat.completions, 'create').mockResolvedValue(mockedResponse);\n\n  const suggestions = await contentParser.extractSuggestions(reviewResult);\n\n  expect(suggestions).toHaveLength(3);\n  expect(suggestions[0]).toBe('テストカバレッジを80%以上に向上させる');\n});\n```\n\n---\n\n### 1.5. Rollbackコマンド - バリデーション\n\n#### UC-RC-01: validateRollbackOptions() - 有効なオプション\n\n**目的**: 有効なオプションでバリデーションが成功することを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズがcompleted状態である\n\n**入力**:\n```typescript\noptions = {\n  issue: '49',\n  toPhase: 'implementation',\n  reason: 'Type definition missing...',\n  toStep: 'revise'\n};\n```\n\n**期待結果**:\n- バリデーションが成功する\n- 例外がスローされない\n\n**テストコード例**:\n```typescript\ntest('UC-RC-01: validateRollbackOptions() - 有効なオプション', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.status = 'completed';\n\n  const options = { /* ... */ };\n\n  expect(() => validateRollbackOptions(options, metadata)).not.toThrow();\n});\n```\n\n---\n\n#### UC-RC-02: validateRollbackOptions() - 無効なフェーズ名\n\n**目的**: 無効なフェーズ名が指定された場合にエラーがスローされることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n\n**入力**:\n```typescript\noptions = {\n  issue: '49',\n  toPhase: 'invalid-phase',\n  reason: 'Test'\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Invalid phase name: invalid-phase. Use 'list-presets' command to see valid phase names.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-02: validateRollbackOptions() - 無効なフェーズ名', () => {\n  const metadata = new MetadataManager(metadataPath);\n  const options = { issue: '49', toPhase: 'invalid-phase', reason: 'Test' };\n\n  expect(() => validateRollbackOptions(options, metadata))\n    .toThrow('Invalid phase name: invalid-phase');\n});\n```\n\n---\n\n#### UC-RC-03: validateRollbackOptions() - 無効なステップ名\n\n**目的**: 無効なステップ名が指定された場合にエラーがスローされることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n\n**入力**:\n```typescript\noptions = {\n  issue: '49',\n  toPhase: 'implementation',\n  toStep: 'invalid-step',\n  reason: 'Test'\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Invalid step: invalid-step. Valid steps are: execute, review, revise.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-03: validateRollbackOptions() - 無効なステップ名', () => {\n  const metadata = new MetadataManager(metadataPath);\n  const options = { issue: '49', toPhase: 'implementation', toStep: 'invalid-step', reason: 'Test' };\n\n  expect(() => validateRollbackOptions(options, metadata))\n    .toThrow('Invalid step: invalid-step');\n});\n```\n\n---\n\n#### UC-RC-04: validateRollbackOptions() - 未開始フェーズへの差し戻し\n\n**目的**: 未開始（pending）フェーズへの差し戻しがエラーになることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n- 対象フェーズがpending状態である\n\n**入力**:\n```typescript\noptions = {\n  issue: '49',\n  toPhase: 'documentation',\n  reason: 'Test'\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Cannot rollback to phase 'documentation' because it has not been started yet.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-04: validateRollbackOptions() - 未開始フェーズへの差し戻し', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.documentation.status = 'pending';\n\n  const options = { issue: '49', toPhase: 'documentation', reason: 'Test' };\n\n  expect(() => validateRollbackOptions(options, metadata))\n    .toThrow('Cannot rollback to phase \\'documentation\\' because it has not been started yet');\n});\n```\n\n---\n\n#### UC-RC-05: validateRollbackOptions() - 差し戻し理由が未指定\n\n**目的**: 差し戻し理由が指定されていない場合にエラーがスローされることを検証\n\n**前提条件**:\n- MetadataManagerが初期化されている\n\n**入力**:\n```typescript\noptions = {\n  issue: '49',\n  toPhase: 'implementation'\n  // reason, reasonFile, interactive が未指定\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Rollback reason is required. Use --reason, --reason-file, or --interactive option.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-05: validateRollbackOptions() - 差し戻し理由が未指定', () => {\n  const metadata = new MetadataManager(metadataPath);\n  metadata.data.phases.implementation.status = 'completed';\n\n  const options = { issue: '49', toPhase: 'implementation' };\n\n  expect(() => validateRollbackOptions(options, metadata))\n    .toThrow('Rollback reason is required');\n});\n```\n\n---\n\n#### UC-RC-06: loadRollbackReason() - --reasonオプション（正常系）\n\n**目的**: --reasonオプションで差し戻し理由が正しく読み込まれることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n\n**入力**:\n```typescript\noptions = {\n  reason: 'Type definition missing: PhaseExecutionResult needs approved and feedback fields'\n};\n```\n\n**期待結果**:\n- 指定された理由が返される\n- トリムされた文字列が返される\n- ログに`\"Using rollback reason from --reason option\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-RC-06: loadRollbackReason() - --reasonオプション（正常系）', async () => {\n  const options = { reason: '  Type definition missing...  ' };\n\n  const reason = await loadRollbackReason(options, '/workflow-dir');\n\n  expect(reason).toBe('Type definition missing...');\n});\n```\n\n---\n\n#### UC-RC-07: loadRollbackReason() - --reasonオプション（空文字列）\n\n**目的**: 空文字列が指定された場合にエラーがスローされることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n\n**入力**:\n```typescript\noptions = {\n  reason: '   '\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Rollback reason cannot be empty.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-07: loadRollbackReason() - --reasonオプション（空文字列）', async () => {\n  const options = { reason: '   ' };\n\n  await expect(loadRollbackReason(options, '/workflow-dir'))\n    .rejects.toThrow('Rollback reason cannot be empty');\n});\n```\n\n---\n\n#### UC-RC-08: loadRollbackReason() - --reasonオプション（1000文字超）\n\n**目的**: 1000文字を超える理由が指定された場合にエラーがスローされることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n\n**入力**:\n```typescript\noptions = {\n  reason: 'a'.repeat(1001)\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Rollback reason must be 1000 characters or less.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-08: loadRollbackReason() - --reasonオプション（1000文字超）', async () => {\n  const options = { reason: 'a'.repeat(1001) };\n\n  await expect(loadRollbackReason(options, '/workflow-dir'))\n    .rejects.toThrow('Rollback reason must be 1000 characters or less');\n});\n```\n\n---\n\n#### UC-RC-09: loadRollbackReason() - --reason-fileオプション（正常系）\n\n**目的**: --reason-fileオプションでファイルから差し戻し理由が読み込まれることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n- レビュー結果ファイルが存在する\n\n**入力**:\n```typescript\noptions = {\n  reasonFile: '.ai-workflow/issue-49/06_testing/review/result.md'\n};\n```\n\n**期待結果**:\n- ファイルが読み込まれる\n- ファイルの内容が返される\n- ログに`\"Loaded rollback reason from file: ...\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-RC-09: loadRollbackReason() - --reason-fileオプション（正常系）', async () => {\n  const options = { reasonFile: '/path/to/review/result.md' };\n  jest.spyOn(fs, 'existsSync').mockReturnValue(true);\n  jest.spyOn(fs, 'statSync').mockReturnValue({ size: 1024 } as any);\n  jest.spyOn(fs, 'readFileSync').mockReturnValue('Review result content');\n\n  const reason = await loadRollbackReason(options, '/workflow-dir');\n\n  expect(reason).toBe('Review result content');\n});\n```\n\n---\n\n#### UC-RC-10: loadRollbackReason() - --reason-fileオプション（ファイル不在）\n\n**目的**: 指定されたファイルが存在しない場合にエラーがスローされることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n- レビュー結果ファイルが存在しない\n\n**入力**:\n```typescript\noptions = {\n  reasonFile: '/non-existent-file.md'\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Reason file not found: /non-existent-file.md\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-10: loadRollbackReason() - --reason-fileオプション（ファイル不在）', async () => {\n  const options = { reasonFile: '/non-existent-file.md' };\n  jest.spyOn(fs, 'existsSync').mockReturnValue(false);\n\n  await expect(loadRollbackReason(options, '/workflow-dir'))\n    .rejects.toThrow('Reason file not found');\n});\n```\n\n---\n\n#### UC-RC-11: loadRollbackReason() - --reason-fileオプション（ファイルサイズ超過）\n\n**目的**: ファイルサイズが100KBを超える場合にエラーがスローされることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n- レビュー結果ファイルが存在するが100KB超\n\n**入力**:\n```typescript\noptions = {\n  reasonFile: '/large-file.md'\n};\n```\n\n**期待結果**:\n- エラーがスローされる\n- エラーメッセージ: `\"Reason file must be 100KB or less.\"`\n\n**テストコード例**:\n```typescript\ntest('UC-RC-11: loadRollbackReason() - --reason-fileオプション（ファイルサイズ超過）', async () => {\n  const options = { reasonFile: '/large-file.md' };\n  jest.spyOn(fs, 'existsSync').mockReturnValue(true);\n  jest.spyOn(fs, 'statSync').mockReturnValue({ size: 200 * 1024 } as any);\n\n  await expect(loadRollbackReason(options, '/workflow-dir'))\n    .rejects.toThrow('Reason file must be 100KB or less');\n});\n```\n\n---\n\n#### UC-RC-12: confirmRollback() - ユーザーがyを入力\n\n**目的**: ユーザーが確認プロンプトで`y`を入力した場合にtrueが返されることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n- CI環境ではない\n\n**入力**:\n```typescript\ntoPhase = 'implementation';\nreason = 'Type definition missing...';\nuserInput = 'y';\n```\n\n**期待結果**:\n- 確認プロンプトが表示される\n- trueが返される\n\n**テストコード例**:\n```typescript\ntest('UC-RC-12: confirmRollback() - ユーザーがyを入力', async () => {\n  jest.spyOn(config, 'isCI').mockReturnValue(false);\n  // readline のモック\n\n  const confirmed = await confirmRollback('implementation', 'Reason...', metadata);\n\n  expect(confirmed).toBe(true);\n});\n```\n\n---\n\n#### UC-RC-13: confirmRollback() - ユーザーがnを入力\n\n**目的**: ユーザーが確認プロンプトで`n`を入力した場合にfalseが返されることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n- CI環境ではない\n\n**入力**:\n```typescript\nuserInput = 'n';\n```\n\n**期待結果**:\n- 確認プロンプトが表示される\n- falseが返される\n\n**テストコード例**:\n```typescript\ntest('UC-RC-13: confirmRollback() - ユーザーがnを入力', async () => {\n  jest.spyOn(config, 'isCI').mockReturnValue(false);\n  // readline のモック（'n'を返す）\n\n  const confirmed = await confirmRollback('implementation', 'Reason...', metadata);\n\n  expect(confirmed).toBe(false);\n});\n```\n\n---\n\n#### UC-RC-14: confirmRollback() - CI環境では自動承認\n\n**目的**: CI環境では確認プロンプトが自動的にスキップされることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n- CI環境である（process.env.CI が設定されている）\n\n**入力**:\n```typescript\n// CI環境\n```\n\n**期待結果**:\n- 確認プロンプトが表示されない\n- trueが返される\n- ログに`\"CI environment detected. Skipping confirmation prompt.\"`が出力される\n\n**テストコード例**:\n```typescript\ntest('UC-RC-14: confirmRollback() - CI環境では自動承認', async () => {\n  jest.spyOn(config, 'isCI').mockReturnValue(true);\n\n  const confirmed = await confirmRollback('implementation', 'Reason...', metadata);\n\n  expect(confirmed).toBe(true);\n});\n```\n\n---\n\n### 1.6. Rollbackコマンド - ROLLBACK_REASON.md生成\n\n#### UC-RC-15: generateRollbackReasonMarkdown() - 完全な情報\n\n**目的**: 差し戻し理由ドキュメントが正しく生成されることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n\n**入力**:\n```typescript\noptions = {\n  toPhase: 'implementation',\n  fromPhase: 'testing',\n  reasonFile: '.ai-workflow/issue-49/06_testing/review/result.md'\n};\nreason = 'Type definition missing...';\ndetails = {\n  blocker_count: 2,\n  suggestion_count: 4,\n  affected_tests: ['StepExecutor', 'PhaseRunner']\n};\n```\n\n**期待結果**:\n- Markdown形式のドキュメントが返される\n- フェーズ番号とフェーズ名が含まれる（`# Phase 04 (implementation) への差し戻し理由`）\n- 差し戻し元フェーズが含まれる\n- 差し戻し日時が含まれる\n- 差し戻し理由が含まれる\n- 詳細情報が含まれる\n- 参照ドキュメントが含まれる\n- 修正後の確認事項が含まれる\n\n**テストコード例**:\n```typescript\ntest('UC-RC-15: generateRollbackReasonMarkdown() - 完全な情報', () => {\n  const options = { /* ... */ };\n  const reason = 'Type definition missing...';\n  const details = { /* ... */ };\n\n  const markdown = generateRollbackReasonMarkdown(options, reason, details);\n\n  expect(markdown).toContain('# Phase 04 (implementation) への差し戻し理由');\n  expect(markdown).toContain('**差し戻し元**: Phase testing');\n  expect(markdown).toContain('Type definition missing...');\n  expect(markdown).toContain('ブロッカー数: 2');\n  expect(markdown).toContain('@.ai-workflow/issue-49/06_testing/review/result.md');\n});\n```\n\n---\n\n#### UC-RC-16: generateRollbackReasonMarkdown() - 最小限の情報\n\n**目的**: 最小限の情報でもドキュメントが生成されることを検証\n\n**前提条件**:\n- Rollbackコマンドが実行されている\n\n**入力**:\n```typescript\noptions = {\n  toPhase: 'implementation'\n  // fromPhase, reasonFile は未指定\n};\nreason = 'Manual rollback for testing';\ndetails = null;\n```\n\n**期待結果**:\n- Markdown形式のドキュメントが返される\n- フェーズ番号とフェーズ名が含まれる\n- 差し戻し元フェーズは含まれない\n- 差し戻し理由が含まれる\n- 詳細情報と参照ドキュメントは含まれない\n\n**テストコード例**:\n```typescript\ntest('UC-RC-16: generateRollbackReasonMarkdown() - 最小限の情報', () => {\n  const options = { toPhase: 'implementation' };\n  const reason = 'Manual rollback for testing';\n  const details = null;\n\n  const markdown = generateRollbackReasonMarkdown(options, reason, details);\n\n  expect(markdown).toContain('# Phase 04 (implementation) への差し戻し理由');\n  expect(markdown).toContain('Manual rollback for testing');\n  expect(markdown).not.toContain('詳細情報');\n  expect(markdown).not.toContain('参照ドキュメント');\n});\n```\n\n---\n\n## 2. インテグレーションテストシナリオ\n\n### 2.1. エンドツーエンドの差し戻しシナリオ\n\n#### IC-E2E-01: Phase 6 → Phase 4への完全な差し戻しフロー\n\n**目的**: エンドツーエンドの差し戻しフローが正しく動作することを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- Phase 6 (testing) が完了している\n- Phase 4 (implementation) が完了している\n- レビュー結果ファイルが存在する\n\n**テスト手順**:\n\n1. **差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason-file .ai-workflow/issue-49/06_testing/review/result.md \\\n     --force\n   ```\n\n2. **メタデータの確認**:\n   - `metadata.json`を読み込む\n   - Phase 4の状態を確認\n\n3. **ROLLBACK_REASON.mdの確認**:\n   - `.ai-workflow/issue-49/04_implementation/ROLLBACK_REASON.md`が生成されていることを確認\n   - 内容を確認\n\n4. **Phase 4の再実行（reviseステップ）**:\n   ```bash\n   node dist/index.js execute --issue 49 --phase implementation\n   ```\n\n5. **プロンプトの確認**:\n   - reviseステップのプロンプトに差し戻し情報が注入されていることを確認\n\n6. **revise完了後の確認**:\n   - `rollback_context`がクリアされていることを確認\n\n**期待結果**:\n\n1. **メタデータの更新**:\n   - `phases.implementation.status = 'in_progress'`\n   - `phases.implementation.current_step = 'revise'`\n   - `phases.implementation.completed_at = null`\n   - `phases.implementation.rollback_context`が設定されている\n   - 後続フェーズ（test_implementation, testing, documentation, report, evaluation）がすべて`pending`にリセットされている\n\n2. **ROLLBACK_REASON.mdの生成**:\n   - ファイルが存在する\n   - 差し戻し理由、詳細情報、参照ドキュメントが含まれている\n\n3. **差し戻し履歴の記録**:\n   - `metadata.rollback_history`に新しいエントリが追加されている\n\n4. **プロンプト注入**:\n   - reviseステップのプロンプトに`⚠️ 差し戻し情報`が含まれている\n   - 差し戻し理由が含まれている\n\n5. **revise完了後**:\n   - `rollback_context`が`null`にクリアされている\n\n**確認項目**:\n- [ ] メタデータが正しく更新されている\n- [ ] ROLLBACK_REASON.mdが生成されている\n- [ ] 差し戻し履歴が記録されている\n- [ ] プロンプトに差し戻し情報が注入されている\n- [ ] revise完了後にrollback_contextがクリアされている\n- [ ] 後続フェーズがすべてリセットされている\n\n---\n\n#### IC-E2E-02: 差し戻し理由の直接指定（--reason）\n\n**目的**: --reasonオプションでの差し戻しフローが正しく動作することを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- Phase 6 (testing) が完了している\n\n**テスト手順**:\n\n1. **差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"型定義にapprovedとfeedbackフィールドが不足しています。src/types.tsを修正してください。\" \\\n     --force\n   ```\n\n2. **メタデータの確認**:\n   - `rollback_context.reason`が指定された理由と一致することを確認\n\n3. **ROLLBACK_REASON.mdの確認**:\n   - 内容に指定された理由が含まれていることを確認\n\n**期待結果**:\n- `rollback_context.reason`が指定された理由と一致する\n- `rollback_context.review_result`がnullである（ファイル指定ではないため）\n- `rollback_context.details`がnullである（ブロッカー情報抽出はスキップ）\n\n**確認項目**:\n- [ ] 差し戻し理由が正しく記録されている\n- [ ] review_resultがnullである\n- [ ] detailsがnullである\n\n---\n\n#### IC-E2E-03: ドライランモード（--dry-run）\n\n**目的**: ドライランモードで変更がプレビューされ、実際のメタデータは変更されないことを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **メタデータのバックアップ**:\n   - `metadata.json`の内容を保存\n\n2. **ドライランコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"Test reason\" \\\n     --dry-run\n   ```\n\n3. **出力の確認**:\n   - `[DRY RUN]`プレフィックスが付いていることを確認\n   - 変更内容のプレビューが表示されることを確認\n\n4. **メタデータの確認**:\n   - `metadata.json`が変更されていないことを確認\n\n5. **ROLLBACK_REASON.mdの確認**:\n   - ファイルが生成されていないことを確認\n\n**期待結果**:\n- 変更内容がコンソールに表示される\n- `metadata.json`は変更されない\n- `ROLLBACK_REASON.md`は生成されない\n- `rollback_history`に記録されない\n\n**確認項目**:\n- [ ] 変更内容がプレビューされる\n- [ ] メタデータが変更されない\n- [ ] ROLLBACK_REASON.mdが生成されない\n- [ ] 差し戻し履歴が記録されない\n\n---\n\n#### IC-E2E-04: executeステップへの差し戻し（--to-step execute）\n\n**目的**: executeステップへの差し戻しでcompleted_stepsがクリアされることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- Phase 4 (implementation) が完了している\n\n**テスト手順**:\n\n1. **差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --to-step execute \\\n     --reason \"Phase 4を最初から再実装が必要。\" \\\n     --force\n   ```\n\n2. **メタデータの確認**:\n   - Phase 4の`current_step`が`'execute'`であることを確認\n   - `completed_steps`が空配列であることを確認\n\n3. **Phase 4の再実行（executeステップ）**:\n   ```bash\n   node dist/index.js execute --issue 49 --phase implementation\n   ```\n\n**期待結果**:\n- `phases.implementation.status = 'in_progress'`\n- `phases.implementation.current_step = 'execute'`\n- `phases.implementation.completed_steps = []`（クリアされている）\n- executeステップから再実行される\n\n**確認項目**:\n- [ ] current_stepが'execute'である\n- [ ] completed_stepsが空配列である\n- [ ] executeステップから再実行される\n\n---\n\n### 2.2. レビュー結果からのブロッカー情報抽出\n\n#### IC-BP-01: レビュー結果ファイルからブロッカー情報を抽出し、メタデータに記録\n\n**目的**: --reason-fileオプション使用時にブロッカー情報が自動抽出され、メタデータに記録されることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- レビュー結果ファイルが存在する（ブロッカー情報を含む）\n\n**テスト手順**:\n\n1. **レビュー結果ファイルを用意**:\n   - `.ai-workflow/issue-49/06_testing/review/result.md`にブロッカー情報を含むレビュー結果を保存\n\n2. **差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason-file .ai-workflow/issue-49/06_testing/review/result.md \\\n     --force\n   ```\n\n3. **メタデータの確認**:\n   - `rollback_context.details.blocker_count`が設定されていることを確認\n   - `rollback_context.details.suggestion_count`が設定されていることを確認\n\n4. **ROLLBACK_REASON.mdの確認**:\n   - ブロッカー情報が含まれていることを確認\n\n**期待結果**:\n- `rollback_context.review_result`が設定されている（`@filepath`形式）\n- `rollback_context.details`が設定されている\n- `rollback_context.details.blocker_count`が正しい値である（例: 2）\n- `rollback_context.details.suggestion_count`が正しい値である（例: 4）\n- ROLLBACK_REASON.mdにブロッカー情報が含まれている\n\n**確認項目**:\n- [ ] review_resultが設定されている\n- [ ] detailsが設定されている\n- [ ] blocker_countが正しい\n- [ ] suggestion_countが正しい\n- [ ] ROLLBACK_REASON.mdにブロッカー情報が含まれている\n\n---\n\n### 2.3. 後方互換性の検証\n\n#### IC-COMPAT-01: 既存ワークフローへの影響がないことを確認\n\n**目的**: rollback_contextが設定されていない既存のワークフローが正常に動作することを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- Phase 4にrollback_contextが設定されていない\n\n**テスト手順**:\n\n1. **Phase 4の実行（executeステップ）**:\n   ```bash\n   node dist/index.js execute --issue 49 --phase implementation\n   ```\n\n2. **プロンプトの確認**:\n   - reviseステップのプロンプトに差し戻し情報が注入されていないことを確認\n\n3. **Phase 4の完了**:\n   - Phase 4が正常に完了することを確認\n\n**期待結果**:\n- 既存のロジックが正常に動作する\n- プロンプトに差し戻し情報が注入されない\n- エラーが発生しない\n\n**確認項目**:\n- [ ] 既存のロジックが正常に動作する\n- [ ] プロンプトに差し戻し情報が注入されない\n- [ ] エラーが発生しない\n\n---\n\n#### IC-COMPAT-02: 既存のメタデータ構造が変更されないことを確認\n\n**目的**: 差し戻し機能を使用しない場合、メタデータ構造に変更がないことを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- 差し戻しコマンドを実行していない\n\n**テスト手順**:\n\n1. **メタデータの読み込み**:\n   - `metadata.json`を読み込む\n\n2. **フィールドの確認**:\n   - `rollback_context`フィールドが存在しないか、nullであることを確認\n   - `rollback_history`フィールドが存在しないか、空配列であることを確認\n\n3. **既存フェーズの実行**:\n   - 通常のフェーズ実行が正常に動作することを確認\n\n**期待結果**:\n- `rollback_context`フィールドが存在しないか、nullである\n- `rollback_history`フィールドが存在しないか、空配列である\n- 既存のフェーズ実行が正常に動作する\n\n**確認項目**:\n- [ ] rollback_contextが存在しないか、nullである\n- [ ] rollback_historyが存在しないか、空配列である\n- [ ] 既存のフェーズ実行が正常に動作する\n\n---\n\n### 2.4. エラーハンドリングの検証\n\n#### IC-ERR-01: 無効なフェーズ名でエラーメッセージが表示される\n\n**目的**: 無効なフェーズ名が指定された場合に適切なエラーメッセージが表示されることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **無効なフェーズ名で差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase invalid-phase \\\n     --reason \"Test\"\n   ```\n\n2. **エラーメッセージの確認**:\n   - 標準エラー出力にエラーメッセージが表示されることを確認\n\n**期待結果**:\n- エラーメッセージが表示される: `Error: Invalid phase name 'invalid-phase'. Use 'list-presets' command to see valid phase names.`\n- 終了コードが1である\n- メタデータは変更されない\n\n**確認項目**:\n- [ ] エラーメッセージが表示される\n- [ ] 終了コードが1である\n- [ ] メタデータが変更されない\n\n---\n\n#### IC-ERR-02: 未開始フェーズへの差し戻しでエラーメッセージが表示される\n\n**目的**: 未開始フェーズへの差し戻しが適切にエラーになることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- Phase 7 (documentation) がpending状態である\n\n**テスト手順**:\n\n1. **未開始フェーズに差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase documentation \\\n     --reason \"Test\"\n   ```\n\n2. **エラーメッセージの確認**:\n   - 標準エラー出力にエラーメッセージが表示されることを確認\n\n**期待結果**:\n- エラーメッセージが表示される: `Error: Cannot rollback to phase 'documentation' because it has not been started yet.`\n- 終了コードが1である\n- メタデータは変更されない\n\n**確認項目**:\n- [ ] エラーメッセージが表示される\n- [ ] 終了コードが1である\n- [ ] メタデータが変更されない\n\n---\n\n#### IC-ERR-03: レビュー結果ファイルが存在しない場合のエラーハンドリング\n\n**目的**: --reason-fileで指定したファイルが存在しない場合に適切なエラーメッセージが表示されることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **存在しないファイルを指定して差し戻しコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason-file /non-existent-file.md\n   ```\n\n2. **エラーメッセージの確認**:\n   - 標準エラー出力にエラーメッセージが表示されることを確認\n\n**期待結果**:\n- エラーメッセージが表示される: `Error: Reason file not found: /non-existent-file.md`\n- 終了コードが1である\n- メタデータは変更されない\n\n**確認項目**:\n- [ ] エラーメッセージが表示される\n- [ ] 終了コードが1である\n- [ ] メタデータが変更されない\n\n---\n\n#### IC-ERR-04: 差し戻し理由が未指定の場合のエラーハンドリング\n\n**目的**: 差し戻し理由が指定されていない場合に適切なエラーメッセージが表示されることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **差し戻し理由を指定せずにコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation\n   ```\n\n2. **エラーメッセージの確認**:\n   - 標準エラー出力にエラーメッセージが表示されることを確認\n\n**期待結果**:\n- エラーメッセージが表示される: `Error: Rollback reason is required. Use --reason, --reason-file, or --interactive option.`\n- 終了コードが1である\n- メタデータは変更されない\n\n**確認項目**:\n- [ ] エラーメッセージが表示される\n- [ ] 終了コードが1である\n- [ ] メタデータが変更されない\n\n---\n\n### 2.5. 確認プロンプトの検証\n\n#### IC-PROMPT-01: 確認プロンプトで`n`を入力した場合、処理がキャンセルされる\n\n**目的**: 確認プロンプトで`n`を入力した場合に処理がキャンセルされることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- CI環境ではない\n\n**テスト手順**:\n\n1. **差し戻しコマンド実行（--forceなし）**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"Test\"\n   ```\n\n2. **確認プロンプトに対して`n`を入力**\n\n3. **メッセージの確認**:\n   - `Rollback cancelled.`というメッセージが表示されることを確認\n\n4. **メタデータの確認**:\n   - `metadata.json`が変更されていないことを確認\n\n**期待結果**:\n- 確認プロンプトが表示される\n- `Rollback cancelled.`というメッセージが表示される\n- メタデータは変更されない\n\n**確認項目**:\n- [ ] 確認プロンプトが表示される\n- [ ] キャンセルメッセージが表示される\n- [ ] メタデータが変更されない\n\n---\n\n#### IC-PROMPT-02: --forceオプションで確認プロンプトがスキップされる\n\n**目的**: --forceオプション使用時に確認プロンプトがスキップされることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **差し戻しコマンド実行（--force）**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"Test\" \\\n     --force\n   ```\n\n2. **確認プロンプトが表示されないことを確認**\n\n3. **メタデータの確認**:\n   - 差し戻しが実行されていることを確認\n\n**期待結果**:\n- 確認プロンプトが表示されない\n- 差し戻し処理が即座に実行される\n- メタデータが更新される\n\n**確認項目**:\n- [ ] 確認プロンプトが表示されない\n- [ ] 差し戻し処理が実行される\n- [ ] メタデータが更新される\n\n---\n\n#### IC-PROMPT-03: CI環境では自動的に確認がスキップされる\n\n**目的**: CI環境では確認プロンプトが自動的にスキップされることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n- CI環境である（process.env.CI が設定されている）\n\n**テスト手順**:\n\n1. **CI環境変数を設定**:\n   ```bash\n   export CI=true\n   ```\n\n2. **差し戻しコマンド実行（--forceなし）**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"Test\"\n   ```\n\n3. **ログの確認**:\n   - `CI environment detected. Skipping confirmation prompt.`というログが出力されることを確認\n\n4. **メタデータの確認**:\n   - 差し戻しが実行されていることを確認\n\n**期待結果**:\n- 確認プロンプトが表示されない\n- ログに`CI environment detected.`が出力される\n- 差し戻し処理が実行される\n\n**確認項目**:\n- [ ] 確認プロンプトが表示されない\n- [ ] CI環境検出ログが出力される\n- [ ] 差し戻し処理が実行される\n\n---\n\n### 2.6. 差し戻し履歴の検証\n\n#### IC-HISTORY-01: 差し戻し履歴が正しく記録される\n\n**目的**: 差し戻し履歴がメタデータに正しく記録されることを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **初回の差し戻し**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"First rollback\" \\\n     --force\n   ```\n\n2. **メタデータの確認**:\n   - `rollback_history`配列に1個のエントリが追加されていることを確認\n\n3. **2回目の差し戻し**（Phase 4完了後、再度Phase 4に差し戻し）:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"Second rollback\" \\\n     --force\n   ```\n\n4. **メタデータの確認**:\n   - `rollback_history`配列に2個のエントリが追加されていることを確認\n   - エントリが時系列順（古い→新しい）に並んでいることを確認\n\n**期待結果**:\n- `rollback_history`配列に差し戻しエントリが追加される\n- 各エントリに`timestamp`、`to_phase`、`reason`、`triggered_by`が含まれる\n- エントリが時系列順に並んでいる\n\n**確認項目**:\n- [ ] rollback_history配列にエントリが追加される\n- [ ] 各エントリに必須フィールドが含まれる\n- [ ] エントリが時系列順に並んでいる\n\n---\n\n#### IC-HISTORY-02: ドライラン時は差し戻し履歴に記録されない\n\n**目的**: ドライランモード時に差し戻し履歴が記録されないことを検証\n\n**前提条件**:\n- Issue #49のワークフローが存在する\n\n**テスト手順**:\n\n1. **メタデータのバックアップ**:\n   - `rollback_history`の初期状態を保存\n\n2. **ドライランコマンド実行**:\n   ```bash\n   node dist/index.js rollback --issue 49 --to-phase implementation \\\n     --reason \"Test\" \\\n     --dry-run\n   ```\n\n3. **メタデータの確認**:\n   - `rollback_history`が変更されていないことを確認\n\n**期待結果**:\n- `rollback_history`にエントリが追加されない\n- メタデータは変更されない\n\n**確認項目**:\n- [ ] rollback_historyが変更されない\n- [ ] メタデータが変更されない\n\n---\n\n## 3. テストデータ\n\n### 3.1. メタデータテストデータ\n\n#### 正常なメタデータ（Phase 6完了、Phase 4完了）\n\n```json\n{\n  \"issue_number\": \"49\",\n  \"current_phase\": \"testing\",\n  \"phases\": {\n    \"planning\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"started_at\": \"2025-01-01T00:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T01:00:00.000Z\"\n    },\n    \"requirements\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"started_at\": \"2025-01-01T01:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T02:00:00.000Z\"\n    },\n    \"design\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"started_at\": \"2025-01-01T02:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T03:00:00.000Z\"\n    },\n    \"test_scenario\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"started_at\": \"2025-01-01T03:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T04:00:00.000Z\"\n    },\n    \"implementation\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"started_at\": \"2025-01-01T04:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T05:00:00.000Z\"\n    },\n    \"test_implementation\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"started_at\": \"2025-01-01T05:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T06:00:00.000Z\"\n    },\n    \"testing\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\"],\n      \"started_at\": \"2025-01-01T06:00:00.000Z\",\n      \"completed_at\": \"2025-01-01T07:00:00.000Z\"\n    },\n    \"documentation\": {\n      \"status\": \"pending\",\n      \"current_step\": null,\n      \"completed_steps\": []\n    },\n    \"report\": {\n      \"status\": \"pending\",\n      \"current_step\": null,\n      \"completed_steps\": []\n    },\n    \"evaluation\": {\n      \"status\": \"pending\",\n      \"current_step\": null,\n      \"completed_steps\": []\n    }\n  },\n  \"rollback_history\": []\n}\n```\n\n### 3.2. レビュー結果テストデータ\n\n#### ブロッカー情報を含むレビュー結果\n\n```markdown\n# Phase 6 (testing) のレビュー結果\n\n**判定**: FAIL\n\n## ブロッカー（BLOCKER）\n\n1. **型定義の不整合（Phase 4の実装不備）**\n   - 問題: `PhaseExecutionResult`型に`approved`と`feedback`フィールドが定義されていない\n   - 影響: StepExecutor、PhaseRunner、BasePhase統合テストがTypeScriptコンパイルエラーで全失敗\n   - 対策: `src/types.ts`の`PhaseExecutionResult`型に`approved?: boolean`と`feedback?: string`を追加\n\n2. **主要テストケースの成功率47%**\n   - 問題: 新規テスト32ケース中17ケースが失敗\n   - 影響: リファクタリングの品質が保証できない\n   - 対策: Phase 4で型定義を修正後、Phase 6でテスト再実行\n\n## 改善提案（SUGGESTION）\n\n- テストカバレッジを90%以上に向上させる\n- エッジケースのテストを追加する\n- モック化をより詳細に行う\n- CI環境判定のテストを追加する\n```\n\n#### ブロッカー情報が存在しないレビュー結果\n\n```markdown\n# Phase 6 (testing) のレビュー結果\n\n**判定**: PASS\n\n## 全テスト成功\n\nすべてのテストが成功しました。\n\n## 改善提案（SUGGESTION）\n\n- テストカバレッジを90%以上に向上させる\n```\n\n### 3.3. 差し戻しコンテキストテストデータ\n\n#### 完全な差し戻しコンテキスト\n\n```json\n{\n  \"triggered_at\": \"2025-01-30T12:34:56.789Z\",\n  \"from_phase\": \"testing\",\n  \"from_step\": \"review\",\n  \"reason\": \"Type definition missing: PhaseExecutionResult needs approved and feedback fields\",\n  \"review_result\": \"@.ai-workflow/issue-49/06_testing/review/result.md\",\n  \"details\": {\n    \"blocker_count\": 2,\n    \"suggestion_count\": 4,\n    \"affected_tests\": [\"StepExecutor\", \"PhaseRunner\", \"BasePhase integration\"]\n  }\n}\n```\n\n#### 最小限の差し戻しコンテキスト\n\n```json\n{\n  \"triggered_at\": \"2025-01-30T12:34:56.789Z\",\n  \"from_phase\": null,\n  \"from_step\": null,\n  \"reason\": \"Manual rollback for testing\",\n  \"review_result\": null,\n  \"details\": null\n}\n```\n\n---\n\n## 4. テスト環境要件\n\n### 4.1. 必要なテスト環境\n\n**ローカル環境**:\n- Node.js 20以上\n- npm 10以上\n- Git 2.x以上\n\n**CI/CD環境**:\n- GitHub Actions（既存のCI設定を使用）\n- 環境変数`CI`が設定されていること\n\n### 4.2. 必要な外部サービス\n\n**OpenAI API**:\n- `ContentParser.extractBlockers()`および`extractSuggestions()`のテストで使用\n- テスト時はモック化を推奨（APIコスト削減のため）\n\n### 4.3. モック/スタブの必要性\n\n**必須モック**:\n- OpenAI API（`ContentParser`のテスト）\n- ファイルシステム（`fs`モジュール）\n- readline（確認プロンプトのテスト）\n\n**オプショナルモック**:\n- logger（ログ出力の検証）\n- config（CI環境判定のテスト）\n\n---\n\n## 5. 品質ゲート確認\n\nPhase 3のテストシナリオは以下の品質ゲートを満たす必要があります：\n\n### ✅ Phase 2の戦略に沿ったテストシナリオである\n\n- **UNIT_INTEGRATION戦略に準拠**:\n  - ユニットテストシナリオ: 16個（MetadataManager、BasePhase、PhaseRunner、ContentParser、Rollbackコマンド）\n  - インテグレーションテストシナリオ: 16個（エンドツーエンド、ブロッカー情報抽出、後方互換性、エラーハンドリング、確認プロンプト、差し戻し履歴）\n  - BDDシナリオ: 0個（戦略に含まれないため作成不要）\n\n### ✅ 主要な正常系がカバーされている\n\n**ユニットテスト正常系**:\n- UC-MM-01: setRollbackContext() - 正常系\n- UC-MM-02: getRollbackContext() - コンテキスト存在時\n- UC-MM-04: clearRollbackContext() - 正常系\n- UC-MM-05: addRollbackHistory() - 正常系\n- UC-MM-06: updatePhaseForRollback() - reviseステップへの差し戻し\n- UC-MM-08: resetSubsequentPhases() - 後続フェーズのリセット\n- UC-BP-02: loadPrompt() - rollback_contextが存在する場合（reviseステップ）\n- UC-BP-04: buildRollbackPromptSection() - 完全な差し戻しコンテキスト\n- UC-PR-01: finalizePhase() - revise完了後にrollback_contextがクリアされる\n- UC-CP-01: extractBlockers() - ブロッカー情報が存在する場合\n- UC-CP-04: extractSuggestions() - 改善提案が存在する場合\n- UC-RC-01: validateRollbackOptions() - 有効なオプション\n- UC-RC-06: loadRollbackReason() - --reasonオプション（正常系）\n- UC-RC-09: loadRollbackReason() - --reason-fileオプション（正常系）\n- UC-RC-15: generateRollbackReasonMarkdown() - 完全な情報\n\n**インテグレーションテスト正常系**:\n- IC-E2E-01: Phase 6 → Phase 4への完全な差し戻しフロー\n- IC-E2E-02: 差し戻し理由の直接指定（--reason）\n- IC-E2E-03: ドライランモード（--dry-run）\n- IC-BP-01: レビュー結果ファイルからブロッカー情報を抽出し、メタデータに記録\n- IC-COMPAT-01: 既存ワークフローへの影響がないことを確認\n- IC-PROMPT-02: --forceオプションで確認プロンプトがスキップされる\n- IC-HISTORY-01: 差し戻し履歴が正しく記録される\n\n### ✅ 主要な異常系がカバーされている\n\n**ユニットテスト異常系**:\n- UC-MM-03: getRollbackContext() - コンテキスト未設定時\n- UC-MM-09: resetSubsequentPhases() - 最後のフェーズの場合\n- UC-BP-01: loadPrompt() - rollback_contextが存在しない場合（後方互換性）\n- UC-BP-05: buildRollbackPromptSection() - 最小限の差し戻しコンテキスト\n- UC-PR-02: finalizePhase() - revise未完了時はrollback_contextをクリアしない\n- UC-CP-02: extractBlockers() - ブロッカー情報が存在しない場合\n- UC-CP-03: extractBlockers() - OpenAI APIエラー時\n- UC-RC-02: validateRollbackOptions() - 無効なフェーズ名\n- UC-RC-03: validateRollbackOptions() - 無効なステップ名\n- UC-RC-04: validateRollbackOptions() - 未開始フェーズへの差し戻し\n- UC-RC-05: validateRollbackOptions() - 差し戻し理由が未指定\n- UC-RC-07: loadRollbackReason() - --reasonオプション（空文字列）\n- UC-RC-08: loadRollbackReason() - --reasonオプション（1000文字超）\n- UC-RC-10: loadRollbackReason() - --reason-fileオプション（ファイル不在）\n- UC-RC-11: loadRollbackReason() - --reason-fileオプション（ファイルサイズ超過）\n\n**インテグレーションテスト異常系**:\n- IC-ERR-01: 無効なフェーズ名でエラーメッセージが表示される\n- IC-ERR-02: 未開始フェーズへの差し戻しでエラーメッセージが表示される\n- IC-ERR-03: レビュー結果ファイルが存在しない場合のエラーハンドリング\n- IC-ERR-04: 差し戻し理由が未指定の場合のエラーハンドリング\n- IC-PROMPT-01: 確認プロンプトで`n`を入力した場合、処理がキャンセルされる\n\n### ✅ 期待結果が明確である\n\nすべてのテストシナリオに対して：\n- **前提条件**が明記されている\n- **入力**が具体的に記載されている\n- **期待結果**が検証可能な形で記述されている\n- **確認項目**がチェックリスト形式で列挙されている\n\n---\n\n## 6. テスト実行計画\n\n### 6.1. テスト実行順序\n\n**Phase 5（テストコード実装）で実装順序**:\n\n1. **ユニットテスト**（並行実装可能）:\n   - MetadataManager（9個）\n   - BasePhase（5個）\n   - PhaseRunner（2個）\n   - ContentParser（4個）\n   - Rollbackコマンド（16個）\n\n2. **インテグレーションテスト**（ユニットテスト完了後）:\n   - エンドツーエンドシナリオ（4個）\n   - ブロッカー情報抽出（1個）\n   - 後方互換性（2個）\n   - エラーハンドリング（4個）\n   - 確認プロンプト（3個）\n   - 差し戻し履歴（2個）\n\n### 6.2. テスト実行コマンド\n\n**ユニットテスト実行**:\n```bash\nnpm test -- tests/unit/core/metadata-manager.test.ts\nnpm test -- tests/unit/phases/base-phase.test.ts\nnpm test -- tests/unit/phases/lifecycle/phase-runner.test.ts\nnpm test -- tests/unit/core/content-parser.test.ts\nnpm test -- tests/unit/commands/rollback.test.ts\n```\n\n**インテグレーションテスト実行**:\n```bash\nnpm test -- tests/integration/rollback-workflow.test.ts\n```\n\n**すべてのテスト実行**:\n```bash\nnpm test\n```\n\n### 6.3. 成功基準\n\n**Phase 6（テスト実行）での成功基準**:\n- すべてのユニットテストが成功する（36個）\n- すべてのインテグレーションテストが成功する（16個）\n- テストカバレッジが80%以上である（新規コードのみ）\n- 既存テストがすべて成功する（後方互換性の確認）\n\n---\n\n## 7. まとめ\n\n### 7.1. テストシナリオ統計\n\n| テスト種別 | シナリオ数 | カバレッジ |\n|-----------|----------|-----------|\n| **ユニットテスト** | 36個 | 新規メソッドすべて |\n| **インテグレーションテスト** | 16個 | エンドツーエンドフロー、統合ポイント |\n| **BDDテスト** | 0個 | 戦略に含まれない |\n| **合計** | 52個 | - |\n\n### 7.2. 主要な検証ポイント\n\n1. **差し戻し理由の伝達**（最重要）:\n   - メタデータへの記録（`rollback_context`）\n   - `ROLLBACK_REASON.md`の生成\n   - reviseプロンプトへの注入\n   - revise完了後のクリア\n\n2. **メタデータの整合性**:\n   - 対象フェーズの状態変更\n   - 後続フェーズのリセット\n   - 差し戻し履歴の記録\n\n3. **後方互換性**:\n   - 既存ワークフローへの影響なし\n   - rollback_contextが未設定の場合の動作\n\n4. **エラーハンドリング**:\n   - バリデーションエラー\n   - ファイル不在エラー\n   - OpenAI APIエラー\n\n5. **ユーザーインタラクション**:\n   - 確認プロンプト\n   - ドライランモード\n   - CI環境での自動スキップ\n\n### 7.3. 次のステップ\n\nPhase 3（テストシナリオ）が完了したら、以下の順序で進めます：\n\n1. **Phase 4（Implementation）**: 型定義、MetadataManager、BasePhase、ContentParser、rollbackコマンドを実装\n2. **Phase 5（Test Implementation）**: このテストシナリオに基づいてテストコードを実装\n3. **Phase 6（Testing）**: テストを実行し、品質ゲートをクリア\n4. **Phase 7（Documentation）**: README.md、CLAUDE.md、ARCHITECTURE.mdを更新\n5. **Phase 8（Report）**: 実装サマリーとPRボディを作成\n\n---\n\n**作成者**: AI Workflow Agent (Phase 3: Test Scenario)\n**レビュー対象**: Phase 3 品質ゲート（戦略準拠、正常系カバレッジ、異常系カバレッジ、期待結果の明確性）\n"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":73552,"cache_read_input_tokens":12202,"cache_creation":{"ephemeral_5m_input_tokens":73552,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"d7028e33-dcb2-4eb0-b0e1-b956c18e451f","uuid":"e4a4d862-0c41-42dd-a5c4-89e49d46396c"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_018bgU6TpQCykBgMA7GiDtwZ","type":"tool_result","content":"File created successfully at: /tmp/jenkins-d3e0067f/workspace/AI_Workflow/ai_workflow_orchestrator_develop/.ai-workflow/issue-90/03_test_scenario/output/test-scenario.md"}]},"parent_tool_use_id":null,"session_id":"d7028e33-dcb2-4eb0-b0e1-b956c18e451f","uuid":"48910d0b-0e43-4f72-9262-d48886749f02"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01Lxc7sFB49kEGnpErXjz5Zf","type":"message","role":"assistant","content":[{"type":"text","text":"I've successfully created a comprehensive test scenario document for Issue #90 (Phase Rollback Feature Implementation). Here's a summary:\n\n## Test Scenario Summary\n\n### Test Strategy: UNIT_INTEGRATION\n- **52 total test scenarios** covering all aspects of the rollback feature\n- **36 unit test scenarios** for individual methods and functions\n- **16 integration test scenarios** for end-to-end flows and component integration\n- **0 BDD scenarios** (not required by the test strategy)\n\n### Key Test Coverage Areas\n\n1. **Unit Tests (36 scenarios)**:\n   - **MetadataManager** (9): Rollback context management, phase updates, subsequent phase resets\n   - **BasePhase** (5): Prompt injection logic, rollback section generation\n   - **PhaseRunner** (2): Rollback context clearing after revise completion\n   - **ContentParser** (4): Blocker and suggestion extraction from review results\n   - **Rollback Command** (16): Validation, reason loading, confirmation prompts, document generation\n\n2. **Integration Tests (16 scenarios)**:\n   - **End-to-End Flows** (4): Complete rollback scenarios (Phase 6 → Phase 4), dry-run mode, execute step rollback\n   - **Blocker Information Extraction** (1): Automatic extraction from review results\n   - **Backward Compatibility** (2): No impact on existing workflows\n   - **Error Handling** (4): Invalid inputs, missing files, unstarted phases\n   - **Confirmation Prompts** (3): User interaction, force flag, CI environment\n   - **Rollback History** (2): History recording, dry-run exclusion\n\n### Most Important Test Focus\n\n**Rollback Reason Communication** (highest priority):\n- Recording in metadata (`rollback_context`)\n- Generating `ROLLBACK_REASON.md`\n- Injecting into revise prompts\n- Clearing after revise completion\n\n### Quality Gates ✅\n\nAll 4 required quality gates are met:\n- ✅ **Aligned with Phase 2 test strategy** (UNIT_INTEGRATION)\n- ✅ **Main success paths covered** (15 unit + 7 integration scenarios)\n- ✅ **Main failure paths covered** (15 unit + 5 integration scenarios)\n- ✅ **Clear expected results** (all scenarios have specific expectations and verification checklists)\n\nThe document is ready for review and provides a solid foundation for Phase 5 (Test Implementation)."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":99224,"cache_read_input_tokens":12202,"cache_creation":{"ephemeral_5m_input_tokens":99224,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"d7028e33-dcb2-4eb0-b0e1-b956c18e451f","uuid":"ff467a34-283b-4f76-9638-2516f5ba3333"}
{"type":"result","subtype":"success","is_error":false,"duration_ms":333366,"duration_api_ms":336880,"num_turns":8,"result":"I've successfully created a comprehensive test scenario document for Issue #90 (Phase Rollback Feature Implementation). Here's a summary:\n\n## Test Scenario Summary\n\n### Test Strategy: UNIT_INTEGRATION\n- **52 total test scenarios** covering all aspects of the rollback feature\n- **36 unit test scenarios** for individual methods and functions\n- **16 integration test scenarios** for end-to-end flows and component integration\n- **0 BDD scenarios** (not required by the test strategy)\n\n### Key Test Coverage Areas\n\n1. **Unit Tests (36 scenarios)**:\n   - **MetadataManager** (9): Rollback context management, phase updates, subsequent phase resets\n   - **BasePhase** (5): Prompt injection logic, rollback section generation\n   - **PhaseRunner** (2): Rollback context clearing after revise completion\n   - **ContentParser** (4): Blocker and suggestion extraction from review results\n   - **Rollback Command** (16): Validation, reason loading, confirmation prompts, document generation\n\n2. **Integration Tests (16 scenarios)**:\n   - **End-to-End Flows** (4): Complete rollback scenarios (Phase 6 → Phase 4), dry-run mode, execute step rollback\n   - **Blocker Information Extraction** (1): Automatic extraction from review results\n   - **Backward Compatibility** (2): No impact on existing workflows\n   - **Error Handling** (4): Invalid inputs, missing files, unstarted phases\n   - **Confirmation Prompts** (3): User interaction, force flag, CI environment\n   - **Rollback History** (2): History recording, dry-run exclusion\n\n### Most Important Test Focus\n\n**Rollback Reason Communication** (highest priority):\n- Recording in metadata (`rollback_context`)\n- Generating `ROLLBACK_REASON.md`\n- Injecting into revise prompts\n- Clearing after revise completion\n\n### Quality Gates ✅\n\nAll 4 required quality gates are met:\n- ✅ **Aligned with Phase 2 test strategy** (UNIT_INTEGRATION)\n- ✅ **Main success paths covered** (15 unit + 7 integration scenarios)\n- ✅ **Main failure paths covered** (15 unit + 5 integration scenarios)\n- ✅ **Clear expected results** (all scenarios have specific expectations and verification checklists)\n\nThe document is ready for review and provides a solid foundation for Phase 5 (Test Implementation).","session_id":"d7028e33-dcb2-4eb0-b0e1-b956c18e451f","total_cost_usd":1.0526222,"usage":{"input_tokens":7,"cache_creation_input_tokens":172776,"cache_read_input_tokens":24404,"output_tokens":26329,"server_tool_use":{"web_search_requests":0},"service_tier":"standard","cache_creation":{"ephemeral_1h_input_tokens":0,"ephemeral_5m_input_tokens":172776}},"modelUsage":{"claude-haiku-4-5-20251001":{"inputTokens":1050,"outputTokens":277,"cacheReadInputTokens":0,"cacheCreationInputTokens":0,"webSearchRequests":0,"costUSD":0.0024349999999999997,"contextWindow":200000},"claude-sonnet-4-5-20250929":{"inputTokens":7,"outputTokens":26329,"cacheReadInputTokens":24404,"cacheCreationInputTokens":172776,"webSearchRequests":0,"costUSD":1.0501871999999999,"contextWindow":200000}},"permission_denials":[],"uuid":"b747a249-0b85-4ee1-b787-80ba5f1259cc"}