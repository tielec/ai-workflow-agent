# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-90/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-90/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue概要

- **Issue番号**: #90
- **タイトル**: フェーズ差し戻し機能の実装（差し戻し理由の伝達を重視）
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/90
- **ラベル**: enhancement

### 本文

# フェーズ差し戻し機能の実装

## 背景・動機

Issue #49 での経験から、レビューで前フェーズの問題が判明した際に、フェーズを差し戻して再実行する必要があることが分かりました。

**現状の問題**:
- メタデータを手動で編集する必要があり、エラーが発生しやすい
- **最重要問題**: なぜ差し戻されたのか、何を修正すべきかという情報が伝達されない
- 後続フェーズのリセット漏れのリスク

**Issue #49 での具体例**:
- Phase 6 (testing) のレビューで「PhaseExecutionResult型にapprovedとfeedbackフィールドが不足している」という問題が判明
- この情報を Phase 4 (implementation) の revise ステップに伝えて修正してもらう必要がある
- **単にフェーズを戻すだけでは不十分** - エージェントは何を修正すべきか分からない

## 核心的な要件：差し戻し理由の伝達

このフェーズ差し戻し機能で最も重要なのは、**なぜ差し戻されたのか、何を修正すべきかを明確に伝達すること**です。

### 差し戻し理由の伝達フロー

```
Phase 6 (testing) - review
  ↓
レビュー結果: FAIL
  - ブロッカー1: 型定義の不整合
  - ブロッカー2: テスト成功率47%
  ↓
差し戻しコマンド実行
  --to-phase implementation
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md
  ↓
Phase 4 (implementation) のメタデータに差し戻しコンテキストを記録
  ↓
Phase 4 (implementation) - revise ステップ実行
  ↓
エージェントに渡すプロンプトに差し戻し理由を自動注入
  「Phase 6 から差し戻されました。理由: 型定義の不整合...」
  ↓
エージェントが差し戻し理由を理解して修正を実施
```

## 要件定義

### 1. 基本機能

**コマンド**: `rollback`

**必須引数**:
- `--issue <NUM>`: Issue番号
- `--to-phase <PHASE_NAME>`: 差し戻し先フェーズ
- `--reason <TEXT>` または `--reason-file <PATH>`: **差し戻しの理由（必須）**

**オプション引数**:
- `--to-step <STEP_NAME>`: 差し戻し先ステップ（デフォルト: revise）
- `--from-phase <PHASE_NAME>`: 差し戻し元フェーズ（自動検出可能だがオプションで明示）
- `--force`: 確認プロンプトをスキップ
- `--dry-run`: 変更内容のプレビュー

### 2. 差し戻し理由の伝達メカニズム（最重要）

#### 2.1. メタデータへの記録

`metadata.json` に新しいフィールド `rollback_context` を追加：

```json
{
  "phases": {
    "implementation": {
      "status": "in_progress",
      "current_step": "revise",
      "rollback_context": {
        "triggered_at": "2025-10-30T12:34:56.789Z",
        "from_phase": "testing",
        "from_step": "review",
        "reason": "Type definition missing: PhaseExecutionResult needs approved and feedback fields",
        "review_result": "@.ai-workflow/issue-49/06_testing/review/result.md",
        "details": {
          "blocker_count": 2,
          "suggestion_count": 4,
          "affected_tests": ["StepExecutor", "PhaseRunner", "BasePhase integration"]
        }
      }
    }
  }
}
```

#### 2.2. 差し戻し理由ドキュメントの生成

差し戻し時に、対象フェーズのディレクトリに `ROLLBACK_REASON.md` を自動生成：

**生成場所**: `.ai-workflow/issue-{NUM}/{phase}/ROLLBACK_REASON.md`

**内容例**:
```markdown
# Phase 4 (implementation) への差し戻し理由

**差し戻し元**: Phase 6 (testing) - review ステップ
**差し戻し日時**: 2025-10-30T12:34:56.789Z

## 差し戻しの理由

Type definition missing: PhaseExecutionResult needs approved and feedback fields

## 詳細情報

### ブロッカー（BLOCKER）

1. **型定義の不整合（Phase 4の実装不備）**
   - 問題: `PhaseExecutionResult`型に`approved`と`feedback`フィールドが定義されていない
   - 影響: StepExecutor、PhaseRunner、BasePhase統合テストがTypeScriptコンパイルエラーで全失敗
   - 対策: `src/types.ts`の`PhaseExecutionResult`型に`approved?: boolean`と`feedback?: string`を追加

2. **主要テストケースの成功率47%**
   - 問題: 新規テスト32ケース中17ケースが失敗
   - 影響: リファクタリングの品質が保証できない
   - 対策: Phase 4で型定義を修正後、Phase 6でテスト再実行

### 参照ドキュメント

- レビュー結果: @.ai-workflow/issue-49/06_testing/review/result.md
- テスト結果: @.ai-workflow/issue-49/06_testing/output/test-result.md

### 修正後の確認事項

1. `src/types.ts`の`PhaseExecutionResult`型に`approved`と`feedback`フィールドを追加
2. TypeScriptビルドが成功することを確認（`npm run build`）
3. Phase 6でテストを再実行し、成功率が80%以上になることを確認
```

#### 2.3. revise プロンプトへの理由注入

Phase を revise ステップから再開する際、エージェントに渡すプロンプトに差し戻し理由を自動的に含める：

**実装方法**: `BasePhase.loadPrompt()` を拡張

```typescript
protected async loadPrompt(step: StepName): Promise<string> {
  let prompt = // ... 既存のプロンプト読み込み処理

  // 差し戻しコンテキストがある場合、プロンプトの先頭に追加
  const rollbackContext = this.metadata.getRollbackContext(this.phaseName);
  if (rollbackContext && step === 'revise') {
    const rollbackSection = this.buildRollbackPromptSection(rollbackContext);
    prompt = rollbackSection + '\n\n' + prompt;
  }

  return prompt;
}
```

**注入されるプロンプトの例**:
```
# ⚠️ 差し戻し情報

**このフェーズは Phase testing から差し戻されました。**

## 差し戻しの理由:
Type definition missing: PhaseExecutionResult needs approved and feedback fields

## 詳細情報:
- ブロッカー数: 2
- 影響を受けるテスト: StepExecutor, PhaseRunner, BasePhase integration

## 参照すべきドキュメント:
- @.ai-workflow/issue-49/06_testing/review/result.md
- @.ai-workflow/issue-49/06_testing/output/test-result.md

---

# Phase implementation - 修正プロンプト

## タスク概要

上記の差し戻し理由を踏まえ、以下の問題を修正してください：
...
```

### 3. 差し戻し理由の入力方法

#### 方法1: ファイル指定（推奨）
```bash
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md
```
→ レビュー結果から自動的にブロッカー情報を抽出

#### 方法2: コマンドライン引数
```bash
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason "Type definition missing: PhaseExecutionResult needs approved and feedback fields"
```

#### 方法3: 対話的入力
```bash
node dist/index.js rollback --issue 49 --to-phase implementation --interactive
# プロンプトが表示される:
# "差し戻しの理由を入力してください（Ctrl+D で終了）:"
```

### 4. 差し戻し履歴の管理

`metadata.json` に `rollback_history` フィールドを追加（監査ログとして）：

```json
"rollback_history": [
  {
    "timestamp": "2025-10-30T12:34:56.789Z",
    "from_phase": "testing",
    "from_step": "review",
    "to_phase": "implementation",
    "to_step": "revise",
    "reason": "Type definition missing: PhaseExecutionResult needs approved and feedback fields",
    "triggered_by": "manual",
    "review_result_path": ".ai-workflow/issue-49/06_testing/review/result.md"
  }
]
```

### 5. 差し戻し時の動作

**対象フェーズの状態変更**:
- `status`: `"in_progress"` に変更
- `current_step`: 指定されたステップ（デフォルト: `"revise"`）
- `completed_steps`: 維持（execute, review は完了済み）
- `completed_at`: `null` に設定
- **`rollback_context`**: 差し戻し理由と詳細情報を記録（新規）

**後続フェーズのリセット**:
- 対象フェーズより後のすべてのフェーズを `"pending"` に戻す
- `started_at`, `completed_at`, `current_step`: `null`
- `completed_steps`: `[]`
- `retry_count`: `0`

**メタデータの更新**:
- `current_phase`: 差し戻し先フェーズに変更
- `updated_at`: 現在時刻

### 6. バリデーション

**前提条件チェック**:
- 対象フェーズが既に完了済み（`completed`）または進行中（`in_progress`）であること
- 差し戻し先ステップが有効（`execute`, `review`, `revise`）であること
- ワークフローメタデータが存在すること
- **差し戻し理由が提供されていること（必須）**

**警告メッセージ**:
- 後続フェーズの進捗が失われることをユーザーに通知
- 確認プロンプト（`--force` オプションでスキップ可能）

### 7. 自動差し戻し機能（将来的な拡張）

レビューステップで `FAIL` 判定が出た場合、自動的に差し戻しを提案：

```bash
Phase 6 (testing) - review completed: FAIL

レビュー結果によると、Phase 4 (implementation) に問題があります。

ブロッカー:
  1. 型定義の不整合（Phase 4の実装不備）
  2. 主要テストケースの成功率47%

Phase 4 (implementation) に差し戻しますか？ [Y/n]:
```

## 使用例

```bash
# レビュー結果ファイルを指定して差し戻し（推奨）
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md

# 理由を直接指定
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason "型定義にapprovedとfeedbackフィールドが不足しています。src/types.tsを修正してください。"

# ドライラン（どのような情報が伝達されるかプレビュー）
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md \
  --dry-run

# 対話的に理由を入力
node dist/index.js rollback --issue 49 --to-phase implementation --interactive

# execute ステップから再実行する場合
node dist/index.js rollback --issue 49 --to-phase implementation --to-step execute \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md
```

## 実装の優先度

### P0（必須）:
- [ ] **差し戻し理由の記録と伝達メカニズム**（最重要）
  - [ ] `rollback_context` フィールドの実装
  - [ ] `ROLLBACK_REASON.md` の自動生成
  - [ ] revise プロンプトへの理由注入（`BasePhase.loadPrompt()` 拡張）
  - [ ] `MetadataManager` への新規メソッド追加（`setRollbackContext`, `getRollbackContext`, `clearRollbackContext`）
- [ ] 基本的な差し戻し機能（metadata.json の更新）
- [ ] バリデーション
- [ ] `--reason` または `--reason-file` オプション（必須化）
- [ ] 確認プロンプト

### P1（重要）:
- [ ] レビュー結果からのブロッカー情報自動抽出（`ContentParser` 拡張）
- [ ] 対話的な理由入力モード（`--interactive`）
- [ ] ドライラン機能（`--dry-run`）
- [ ] ログ・履歴管理（`rollback_history`）
- [ ] revise 完了後の `rollback_context` クリア

### P2（あると良い）:
- [ ] 自動差し戻し提案機能（レビュー FAIL 時）
- [ ] 差し戻し履歴の表示コマンド（`node dist/index.js rollback-history --issue <NUM>`）
- [ ] 後続フェーズディレクトリの削除オプション（`--clean-subsequent-phases`）

## 技術的考慮事項

### 1. プロンプト生成の拡張

`BasePhase.loadPrompt()` を拡張し、`rollback_context` が存在する場合は自動的にプロンプトの先頭に差し戻し情報を追加：

```typescript
protected async loadPrompt(step: StepName): Promise<string> {
  let prompt = // ... 既存のプロンプト読み込み処理

  // 差し戻しコンテキストがある場合、プロンプトの先頭に追加
  const rollbackContext = this.metadata.getRollbackContext(this.phaseName);
  if (rollbackContext && step === 'revise') {
    const rollbackSection = this.buildRollbackPromptSection(rollbackContext);
    prompt = rollbackSection + '\n\n' + prompt;
  }

  return prompt;
}

protected buildRollbackPromptSection(context: RollbackContext): string {
  return `
# ⚠️ 差し戻し情報

**このフェーズは Phase ${context.from_phase} から差し戻されました。**

## 差し戻しの理由:
${context.reason}

## 詳細情報:
${context.details ? JSON.stringify(context.details, null, 2) : 'なし'}

## 参照すべきドキュメント:
- ${context.review_result}

---
`;
}
```

### 2. レビュー結果のパース

`ContentParser` を拡張して、レビュー結果からブロッカー情報を構造化データとして抽出：

```typescript
interface ReviewBlocker {
  title: string;
  problem: string;
  impact: string;
  solution: string;
}

class ContentParser {
  extractBlockers(reviewResult: string): ReviewBlocker[] {
    // Markdown パース → ブロッカーセクションを抽出
  }

  extractSuggestions(reviewResult: string): string[] {
    // Markdown パース → 改善提案セクションを抽出
  }
}
```

### 3. MetadataManager の拡張

新しいメソッドを追加：

```typescript
class MetadataManager {
  // 差し戻しコンテキストを設定
  setRollbackContext(phase: PhaseName, context: RollbackContext): void;

  // 差し戻しコンテキストを取得
  getRollbackContext(phase: PhaseName): RollbackContext | null;

  // 差し戻しコンテキストをクリア（revise 完了後）
  clearRollbackContext(phase: PhaseName): void;

  // 差し戻し履歴を追加
  addRollbackHistory(entry: RollbackHistoryEntry): void;
}
```

### 4. 新しいコマンドの実装

`src/commands/rollback.ts` を新規作成：

```typescript
export async function handleRollbackCommand(options: RollbackCommandOptions): Promise<void> {
  // 1. メタデータ読み込み
  // 2. バリデーション
  // 3. 差し戻し理由の読み込み（--reason または --reason-file）
  // 4. レビュー結果からブロッカー情報を抽出（--reason-file の場合）
  // 5. 確認プロンプト（--force でスキップ）
  // 6. 対象フェーズの状態変更（rollback_context 追加）
  // 7. 後続フェーズのリセット
  // 8. ROLLBACK_REASON.md の生成
  // 9. rollback_history への記録
  // 10. メタデータ保存
}
```

### 5. 既存コードへの影響

- `BasePhase.run()` で `rollback_context` を確認し、存在する場合はログに出力
- `BasePhase.loadPrompt()` の拡張（差し戻し情報の注入）
- revise ステップ完了後、`rollback_context` を自動クリア

### 6. 互換性

- 既存のワークフローに影響を与えない
- `rollback_context` および `rollback_history` フィールドはオプション（後方互換性）

## テスト戦略

### ユニットテスト
- [ ] `MetadataManager.setRollbackContext()` のテスト
- [ ] `MetadataManager.getRollbackContext()` のテスト
- [ ] `MetadataManager.clearRollbackContext()` のテスト
- [ ] `ContentParser.extractBlockers()` のテスト
- [ ] `BasePhase.buildRollbackPromptSection()` のテスト

### 統合テスト
- [ ] エンドツーエンドの差し戻しシナリオ（Phase 6 → Phase 4）
- [ ] 差し戻し理由がプロンプトに正しく注入されるかのテスト
- [ ] 後続フェーズが正しくリセットされるかのテスト
- [ ] `ROLLBACK_REASON.md` が正しく生成されるかのテスト

## 期待される効果

- **フェーズ差し戻しの作業時間を短縮**: 手動編集（5-10分）→ コマンド実行（10秒）
- **人的ミスの削減**: 編集ミスによるワークフロー破損の防止
- **差し戻し理由の可視化**: なぜ差し戻されたのか、何を修正すべきかが明確
- **エージェントの修正精度向上**: 差し戻し理由を理解して適切な修正を実施可能
- **差し戻し履歴の追跡**: どのフェーズで何回差し戻しが発生したか分析可能

## 参考

- Issue #49: Phase 6 (testing) で Phase 4 (implementation) の型定義不備が判明し、手動でメタデータを編集して差し戻しを実施
- 手動編集の際に変更した内容を参考に要件を定義
- **最重要教訓**: 単にフェーズを戻すだけでは不十分で、差し戻し理由の伝達が必須


### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-90/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
