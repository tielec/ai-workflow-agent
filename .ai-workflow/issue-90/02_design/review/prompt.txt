# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-90/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-90/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #90
- **タイトル**: フェーズ差し戻し機能の実装（差し戻し理由の伝達を重視）
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/90
- **ラベル**: enhancement

### 本文

# フェーズ差し戻し機能の実装

## 背景・動機

Issue #49 での経験から、レビューで前フェーズの問題が判明した際に、フェーズを差し戻して再実行する必要があることが分かりました。

**現状の問題**:
- メタデータを手動で編集する必要があり、エラーが発生しやすい
- **最重要問題**: なぜ差し戻されたのか、何を修正すべきかという情報が伝達されない
- 後続フェーズのリセット漏れのリスク

**Issue #49 での具体例**:
- Phase 6 (testing) のレビューで「PhaseExecutionResult型にapprovedとfeedbackフィールドが不足している」という問題が判明
- この情報を Phase 4 (implementation) の revise ステップに伝えて修正してもらう必要がある
- **単にフェーズを戻すだけでは不十分** - エージェントは何を修正すべきか分からない

## 核心的な要件：差し戻し理由の伝達

このフェーズ差し戻し機能で最も重要なのは、**なぜ差し戻されたのか、何を修正すべきかを明確に伝達すること**です。

### 差し戻し理由の伝達フロー

```
Phase 6 (testing) - review
  ↓
レビュー結果: FAIL
  - ブロッカー1: 型定義の不整合
  - ブロッカー2: テスト成功率47%
  ↓
差し戻しコマンド実行
  --to-phase implementation
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md
  ↓
Phase 4 (implementation) のメタデータに差し戻しコンテキストを記録
  ↓
Phase 4 (implementation) - revise ステップ実行
  ↓
エージェントに渡すプロンプトに差し戻し理由を自動注入
  「Phase 6 から差し戻されました。理由: 型定義の不整合...」
  ↓
エージェントが差し戻し理由を理解して修正を実施
```

## 要件定義

### 1. 基本機能

**コマンド**: `rollback`

**必須引数**:
- `--issue <NUM>`: Issue番号
- `--to-phase <PHASE_NAME>`: 差し戻し先フェーズ
- `--reason <TEXT>` または `--reason-file <PATH>`: **差し戻しの理由（必須）**

**オプション引数**:
- `--to-step <STEP_NAME>`: 差し戻し先ステップ（デフォルト: revise）
- `--from-phase <PHASE_NAME>`: 差し戻し元フェーズ（自動検出可能だがオプションで明示）
- `--force`: 確認プロンプトをスキップ
- `--dry-run`: 変更内容のプレビュー

### 2. 差し戻し理由の伝達メカニズム（最重要）

#### 2.1. メタデータへの記録

`metadata.json` に新しいフィールド `rollback_context` を追加：

```json
{
  "phases": {
    "implementation": {
      "status": "in_progress",
      "current_step": "revise",
      "rollback_context": {
        "triggered_at": "2025-10-30T12:34:56.789Z",
        "from_phase": "testing",
        "from_step": "review",
        "reason": "Type definition missing: PhaseExecutionResult needs approved and feedback fields",
        "review_result": "@.ai-workflow/issue-49/06_testing/review/result.md",
        "details": {
          "blocker_count": 2,
          "suggestion_count": 4,
          "affected_tests": ["StepExecutor", "PhaseRunner", "BasePhase integration"]
        }
      }
    }
  }
}
```

#### 2.2. 差し戻し理由ドキュメントの生成

差し戻し時に、対象フェーズのディレクトリに `ROLLBACK_REASON.md` を自動生成：

**生成場所**: `.ai-workflow/issue-{NUM}/{phase}/ROLLBACK_REASON.md`

**内容例**:
```markdown
# Phase 4 (implementation) への差し戻し理由

**差し戻し元**: Phase 6 (testing) - review ステップ
**差し戻し日時**: 2025-10-30T12:34:56.789Z

## 差し戻しの理由

Type definition missing: PhaseExecutionResult needs approved and feedback fields

## 詳細情報

### ブロッカー（BLOCKER）

1. **型定義の不整合（Phase 4の実装不備）**
   - 問題: `PhaseExecutionResult`型に`approved`と`feedback`フィールドが定義されていない
   - 影響: StepExecutor、PhaseRunner、BasePhase統合テストがTypeScriptコンパイルエラーで全失敗
   - 対策: `src/types.ts`の`PhaseExecutionResult`型に`approved?: boolean`と`feedback?: string`を追加

2. **主要テストケースの成功率47%**
   - 問題: 新規テスト32ケース中17ケースが失敗
   - 影響: リファクタリングの品質が保証できない
   - 対策: Phase 4で型定義を修正後、Phase 6でテスト再実行

### 参照ドキュメント

- レビュー結果: @.ai-workflow/issue-49/06_testing/review/result.md
- テスト結果: @.ai-workflow/issue-49/06_testing/output/test-result.md

### 修正後の確認事項

1. `src/types.ts`の`PhaseExecutionResult`型に`approved`と`feedback`フィールドを追加
2. TypeScriptビルドが成功することを確認（`npm run build`）
3. Phase 6でテストを再実行し、成功率が80%以上になることを確認
```

#### 2.3. revise プロンプトへの理由注入

Phase を revise ステップから再開する際、エージェントに渡すプロンプトに差し戻し理由を自動的に含める：

**実装方法**: `BasePhase.loadPrompt()` を拡張

```typescript
protected async loadPrompt(step: StepName): Promise<string> {
  let prompt = // ... 既存のプロンプト読み込み処理

  // 差し戻しコンテキストがある場合、プロンプトの先頭に追加
  const rollbackContext = this.metadata.getRollbackContext(this.phaseName);
  if (rollbackContext && step === 'revise') {
    const rollbackSection = this.buildRollbackPromptSection(rollbackContext);
    prompt = rollbackSection + '\n\n' + prompt;
  }

  return prompt;
}
```

**注入されるプロンプトの例**:
```
# ⚠️ 差し戻し情報

**このフェーズは Phase testing から差し戻されました。**

## 差し戻しの理由:
Type definition missing: PhaseExecutionResult needs approved and feedback fields

## 詳細情報:
- ブロッカー数: 2
- 影響を受けるテスト: StepExecutor, PhaseRunner, BasePhase integration

## 参照すべきドキュメント:
- @.ai-workflow/issue-49/06_testing/review/result.md
- @.ai-workflow/issue-49/06_testing/output/test-result.md

---

# Phase implementation - 修正プロンプト

## タスク概要

上記の差し戻し理由を踏まえ、以下の問題を修正してください：
...
```

### 3. 差し戻し理由の入力方法

#### 方法1: ファイル指定（推奨）
```bash
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md
```
→ レビュー結果から自動的にブロッカー情報を抽出

#### 方法2: コマンドライン引数
```bash
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason "Type definition missing: PhaseExecutionResult needs approved and feedback fields"
```

#### 方法3: 対話的入力
```bash
node dist/index.js rollback --issue 49 --to-phase implementation --interactive
# プロンプトが表示される:
# "差し戻しの理由を入力してください（Ctrl+D で終了）:"
```

### 4. 差し戻し履歴の管理

`metadata.json` に `rollback_history` フィールドを追加（監査ログとして）：

```json
"rollback_history": [
  {
    "timestamp": "2025-10-30T12:34:56.789Z",
    "from_phase": "testing",
    "from_step": "review",
    "to_phase": "implementation",
    "to_step": "revise",
    "reason": "Type definition missing: PhaseExecutionResult needs approved and feedback fields",
    "triggered_by": "manual",
    "review_result_path": ".ai-workflow/issue-49/06_testing/review/result.md"
  }
]
```

### 5. 差し戻し時の動作

**対象フェーズの状態変更**:
- `status`: `"in_progress"` に変更
- `current_step`: 指定されたステップ（デフォルト: `"revise"`）
- `completed_steps`: 維持（execute, review は完了済み）
- `completed_at`: `null` に設定
- **`rollback_context`**: 差し戻し理由と詳細情報を記録（新規）

**後続フェーズのリセット**:
- 対象フェーズより後のすべてのフェーズを `"pending"` に戻す
- `started_at`, `completed_at`, `current_step`: `null`
- `completed_steps`: `[]`
- `retry_count`: `0`

**メタデータの更新**:
- `current_phase`: 差し戻し先フェーズに変更
- `updated_at`: 現在時刻

### 6. バリデーション

**前提条件チェック**:
- 対象フェーズが既に完了済み（`completed`）または進行中（`in_progress`）であること
- 差し戻し先ステップが有効（`execute`, `review`, `revise`）であること
- ワークフローメタデータが存在すること
- **差し戻し理由が提供されていること（必須）**

**警告メッセージ**:
- 後続フェーズの進捗が失われることをユーザーに通知
- 確認プロンプト（`--force` オプションでスキップ可能）

### 7. 自動差し戻し機能（将来的な拡張）

レビューステップで `FAIL` 判定が出た場合、自動的に差し戻しを提案：

```bash
Phase 6 (testing) - review completed: FAIL

レビュー結果によると、Phase 4 (implementation) に問題があります。

ブロッカー:
  1. 型定義の不整合（Phase 4の実装不備）
  2. 主要テストケースの成功率47%

Phase 4 (implementation) に差し戻しますか？ [Y/n]:
```

## 使用例

```bash
# レビュー結果ファイルを指定して差し戻し（推奨）
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md

# 理由を直接指定
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason "型定義にapprovedとfeedbackフィールドが不足しています。src/types.tsを修正してください。"

# ドライラン（どのような情報が伝達されるかプレビュー）
node dist/index.js rollback --issue 49 --to-phase implementation \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md \
  --dry-run

# 対話的に理由を入力
node dist/index.js rollback --issue 49 --to-phase implementation --interactive

# execute ステップから再実行する場合
node dist/index.js rollback --issue 49 --to-phase implementation --to-step execute \
  --reason-file .ai-workflow/issue-49/06_testing/review/result.md
```

## 実装の優先度

### P0（必須）:
- [ ] **差し戻し理由の記録と伝達メカニズム**（最重要）
  - [ ] `rollback_context` フィールドの実装
  - [ ] `ROLLBACK_REASON.md` の自動生成
  - [ ] revise プロンプトへの理由注入（`BasePhase.loadPrompt()` 拡張）
  - [ ] `MetadataManager` への新規メソッド追加（`setRollbackContext`, `getRollbackContext`, `clearRollbackContext`）
- [ ] 基本的な差し戻し機能（metadata.json の更新）
- [ ] バリデーション
- [ ] `--reason` または `--reason-file` オプション（必須化）
- [ ] 確認プロンプト

### P1（重要）:
- [ ] レビュー結果からのブロッカー情報自動抽出（`ContentParser` 拡張）
- [ ] 対話的な理由入力モード（`--interactive`）
- [ ] ドライラン機能（`--dry-run`）
- [ ] ログ・履歴管理（`rollback_history`）
- [ ] revise 完了後の `rollback_context` クリア

### P2（あると良い）:
- [ ] 自動差し戻し提案機能（レビュー FAIL 時）
- [ ] 差し戻し履歴の表示コマンド（`node dist/index.js rollback-history --issue <NUM>`）
- [ ] 後続フェーズディレクトリの削除オプション（`--clean-subsequent-phases`）

## 技術的考慮事項

### 1. プロンプト生成の拡張

`BasePhase.loadPrompt()` を拡張し、`rollback_context` が存在する場合は自動的にプロンプトの先頭に差し戻し情報を追加：

```typescript
protected async loadPrompt(step: StepName): Promise<string> {
  let prompt = // ... 既存のプロンプト読み込み処理

  // 差し戻しコンテキストがある場合、プロンプトの先頭に追加
  const rollbackContext = this.metadata.getRollbackContext(this.phaseName);
  if (rollbackContext && step === 'revise') {
    const rollbackSection = this.buildRollbackPromptSection(rollbackContext);
    prompt = rollbackSection + '\n\n' + prompt;
  }

  return prompt;
}

protected buildRollbackPromptSection(context: RollbackContext): string {
  return `
# ⚠️ 差し戻し情報

**このフェーズは Phase ${context.from_phase} から差し戻されました。**

## 差し戻しの理由:
${context.reason}

## 詳細情報:
${context.details ? JSON.stringify(context.details, null, 2) : 'なし'}

## 参照すべきドキュメント:
- ${context.review_result}

---
`;
}
```

### 2. レビュー結果のパース

`ContentParser` を拡張して、レビュー結果からブロッカー情報を構造化データとして抽出：

```typescript
interface ReviewBlocker {
  title: string;
  problem: string;
  impact: string;
  solution: string;
}

class ContentParser {
  extractBlockers(reviewResult: string): ReviewBlocker[] {
    // Markdown パース → ブロッカーセクションを抽出
  }

  extractSuggestions(reviewResult: string): string[] {
    // Markdown パース → 改善提案セクションを抽出
  }
}
```

### 3. MetadataManager の拡張

新しいメソッドを追加：

```typescript
class MetadataManager {
  // 差し戻しコンテキストを設定
  setRollbackContext(phase: PhaseName, context: RollbackContext): void;

  // 差し戻しコンテキストを取得
  getRollbackContext(phase: PhaseName): RollbackContext | null;

  // 差し戻しコンテキストをクリア（revise 完了後）
  clearRollbackContext(phase: PhaseName): void;

  // 差し戻し履歴を追加
  addRollbackHistory(entry: RollbackHistoryEntry): void;
}
```

### 4. 新しいコマンドの実装

`src/commands/rollback.ts` を新規作成：

```typescript
export async function handleRollbackCommand(options: RollbackCommandOptions): Promise<void> {
  // 1. メタデータ読み込み
  // 2. バリデーション
  // 3. 差し戻し理由の読み込み（--reason または --reason-file）
  // 4. レビュー結果からブロッカー情報を抽出（--reason-file の場合）
  // 5. 確認プロンプト（--force でスキップ）
  // 6. 対象フェーズの状態変更（rollback_context 追加）
  // 7. 後続フェーズのリセット
  // 8. ROLLBACK_REASON.md の生成
  // 9. rollback_history への記録
  // 10. メタデータ保存
}
```

### 5. 既存コードへの影響

- `BasePhase.run()` で `rollback_context` を確認し、存在する場合はログに出力
- `BasePhase.loadPrompt()` の拡張（差し戻し情報の注入）
- revise ステップ完了後、`rollback_context` を自動クリア

### 6. 互換性

- 既存のワークフローに影響を与えない
- `rollback_context` および `rollback_history` フィールドはオプション（後方互換性）

## テスト戦略

### ユニットテスト
- [ ] `MetadataManager.setRollbackContext()` のテスト
- [ ] `MetadataManager.getRollbackContext()` のテスト
- [ ] `MetadataManager.clearRollbackContext()` のテスト
- [ ] `ContentParser.extractBlockers()` のテスト
- [ ] `BasePhase.buildRollbackPromptSection()` のテスト

### 統合テスト
- [ ] エンドツーエンドの差し戻しシナリオ（Phase 6 → Phase 4）
- [ ] 差し戻し理由がプロンプトに正しく注入されるかのテスト
- [ ] 後続フェーズが正しくリセットされるかのテスト
- [ ] `ROLLBACK_REASON.md` が正しく生成されるかのテスト

## 期待される効果

- **フェーズ差し戻しの作業時間を短縮**: 手動編集（5-10分）→ コマンド実行（10秒）
- **人的ミスの削減**: 編集ミスによるワークフロー破損の防止
- **差し戻し理由の可視化**: なぜ差し戻されたのか、何を修正すべきかが明確
- **エージェントの修正精度向上**: 差し戻し理由を理解して適切な修正を実施可能
- **差し戻し履歴の追跡**: どのフェーズで何回差し戻しが発生したか分析可能

## 参考

- Issue #49: Phase 6 (testing) で Phase 4 (implementation) の型定義不備が判明し、手動でメタデータを編集して差し戻しを実施
- 手動編集の際に変更した内容を参考に要件を定義
- **最重要教訓**: 単にフェーズを戻すだけでは不十分で、差し戻し理由の伝達が必須


## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-90/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 2:" または "## Phase 2:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 設計内容との照合

設計書（design.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載の設計項目が記述されているか
- Task記載の戦略判断が明記されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 2-2: テスト戦略の決定
  - 不足: テスト戦略の判断根拠が記載されていません
- [ ] Task 2-3: 影響範囲分析
  - 不足: 既存コードへの影響範囲が分析されていません

これらのタスクを完了してから再提出してください。
```

### ⚠️ 重要: Planning.mdの内容はレビュー結果に含めない

Planning.mdの読み込みと照合作業は必要ですが、**planning.mdの全文やPlanning Phaseのレビュー内容をレビュー結果に含めないでください**。

レビュー結果には以下のみを含めること:
- 設計書（design.md）に対する評価
- Planning.mdとの照合で発見した未完了タスク（FAIL時のみ）
- 設計書固有の改善提案

Planning Phaseのレビュー詳細やplanning.mdの内容全体は出力しないこと。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ⚠️ 最重要: 品質ゲートは絶対条件

**品質ゲート（5項目）は必須要件です。1つでも満たされていない場合、判定は自動的にFAILになります。**

- 品質ゲートは「最低限クリアすべき基準」であり、交渉の余地はありません
- 「80点で十分」の原則は、品質ゲートを満たした上での改善提案に適用されます
- 品質ゲートを満たさない状態で次フェーズに進むことは許されません

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

### 判定ルール

#### PASS（合格）

以下の**すべて**を満たす場合のみPASS：
- ✅ **5つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーが存在しない
- ✅ 軽微な改善提案のみ（または改善提案なし）

#### PASS_WITH_SUGGESTIONS（条件付き合格）

以下の**すべて**を満たす場合のみPASS_WITH_SUGGESTIONS：
- ✅ **5つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーは存在しない
- ✅ 次フェーズに進めるが、検討すべき改善点がある

#### FAIL（不合格）

以下の**いずれか1つでも**該当すればFAIL：
- ❌ **品質ゲート（5項目）のうち1つでも満たされていない**
- ❌ ブロッカーが1つ以上存在する

**重要: 品質ゲートは絶対条件であり、1つでも満たされていなければ自動的にFAILです。**

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

**⚠️ 重要: 各項目に対して明示的にPASS/FAILを判定してください。1つでもFAILがあれば最終判定は自動的にFAILです。**

- [x/  ] **実装戦略の判断根拠が明記されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **テスト戦略の判断根拠が明記されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **既存コードへの影響範囲が分析されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **変更が必要なファイルがリストアップされている**: **PASS / FAIL** - （判定理由）
- [x/  ] **設計が実装可能である**: **PASS / FAIL** - （判定理由）

**品質ゲート総合判定: PASS / FAIL**
- PASS: 上記5項目すべてがPASS
- FAIL: 上記5項目のうち1つでもFAIL

**品質ゲート判定がFAILの場合、最終判定は自動的にFAILになります。**

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

**重要**: 最終行に必ず上記フォーマットで判定を明記してください。
