# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-16/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #16
- **タイトル**: Gitコミットメッセージの改善（メタデータ初期化、ログクリーンアップ）
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/16
- **ラベル**: なし

### 本文

## 概要

現在、以下のGitコミットメッセージが不適切な状態になっています：

1. **メタデータ初期化時のコミットメッセージ**（最も優先度高）
2. **ログクリーンアップ時のコミットメッセージ**
3. **Planning Phase（Phase 0）のログが削除されない**
4. **Evaluation Phase完了後のログクリーンアップが未実装**

## 問題1: メタデータ初期化時のコミットメッセージが不適切

### 現在の動作

`src/main.ts:390` で、メタデータの初回コミット時に：

```typescript
const commitResult = await gitManager.commitPhaseOutput('planning', 'completed', 'N/A');
```

このため、コミットメッセージは以下のようになります：

```
[ai-workflow] Phase 1 (planning) - completed

Issue: #123
Phase: 1 (planning)
Status: completed
Review: N/A

Auto-generated by AI Workflow
```

**問題点**: ワークフローの初期化であって、Planning Phaseの完了ではない。

### 提案する改善内容

`src/core/git-manager.ts` に新しいメソッドを追加：

```typescript
/**
 * ワークフロー初期化用のコミットを作成
 */
public async commitWorkflowInit(
  issueNumber: number,
  branchName: string
): Promise<CommitResult> {
  const changedFiles = await this.getChangedFiles();
  const targetFiles = this.filterPhaseFiles(changedFiles, issueNumber.toString());

  if (targetFiles.length === 0) {
    console.warn('[WARNING] No files to commit for initialization');
    return {
      success: true,
      commit_hash: null,
      files_committed: [],
    };
  }

  await this.git.add(targetFiles);
  await this.ensureGitConfig();

  const message = this.createInitCommitMessage(issueNumber, branchName);

  try {
    const commitResponse = await this.git.commit(message, targetFiles, {
      '--no-verify': null,
    });

    console.info(`[INFO] Initialization commit created: ${commitResponse.commit ?? 'unknown'}`);

    return {
      success: true,
      commit_hash: commitResponse.commit ?? null,
      files_committed: targetFiles,
    };
  } catch (error) {
    console.error(`[ERROR] Initialization commit failed: ${(error as Error).message}`);
    return {
      success: false,
      commit_hash: null,
      files_committed: targetFiles,
      error: `Initialization commit failed: ${(error as Error).message}`,
    };
  }
}

/**
 * ワークフロー初期化用のコミットメッセージを生成
 */
private createInitCommitMessage(
  issueNumber: number,
  branchName: string
): string {
  return [
    `[ai-workflow] Initialize workflow for issue #${issueNumber}`,
    '',
    `Issue: #${issueNumber}`,
    `Action: Create workflow metadata and directory structure`,
    `Branch: ${branchName}`,
    '',
    'Auto-generated by AI Workflow',
  ].join('\n');
}
```

`src/main.ts:389-393` を修正：

```typescript
// 変更前:
const commitResult = await gitManager.commitPhaseOutput('planning', 'completed', 'N/A');

// 変更後:
const commitResult = await gitManager.commitWorkflowInit(issueNumber, branchName);
```

## 問題2: ログクリーンアップ時のコミットメッセージが不適切

### 現在の動作

Report Phase（Phase 8）完了時、ログクリーンアップのコミットメッセージは：

```
[ai-workflow] Phase 9 (report) - completed

Issue: #123
Phase: 9 (report)
Status: completed
Review: N/A

Auto-generated by AI Workflow
```

**問題点**: Phase番号が間違っている（8のはずが9）。また、ログクリーンアップの内容が明示されていない。

### 提案する改善内容

`src/core/git-manager.ts` に新しいメソッドを追加：

```typescript
/**
 * ログクリーンアップ用のコミットを作成
 */
public async commitCleanupLogs(
  issueNumber: number,
  phase: 'report' | 'evaluation'
): Promise<CommitResult> {
  const changedFiles = await this.getChangedFiles();
  const targetFiles = this.filterPhaseFiles(changedFiles, issueNumber.toString());

  if (targetFiles.length === 0) {
    console.warn('[WARNING] No files to commit for cleanup');
    return {
      success: true,
      commit_hash: null,
      files_committed: [],
    };
  }

  await this.git.add(targetFiles);
  await this.ensureGitConfig();

  const message = this.createCleanupCommitMessage(issueNumber, phase);

  try {
    const commitResponse = await this.git.commit(message, targetFiles, {
      '--no-verify': null,
    });

    console.info(`[INFO] Cleanup commit created: ${commitResponse.commit ?? 'unknown'}`);

    return {
      success: true,
      commit_hash: commitResponse.commit ?? null,
      files_committed: targetFiles,
    };
  } catch (error) {
    console.error(`[ERROR] Cleanup commit failed: ${(error as Error).message}`);
    return {
      success: false,
      commit_hash: null,
      files_committed: targetFiles,
      error: `Cleanup commit failed: ${(error as Error).message}`,
    };
  }
}

/**
 * ログクリーンアップ用のコミットメッセージを生成
 */
private createCleanupCommitMessage(
  issueNumber: number,
  phase: 'report' | 'evaluation'
): string {
  const phaseNumber = phase === 'report' ? 8 : 9;

  return [
    `[ai-workflow] Clean up workflow execution logs`,
    '',
    `Issue: #${issueNumber}`,
    `Phase: ${phaseNumber} (${phase})`,
    `Action: Remove agent execution logs (execute/review/revise directories)`,
    `Preserved: metadata.json, output/*.md`,
    '',
    'Auto-generated by AI Workflow',
  ].join('\n');
}
```

`src/phases/report.ts:30-34` を修正：

```typescript
// 変更前:
if (gitManager) {
  await this.autoCommitAndPush(gitManager, null);
  console.info('[INFO] Cleanup changes committed and pushed.');
}

// 変更後:
if (gitManager) {
  const commitResult = await gitManager.commitCleanupLogs(issueNumber, 'report');

  if (!commitResult.success) {
    throw new Error(`Git commit failed: ${commitResult.error ?? 'unknown error'}`);
  }

  const pushResult = await gitManager.pushToRemote();
  if (!pushResult.success) {
    throw new Error(`Git push failed: ${pushResult.error ?? 'unknown error'}`);
  }

  console.info('[INFO] Cleanup changes committed and pushed.');
}
```

## 問題3: Planning Phase（Phase 0）のログが削除されない

### 現在の動作

`src/phases/report.ts:323-333` で、`00_planning` が意図的に削除対象外になっています：

```typescript
// Planning フェーズ（00_planning）は削除対象外（Issue参照ソースとして保持）
const phaseDirectories = [
  '01_requirements',
  '02_design',
  '03_test_scenario',
  '04_implementation',
  '05_test_implementation',
  '06_testing',
  '07_documentation',
  '08_report',
];
```

**問題点**: `output/planning.md` は保持されるべきだが、`execute/`, `review/`, `revise/` ディレクトリは不要。

### 提案する改善内容

`src/phases/report.ts:324-333` を修正：

```typescript
// すべてのフェーズ（00-08）の実行ログを削除
const phaseDirectories = [
  '00_planning',  // ← 追加
  '01_requirements',
  '02_design',
  '03_test_scenario',
  '04_implementation',
  '05_test_implementation',
  '06_testing',
  '07_documentation',
  '08_report',
];
```

## 問題4: Evaluation Phase完了後のログクリーンアップが未実装

### 現在の動作

- Evaluation Phase完了後、`--cleanup-on-complete` オプションでワークフロー全体を削除できる
- しかし、ログだけを削除するオプションがない

### 提案する改善内容

`src/phases/evaluation.ts` に Report Phase と同様のログクリーンアップを実装：

```typescript
public async run(options: PhaseRunOptions = {}): Promise<boolean> {
  // 親クラスの run() を実行（execute + review cycle）
  const success = await super.run(options);

  // すべての処理が成功した場合のみ、ログをクリーンアップ
  if (success && !options.cleanupOnComplete) {
    const gitManager = options.gitManager ?? null;
    const issueNumber = parseInt(this.metadata.data.issue_number, 10);
    try {
      await this.cleanupWorkflowLogs(issueNumber);
      console.info('[INFO] Workflow logs cleaned up successfully.');

      // ログクリーンナップによる削除をコミット・プッシュ
      if (gitManager) {
        const commitResult = await gitManager.commitCleanupLogs(issueNumber, 'evaluation');

        if (!commitResult.success) {
          throw new Error(`Git commit failed: ${commitResult.error ?? 'unknown error'}`);
        }

        const pushResult = await gitManager.pushToRemote();
        if (!pushResult.success) {
          throw new Error(`Git push failed: ${pushResult.error ?? 'unknown error'}`);
        }

        console.info('[INFO] Cleanup changes committed and pushed.');
      }
    } catch (error) {
      const message = (error as Error).message ?? String(error);
      console.warn(`[WARNING] Failed to cleanup workflow logs: ${message}`);
    }
  }

  // オプションが指定されている場合は、ワークフロー全体を削除
  if (success && options.cleanupOnComplete) {
    const force = options.cleanupOnCompleteForce ?? false;
    await this.cleanupWorkflowArtifacts(force);
  }

  return success;
}

/**
 * ワークフローログをクリーンアップ
 */
private async cleanupWorkflowLogs(issueNumber: number): Promise<void> {
  const baseDir = path.resolve(this.metadata.workflowDir, '..', `issue-${issueNumber}`);

  // すべてのフェーズ（00-09）の実行ログを削除
  const phaseDirectories = [
    '00_planning',
    '01_requirements',
    '02_design',
    '03_test_scenario',
    '04_implementation',
    '05_test_implementation',
    '06_testing',
    '07_documentation',
    '08_report',
    '09_evaluation',
  ];

  const targetSubdirs = ['execute', 'review', 'revise'];

  let deletedCount = 0;
  let skippedCount = 0;

  for (const phaseDir of phaseDirectories) {
    const phasePath = path.join(baseDir, phaseDir);

    if (!fs.existsSync(phasePath)) {
      skippedCount++;
      continue;
    }

    for (const subdir of targetSubdirs) {
      const subdirPath = path.join(phasePath, subdir);

      if (fs.existsSync(subdirPath)) {
        try {
          fs.removeSync(subdirPath);
          deletedCount++;
          console.info(`[INFO] Deleted: ${path.relative(baseDir, subdirPath)}`);
        } catch (error) {
          const message = (error as Error).message ?? String(error);
          console.warn(`[WARNING] Failed to delete ${subdirPath}: ${message}`);
        }
      }
    }
  }

  console.info(
    `[INFO] Cleanup summary: ${deletedCount} directories deleted, ${skippedCount} phase directories skipped.`,
  );
}
```

## 期待される効果

1. **明確なコミット履歴**: 各操作の目的が一目でわかる
2. **リポジトリサイズの削減**: Planning Phaseの実行ログも削除されるため、さらに約5-10%のサイズ削減
3. **柔軟なクリーンアップ**: Evaluation Phase完了後に、ログだけ削除するか、全体を削除するか選択可能

## 実装の優先順位

1. **最優先**: メタデータ初期化時のコミットメッセージ修正
2. **高**: ログクリーンアップ時のコミットメッセージ修正
3. **高**: Planning（Phase 0）のログ削除
4. **中**: Evaluation Phaseでのログクリーンアップ

## 参考

- メタデータ初回コミット: `src/main.ts:389-393`
- Report Phase クリーンアップ: `src/phases/report.ts:312-367`
- コミットメッセージ生成: `src/core/git-manager.ts:245-277`
- Evaluation Phase 全体削除: `src/phases/base-phase.ts:977-1026`


## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-16/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
