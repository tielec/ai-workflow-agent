# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue概要

- **Issue番号**: #16
- **タイトル**: Gitコミットメッセージの改善（メタデータ初期化、ログクリーンアップ）
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/16
- **ラベル**: なし

### 本文

## 概要

現在、以下のGitコミットメッセージが不適切な状態になっています：

1. **メタデータ初期化時のコミットメッセージ**（最も優先度高）
2. **ログクリーンアップ時のコミットメッセージ**
3. **Planning Phase（Phase 0）のログが削除されない**
4. **Evaluation Phase完了後のログクリーンアップが未実装**

## 問題1: メタデータ初期化時のコミットメッセージが不適切

### 現在の動作

`src/main.ts:390` で、メタデータの初回コミット時に：

```typescript
const commitResult = await gitManager.commitPhaseOutput('planning', 'completed', 'N/A');
```

このため、コミットメッセージは以下のようになります：

```
[ai-workflow] Phase 1 (planning) - completed

Issue: #123
Phase: 1 (planning)
Status: completed
Review: N/A

Auto-generated by AI Workflow
```

**問題点**: ワークフローの初期化であって、Planning Phaseの完了ではない。

### 提案する改善内容

`src/core/git-manager.ts` に新しいメソッドを追加：

```typescript
/**
 * ワークフロー初期化用のコミットを作成
 */
public async commitWorkflowInit(
  issueNumber: number,
  branchName: string
): Promise<CommitResult> {
  const changedFiles = await this.getChangedFiles();
  const targetFiles = this.filterPhaseFiles(changedFiles, issueNumber.toString());

  if (targetFiles.length === 0) {
    console.warn('[WARNING] No files to commit for initialization');
    return {
      success: true,
      commit_hash: null,
      files_committed: [],
    };
  }

  await this.git.add(targetFiles);
  await this.ensureGitConfig();

  const message = this.createInitCommitMessage(issueNumber, branchName);

  try {
    const commitResponse = await this.git.commit(message, targetFiles, {
      '--no-verify': null,
    });

    console.info(`[INFO] Initialization commit created: ${commitResponse.commit ?? 'unknown'}`);

    return {
      success: true,
      commit_hash: commitResponse.commit ?? null,
      files_committed: targetFiles,
    };
  } catch (error) {
    console.error(`[ERROR] Initialization commit failed: ${(error as Error).message}`);
    return {
      success: false,
      commit_hash: null,
      files_committed: targetFiles,
      error: `Initialization commit failed: ${(error as Error).message}`,
    };
  }
}

/**
 * ワークフロー初期化用のコミットメッセージを生成
 */
private createInitCommitMessage(
  issueNumber: number,
  branchName: string
): string {
  return [
    `[ai-workflow] Initialize workflow for issue #${issueNumber}`,
    '',
    `Issue: #${issueNumber}`,
    `Action: Create workflow metadata and directory structure`,
    `Branch: ${branchName}`,
    '',
    'Auto-generated by AI Workflow',
  ].join('\n');
}
```

`src/main.ts:389-393` を修正：

```typescript
// 変更前:
const commitResult = await gitManager.commitPhaseOutput('planning', 'completed', 'N/A');

// 変更後:
const commitResult = await gitManager.commitWorkflowInit(issueNumber, branchName);
```

## 問題2: ログクリーンアップ時のコミットメッセージが不適切

### 現在の動作

Report Phase（Phase 8）完了時、ログクリーンアップのコミットメッセージは：

```
[ai-workflow] Phase 9 (report) - completed

Issue: #123
Phase: 9 (report)
Status: completed
Review: N/A

Auto-generated by AI Workflow
```

**問題点**: Phase番号が間違っている（8のはずが9）。また、ログクリーンアップの内容が明示されていない。

### 提案する改善内容

`src/core/git-manager.ts` に新しいメソッドを追加：

```typescript
/**
 * ログクリーンアップ用のコミットを作成
 */
public async commitCleanupLogs(
  issueNumber: number,
  phase: 'report' | 'evaluation'
): Promise<CommitResult> {
  const changedFiles = await this.getChangedFiles();
  const targetFiles = this.filterPhaseFiles(changedFiles, issueNumber.toString());

  if (targetFiles.length === 0) {
    console.warn('[WARNING] No files to commit for cleanup');
    return {
      success: true,
      commit_hash: null,
      files_committed: [],
    };
  }

  await this.git.add(targetFiles);
  await this.ensureGitConfig();

  const message = this.createCleanupCommitMessage(issueNumber, phase);

  try {
    const commitResponse = await this.git.commit(message, targetFiles, {
      '--no-verify': null,
    });

    console.info(`[INFO] Cleanup commit created: ${commitResponse.commit ?? 'unknown'}`);

    return {
      success: true,
      commit_hash: commitResponse.commit ?? null,
      files_committed: targetFiles,
    };
  } catch (error) {
    console.error(`[ERROR] Cleanup commit failed: ${(error as Error).message}`);
    return {
      success: false,
      commit_hash: null,
      files_committed: targetFiles,
      error: `Cleanup commit failed: ${(error as Error).message}`,
    };
  }
}

/**
 * ログクリーンアップ用のコミットメッセージを生成
 */
private createCleanupCommitMessage(
  issueNumber: number,
  phase: 'report' | 'evaluation'
): string {
  const phaseNumber = phase === 'report' ? 8 : 9;

  return [
    `[ai-workflow] Clean up workflow execution logs`,
    '',
    `Issue: #${issueNumber}`,
    `Phase: ${phaseNumber} (${phase})`,
    `Action: Remove agent execution logs (execute/review/revise directories)`,
    `Preserved: metadata.json, output/*.md`,
    '',
    'Auto-generated by AI Workflow',
  ].join('\n');
}
```

`src/phases/report.ts:30-34` を修正：

```typescript
// 変更前:
if (gitManager) {
  await this.autoCommitAndPush(gitManager, null);
  console.info('[INFO] Cleanup changes committed and pushed.');
}

// 変更後:
if (gitManager) {
  const commitResult = await gitManager.commitCleanupLogs(issueNumber, 'report');

  if (!commitResult.success) {
    throw new Error(`Git commit failed: ${commitResult.error ?? 'unknown error'}`);
  }

  const pushResult = await gitManager.pushToRemote();
  if (!pushResult.success) {
    throw new Error(`Git push failed: ${pushResult.error ?? 'unknown error'}`);
  }

  console.info('[INFO] Cleanup changes committed and pushed.');
}
```

## 問題3: Planning Phase（Phase 0）のログが削除されない

### 現在の動作

`src/phases/report.ts:323-333` で、`00_planning` が意図的に削除対象外になっています：

```typescript
// Planning フェーズ（00_planning）は削除対象外（Issue参照ソースとして保持）
const phaseDirectories = [
  '01_requirements',
  '02_design',
  '03_test_scenario',
  '04_implementation',
  '05_test_implementation',
  '06_testing',
  '07_documentation',
  '08_report',
];
```

**問題点**: `output/planning.md` は保持されるべきだが、`execute/`, `review/`, `revise/` ディレクトリは不要。

### 提案する改善内容

`src/phases/report.ts:324-333` を修正：

```typescript
// すべてのフェーズ（00-08）の実行ログを削除
const phaseDirectories = [
  '00_planning',  // ← 追加
  '01_requirements',
  '02_design',
  '03_test_scenario',
  '04_implementation',
  '05_test_implementation',
  '06_testing',
  '07_documentation',
  '08_report',
];
```

## 問題4: Evaluation Phase完了後のログクリーンアップが未実装

### 現在の動作

- Evaluation Phase完了後、`--cleanup-on-complete` オプションでワークフロー全体を削除できる
- しかし、ログだけを削除するオプションがない

### 提案する改善内容

`src/phases/evaluation.ts` に Report Phase と同様のログクリーンアップを実装：

```typescript
public async run(options: PhaseRunOptions = {}): Promise<boolean> {
  // 親クラスの run() を実行（execute + review cycle）
  const success = await super.run(options);

  // すべての処理が成功した場合のみ、ログをクリーンアップ
  if (success && !options.cleanupOnComplete) {
    const gitManager = options.gitManager ?? null;
    const issueNumber = parseInt(this.metadata.data.issue_number, 10);
    try {
      await this.cleanupWorkflowLogs(issueNumber);
      console.info('[INFO] Workflow logs cleaned up successfully.');

      // ログクリーンナップによる削除をコミット・プッシュ
      if (gitManager) {
        const commitResult = await gitManager.commitCleanupLogs(issueNumber, 'evaluation');

        if (!commitResult.success) {
          throw new Error(`Git commit failed: ${commitResult.error ?? 'unknown error'}`);
        }

        const pushResult = await gitManager.pushToRemote();
        if (!pushResult.success) {
          throw new Error(`Git push failed: ${pushResult.error ?? 'unknown error'}`);
        }

        console.info('[INFO] Cleanup changes committed and pushed.');
      }
    } catch (error) {
      const message = (error as Error).message ?? String(error);
      console.warn(`[WARNING] Failed to cleanup workflow logs: ${message}`);
    }
  }

  // オプションが指定されている場合は、ワークフロー全体を削除
  if (success && options.cleanupOnComplete) {
    const force = options.cleanupOnCompleteForce ?? false;
    await this.cleanupWorkflowArtifacts(force);
  }

  return success;
}

/**
 * ワークフローログをクリーンアップ
 */
private async cleanupWorkflowLogs(issueNumber: number): Promise<void> {
  const baseDir = path.resolve(this.metadata.workflowDir, '..', `issue-${issueNumber}`);

  // すべてのフェーズ（00-09）の実行ログを削除
  const phaseDirectories = [
    '00_planning',
    '01_requirements',
    '02_design',
    '03_test_scenario',
    '04_implementation',
    '05_test_implementation',
    '06_testing',
    '07_documentation',
    '08_report',
    '09_evaluation',
  ];

  const targetSubdirs = ['execute', 'review', 'revise'];

  let deletedCount = 0;
  let skippedCount = 0;

  for (const phaseDir of phaseDirectories) {
    const phasePath = path.join(baseDir, phaseDir);

    if (!fs.existsSync(phasePath)) {
      skippedCount++;
      continue;
    }

    for (const subdir of targetSubdirs) {
      const subdirPath = path.join(phasePath, subdir);

      if (fs.existsSync(subdirPath)) {
        try {
          fs.removeSync(subdirPath);
          deletedCount++;
          console.info(`[INFO] Deleted: ${path.relative(baseDir, subdirPath)}`);
        } catch (error) {
          const message = (error as Error).message ?? String(error);
          console.warn(`[WARNING] Failed to delete ${subdirPath}: ${message}`);
        }
      }
    }
  }

  console.info(
    `[INFO] Cleanup summary: ${deletedCount} directories deleted, ${skippedCount} phase directories skipped.`,
  );
}
```

## 期待される効果

1. **明確なコミット履歴**: 各操作の目的が一目でわかる
2. **リポジトリサイズの削減**: Planning Phaseの実行ログも削除されるため、さらに約5-10%のサイズ削減
3. **柔軟なクリーンアップ**: Evaluation Phase完了後に、ログだけ削除するか、全体を削除するか選択可能

## 実装の優先順位

1. **最優先**: メタデータ初期化時のコミットメッセージ修正
2. **高**: ログクリーンアップ時のコミットメッセージ修正
3. **高**: Planning（Phase 0）のログ削除
4. **中**: Evaluation Phaseでのログクリーンアップ

## 参考

- メタデータ初回コミット: `src/main.ts:389-393`
- Report Phase クリーンアップ: `src/phases/report.ts:312-367`
- コミットメッセージ生成: `src/core/git-manager.ts:245-277`
- Evaluation Phase 全体削除: `src/phases/base-phase.ts:977-1026`


## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

## ⚠️ 重要: チェックリスト標準フォーマット（必須）

各フェーズのタスクは、**必ずチェックリスト形式**で記述してください。このチェックリストは、Review Phaseで完了判定に使用されます。

### 標準フォーマット

```markdown
### Phase X: [フェーズ名] (見積もり: X~Yh)

- [ ] Task X-1: [タスク名] (見積もり時間)
  - [サブタスク1]
  - [サブタスク2]
- [ ] Task X-2: [タスク名] (見積もり時間)
  - [サブタスク1]
```

**重要**: このチェックリストは、Review Phaseで完了判定に使用されます。各タスクは明確で検証可能な内容にしてください。

**良い例**:
```
- [ ] Task 4-1: CLI層の分離 (3~5h)
  - cli/commands.py の作成
  - main.pyからCLIロジックを抽出
```

**悪い例**:
```
- [ ] リファクタリングを実施
```
（検証不可能なため不適切）

### 各フェーズのタスクリスト

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)

- [ ] Task 1-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2
- [ ] Task 1-2: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 2: 設計 (見積もり: Xh)

- [ ] Task 2-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 3: テストシナリオ (見積もり: Xh)

- [ ] Task 3-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 4: 実装 (見積もり: Xh)

- [ ] Task 4-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 5: テストコード実装 (見積もり: Xh)

- [ ] Task 5-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 6: テスト実行 (見積もり: Xh)

- [ ] Task 6-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 7: ドキュメント (見積もり: Xh)

- [ ] Task 7-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 8: レポート (見積もり: Xh)

- [ ] Task 8-1: [タスク名] (見積もり時間)
  - サブタスク1

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能
- **検証可能**: Review Phaseで「完了したか」を客観的に判断できる内容

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-16/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
