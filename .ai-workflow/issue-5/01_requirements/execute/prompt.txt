# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-5/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #5
- **タイトル**: Evaluation Phase: 評価レポートファイルが作成されない問題の調査と修正
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/5
- **ラベル**: bug

### 本文

## 問題の症状

Evaluation Phase (Phase 9) の実行時に、エージェントが評価レポートの内容を生成するものの、ファイルとして保存されない問題が発生しています。

### エラーメッセージ

```
[ERROR] Phase evaluation: Execute failed: evaluation_report.md が見つかりません: /tmp/jenkins-xxx/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-2/09_evaluation/output/evaluation_report.md
[ERROR] Workflow failed at phase: evaluation
[ERROR] Reason: Phase evaluation failed.
```

## 観察された動作

### エージェントログ（.ai-workflow/issue-2/09_evaluation/execute/agent_log.md）の分析

1. **Turn 2**: エージェントが詳細な評価レポートを生成（345行分）
   - エグゼクティブサマリー
   - 7つの評価基準すべての評価
   - DECISION: PASS
   - 推奨事項
   - 結論

2. **Turn 3**: status: success で終了

3. **問題**: **Write ツールが一度も呼び出されていない**
   - エージェントは評価内容を生成したが、ファイルとして保存していない
   - プロンプトの指示（execute.txt:152行目）を読み飛ばしている可能性

## 他のフェーズとの比較

### 成功しているフェーズ

以下のフェーズは同様の「保存してください」指示で正常に動作：
- Planning Phase
- Requirements Phase
- Design Phase
- Test Scenario Phase
- Implementation Phase
- Test Implementation Phase
- Testing Phase
- Documentation Phase
- Report Phase

### 指示の類似性

全フェーズで類似の保存指示を使用：
```
このログを .ai-workflow/issue-5/XX_phase/output/filename.md として保存してください。
```

Evaluation Phase のみ：
```
**重要**: 評価レポートは必ず .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md として保存してください。
```

## 考えられる根本原因

### 1. プロンプト構造の問題

**仮説**: Evaluation Phase のプロンプトが長すぎる/複雑すぎるため、エージェントがファイル保存の指示を読み飛ばしている

**検証項目**:
- [ ] 各フェーズのプロンプトの長さを比較
- [ ] 「保存」指示の位置を比較（プロンプトの何行目にあるか）
- [ ] プロンプトの構造（セクション数、指示の明確さ）を比較

### 2. Evaluation Phase 特有の動作パターン

**仮説**: 評価内容の生成に集中しすぎて、ファイル保存を忘れている

**検証項目**:
- [ ] 他のフェーズのエージェントログと比較（Turnごとの動作）
- [ ] maxTurns 設定の確認（evaluation.ts:108で maxTurns: 50）
- [ ] 他のフェーズの maxTurns 設定と比較

### 3. プロンプトの指示の弱さ

**仮説**: 「保存してください」という指示が弱すぎる

**検証項目**:
- [ ] 他のフェーズでファイル保存に失敗した事例があるか確認
- [ ] プロンプトに「Write ツールを使って」という明示的な指示がない
- [ ] 保存が「必須ステップ」であることが明確でない

### 4. 評価レポートの出力形式

**仮説**: エージェントが「レポートを表示した = 完了」と誤認識

**検証項目**:
- [ ] エージェントが評価レポートを Markdown で出力している（agent_log.md に記録）
- [ ] エージェントが「ファイル保存」と「内容表示」を混同している可能性
- [ ] プロンプトで「表示ではなく保存」を明確にする必要があるか

## 再現性の確認

### 必要な検証

- [ ] Evaluation Phase を複数回実行して再現性を確認
- [ ] 他のワークフロー（Issue #2以外）でも同じ問題が発生するか確認
- [ ] 同じプロンプトで Claude Code を直接実行した場合の動作を確認

## 暫定対処法（案）

### Option 1: プロンプトの明示的な修正

プロンプトの最後に明確なステップを追加：

```markdown
## 最終ステップ - 評価レポートの保存（必須）

評価が完了したら、以下のステップを**必ず**実行してください：

1. Write ツールを使用
2. 上記の評価レポート全文を保存
3. 保存先: .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md

**重要**: このファイルが存在しない場合、フェーズは失敗します。保存を忘れないでください。
```

### Option 2: BasePhase のファイル存在チェック強化

evaluation.ts:110-118 のファイル存在チェックは正しいが、エージェント実行後に即座にチェックしている。エージェントに「保存確認」を促す仕組みが必要かもしれない。

### Option 3: エージェントの maxTurns 調整

maxTurns: 50 が多すぎる可能性。他のフェーズと比較して適切な値に調整。

## 実装タスク

1. **調査フェーズ**:
   - [ ] 各フェーズのプロンプトを比較分析
   - [ ] 各フェーズのエージェントログを比較（成功例）
   - [ ] maxTurns 設定を全フェーズで確認
   - [ ] Evaluation Phase を複数回実行して再現性確認

2. **修正フェーズ**:
   - [ ] プロンプトを修正（調査結果に基づいて）
   - [ ] 必要に応じて evaluation.ts のコードを修正
   - [ ] テストケースを追加（ファイル保存の検証）

3. **検証フェーズ**:
   - [ ] 修正後のプロンプトで Evaluation Phase を実行
   - [ ] evaluation_report.md が正しく作成されることを確認
   - [ ] 他のフェーズに影響がないことを確認

## 関連ファイル

- `src/phases/evaluation.ts`: Evaluation Phase の実装（110行目でファイル存在チェック）
- `src/prompts/evaluation/execute.txt`: Evaluation Phase のプロンプト（152行目に保存指示）
- `.ai-workflow/issue-2/09_evaluation/execute/agent_log.md`: 失敗したエージェントログ

## 期待される成果

1. 根本原因の特定
2. Evaluation Phase で evaluation_report.md が確実に作成される
3. 他のフェーズに影響を与えない修正
4. 再発防止策（プロンプトのベストプラクティス）

## 優先度

**High** - Evaluation Phase が完了しないと、ワークフロー全体が失敗する

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-{issue_number}/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
