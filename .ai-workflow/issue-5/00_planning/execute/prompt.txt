# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue概要

- **Issue番号**: #5
- **タイトル**: Evaluation Phase: 評価レポートファイルが作成されない問題の調査と修正
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/5
- **ラベル**: bug

### 本文

## 問題の症状

Evaluation Phase (Phase 9) の実行時に、エージェントが評価レポートの内容を生成するものの、ファイルとして保存されない問題が発生しています。

### エラーメッセージ

```
[ERROR] Phase evaluation: Execute failed: evaluation_report.md が見つかりません: /tmp/jenkins-xxx/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-2/09_evaluation/output/evaluation_report.md
[ERROR] Workflow failed at phase: evaluation
[ERROR] Reason: Phase evaluation failed.
```

## 観察された動作

### エージェントログ（.ai-workflow/issue-2/09_evaluation/execute/agent_log.md）の分析

1. **Turn 2**: エージェントが詳細な評価レポートを生成（345行分）
   - エグゼクティブサマリー
   - 7つの評価基準すべての評価
   - DECISION: PASS
   - 推奨事項
   - 結論

2. **Turn 3**: status: success で終了

3. **問題**: **Write ツールが一度も呼び出されていない**
   - エージェントは評価内容を生成したが、ファイルとして保存していない
   - プロンプトの指示（execute.txt:152行目）を読み飛ばしている可能性

## 他のフェーズとの比較

### 成功しているフェーズ

以下のフェーズは同様の「保存してください」指示で正常に動作：
- Planning Phase
- Requirements Phase
- Design Phase
- Test Scenario Phase
- Implementation Phase
- Test Implementation Phase
- Testing Phase
- Documentation Phase
- Report Phase

### 指示の類似性

全フェーズで類似の保存指示を使用：
```
このログを .ai-workflow/issue-5/XX_phase/output/filename.md として保存してください。
```

Evaluation Phase のみ：
```
**重要**: 評価レポートは必ず .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md として保存してください。
```

## 考えられる根本原因

### 1. プロンプト構造の問題

**仮説**: Evaluation Phase のプロンプトが長すぎる/複雑すぎるため、エージェントがファイル保存の指示を読み飛ばしている

**検証項目**:
- [ ] 各フェーズのプロンプトの長さを比較
- [ ] 「保存」指示の位置を比較（プロンプトの何行目にあるか）
- [ ] プロンプトの構造（セクション数、指示の明確さ）を比較

### 2. Evaluation Phase 特有の動作パターン

**仮説**: 評価内容の生成に集中しすぎて、ファイル保存を忘れている

**検証項目**:
- [ ] 他のフェーズのエージェントログと比較（Turnごとの動作）
- [ ] maxTurns 設定の確認（evaluation.ts:108で maxTurns: 50）
- [ ] 他のフェーズの maxTurns 設定と比較

### 3. プロンプトの指示の弱さ

**仮説**: 「保存してください」という指示が弱すぎる

**検証項目**:
- [ ] 他のフェーズでファイル保存に失敗した事例があるか確認
- [ ] プロンプトに「Write ツールを使って」という明示的な指示がない
- [ ] 保存が「必須ステップ」であることが明確でない

### 4. 評価レポートの出力形式

**仮説**: エージェントが「レポートを表示した = 完了」と誤認識

**検証項目**:
- [ ] エージェントが評価レポートを Markdown で出力している（agent_log.md に記録）
- [ ] エージェントが「ファイル保存」と「内容表示」を混同している可能性
- [ ] プロンプトで「表示ではなく保存」を明確にする必要があるか

## 再現性の確認

### 必要な検証

- [ ] Evaluation Phase を複数回実行して再現性を確認
- [ ] 他のワークフロー（Issue #2以外）でも同じ問題が発生するか確認
- [ ] 同じプロンプトで Claude Code を直接実行した場合の動作を確認

## 暫定対処法（案）

### Option 1: プロンプトの明示的な修正

プロンプトの最後に明確なステップを追加：

```markdown
## 最終ステップ - 評価レポートの保存（必須）

評価が完了したら、以下のステップを**必ず**実行してください：

1. Write ツールを使用
2. 上記の評価レポート全文を保存
3. 保存先: .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md

**重要**: このファイルが存在しない場合、フェーズは失敗します。保存を忘れないでください。
```

### Option 2: BasePhase のファイル存在チェック強化

evaluation.ts:110-118 のファイル存在チェックは正しいが、エージェント実行後に即座にチェックしている。エージェントに「保存確認」を促す仕組みが必要かもしれない。

### Option 3: エージェントの maxTurns 調整

maxTurns: 50 が多すぎる可能性。他のフェーズと比較して適切な値に調整。

## 実装タスク

1. **調査フェーズ**:
   - [ ] 各フェーズのプロンプトを比較分析
   - [ ] 各フェーズのエージェントログを比較（成功例）
   - [ ] maxTurns 設定を全フェーズで確認
   - [ ] Evaluation Phase を複数回実行して再現性確認

2. **修正フェーズ**:
   - [ ] プロンプトを修正（調査結果に基づいて）
   - [ ] 必要に応じて evaluation.ts のコードを修正
   - [ ] テストケースを追加（ファイル保存の検証）

3. **検証フェーズ**:
   - [ ] 修正後のプロンプトで Evaluation Phase を実行
   - [ ] evaluation_report.md が正しく作成されることを確認
   - [ ] 他のフェーズに影響がないことを確認

## 関連ファイル

- `src/phases/evaluation.ts`: Evaluation Phase の実装（110行目でファイル存在チェック）
- `src/prompts/evaluation/execute.txt`: Evaluation Phase のプロンプト（152行目に保存指示）
- `.ai-workflow/issue-2/09_evaluation/execute/agent_log.md`: 失敗したエージェントログ

## 期待される成果

1. 根本原因の特定
2. Evaluation Phase で evaluation_report.md が確実に作成される
3. 他のフェーズに影響を与えない修正
4. 再発防止策（プロンプトのベストプラクティス）

## 優先度

**High** - Evaluation Phase が完了しないと、ワークフロー全体が失敗する

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

## ⚠️ 重要: チェックリスト標準フォーマット（必須）

各フェーズのタスクは、**必ずチェックリスト形式**で記述してください。このチェックリストは、Review Phaseで完了判定に使用されます。

### 標準フォーマット

```markdown
### Phase X: [フェーズ名] (見積もり: X~Yh)

- [ ] Task X-1: [タスク名] (見積もり時間)
  - [サブタスク1]
  - [サブタスク2]
- [ ] Task X-2: [タスク名] (見積もり時間)
  - [サブタスク1]
```

**重要**: このチェックリストは、Review Phaseで完了判定に使用されます。各タスクは明確で検証可能な内容にしてください。

**良い例**:
```
- [ ] Task 4-1: CLI層の分離 (3~5h)
  - cli/commands.py の作成
  - main.pyからCLIロジックを抽出
```

**悪い例**:
```
- [ ] リファクタリングを実施
```
（検証不可能なため不適切）

### 各フェーズのタスクリスト

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)

- [ ] Task 1-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2
- [ ] Task 1-2: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 2: 設計 (見積もり: Xh)

- [ ] Task 2-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 3: テストシナリオ (見積もり: Xh)

- [ ] Task 3-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 4: 実装 (見積もり: Xh)

- [ ] Task 4-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 5: テストコード実装 (見積もり: Xh)

- [ ] Task 5-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 6: テスト実行 (見積もり: Xh)

- [ ] Task 6-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 7: ドキュメント (見積もり: Xh)

- [ ] Task 7-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 8: レポート (見積もり: Xh)

- [ ] Task 8-1: [タスク名] (見積もり時間)
  - サブタスク1

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能
- **検証可能**: Review Phaseで「完了したか」を客観的に判断できる内容

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-{issue_number}/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
