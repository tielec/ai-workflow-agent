# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-5/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-5/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue概要

- **Issue番号**: #5
- **タイトル**: Evaluation Phase: 評価レポートファイルが作成されない問題の調査と修正
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/5
- **ラベル**: bug

### 本文

## 問題の症状

Evaluation Phase (Phase 9) の実行時に、エージェントが評価レポートの内容を生成するものの、ファイルとして保存されない問題が発生しています。

### エラーメッセージ

```
[ERROR] Phase evaluation: Execute failed: evaluation_report.md が見つかりません: /tmp/jenkins-xxx/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-2/09_evaluation/output/evaluation_report.md
[ERROR] Workflow failed at phase: evaluation
[ERROR] Reason: Phase evaluation failed.
```

## 観察された動作

### エージェントログ（.ai-workflow/issue-2/09_evaluation/execute/agent_log.md）の分析

1. **Turn 2**: エージェントが詳細な評価レポートを生成（345行分）
   - エグゼクティブサマリー
   - 7つの評価基準すべての評価
   - DECISION: PASS
   - 推奨事項
   - 結論

2. **Turn 3**: status: success で終了

3. **問題**: **Write ツールが一度も呼び出されていない**
   - エージェントは評価内容を生成したが、ファイルとして保存していない
   - プロンプトの指示（execute.txt:152行目）を読み飛ばしている可能性

## 他のフェーズとの比較

### 成功しているフェーズ

以下のフェーズは同様の「保存してください」指示で正常に動作：
- Planning Phase
- Requirements Phase
- Design Phase
- Test Scenario Phase
- Implementation Phase
- Test Implementation Phase
- Testing Phase
- Documentation Phase
- Report Phase

### 指示の類似性

全フェーズで類似の保存指示を使用：
```
このログを .ai-workflow/issue-5/XX_phase/output/filename.md として保存してください。
```

Evaluation Phase のみ：
```
**重要**: 評価レポートは必ず .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md として保存してください。
```

## 考えられる根本原因

### 1. プロンプト構造の問題

**仮説**: Evaluation Phase のプロンプトが長すぎる/複雑すぎるため、エージェントがファイル保存の指示を読み飛ばしている

**検証項目**:
- [ ] 各フェーズのプロンプトの長さを比較
- [ ] 「保存」指示の位置を比較（プロンプトの何行目にあるか）
- [ ] プロンプトの構造（セクション数、指示の明確さ）を比較

### 2. Evaluation Phase 特有の動作パターン

**仮説**: 評価内容の生成に集中しすぎて、ファイル保存を忘れている

**検証項目**:
- [ ] 他のフェーズのエージェントログと比較（Turnごとの動作）
- [ ] maxTurns 設定の確認（evaluation.ts:108で maxTurns: 50）
- [ ] 他のフェーズの maxTurns 設定と比較

### 3. プロンプトの指示の弱さ

**仮説**: 「保存してください」という指示が弱すぎる

**検証項目**:
- [ ] 他のフェーズでファイル保存に失敗した事例があるか確認
- [ ] プロンプトに「Write ツールを使って」という明示的な指示がない
- [ ] 保存が「必須ステップ」であることが明確でない

### 4. 評価レポートの出力形式

**仮説**: エージェントが「レポートを表示した = 完了」と誤認識

**検証項目**:
- [ ] エージェントが評価レポートを Markdown で出力している（agent_log.md に記録）
- [ ] エージェントが「ファイル保存」と「内容表示」を混同している可能性
- [ ] プロンプトで「表示ではなく保存」を明確にする必要があるか

## 再現性の確認

### 必要な検証

- [ ] Evaluation Phase を複数回実行して再現性を確認
- [ ] 他のワークフロー（Issue #2以外）でも同じ問題が発生するか確認
- [ ] 同じプロンプトで Claude Code を直接実行した場合の動作を確認

## 暫定対処法（案）

### Option 1: プロンプトの明示的な修正

プロンプトの最後に明確なステップを追加：

```markdown
## 最終ステップ - 評価レポートの保存（必須）

評価が完了したら、以下のステップを**必ず**実行してください：

1. Write ツールを使用
2. 上記の評価レポート全文を保存
3. 保存先: .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md

**重要**: このファイルが存在しない場合、フェーズは失敗します。保存を忘れないでください。
```

### Option 2: BasePhase のファイル存在チェック強化

evaluation.ts:110-118 のファイル存在チェックは正しいが、エージェント実行後に即座にチェックしている。エージェントに「保存確認」を促す仕組みが必要かもしれない。

### Option 3: エージェントの maxTurns 調整

maxTurns: 50 が多すぎる可能性。他のフェーズと比較して適切な値に調整。

## 実装タスク

1. **調査フェーズ**:
   - [ ] 各フェーズのプロンプトを比較分析
   - [ ] 各フェーズのエージェントログを比較（成功例）
   - [ ] maxTurns 設定を全フェーズで確認
   - [ ] Evaluation Phase を複数回実行して再現性確認

2. **修正フェーズ**:
   - [ ] プロンプトを修正（調査結果に基づいて）
   - [ ] 必要に応じて evaluation.ts のコードを修正
   - [ ] テストケースを追加（ファイル保存の検証）

3. **検証フェーズ**:
   - [ ] 修正後のプロンプトで Evaluation Phase を実行
   - [ ] evaluation_report.md が正しく作成されることを確認
   - [ ] 他のフェーズに影響がないことを確認

## 関連ファイル

- `src/phases/evaluation.ts`: Evaluation Phase の実装（110行目でファイル存在チェック）
- `src/prompts/evaluation/execute.txt`: Evaluation Phase のプロンプト（152行目に保存指示）
- `.ai-workflow/issue-2/09_evaluation/execute/agent_log.md`: 失敗したエージェントログ

## 期待される成果

1. 根本原因の特定
2. Evaluation Phase で evaluation_report.md が確実に作成される
3. 他のフェーズに影響を与えない修正
4. 再発防止策（プロンプトのベストプラクティス）

## 優先度

**High** - Evaluation Phase が完了しないと、ワークフロー全体が失敗する

### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-{issue_number}/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
