# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-5/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-5/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #5
- **タイトル**: Evaluation Phase: 評価レポートファイルが作成されない問題の調査と修正
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/5
- **ラベル**: bug

### 本文

## 問題の症状

Evaluation Phase (Phase 9) の実行時に、エージェントが評価レポートの内容を生成するものの、ファイルとして保存されない問題が発生しています。

### エラーメッセージ

```
[ERROR] Phase evaluation: Execute failed: evaluation_report.md が見つかりません: /tmp/jenkins-xxx/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-2/09_evaluation/output/evaluation_report.md
[ERROR] Workflow failed at phase: evaluation
[ERROR] Reason: Phase evaluation failed.
```

## 観察された動作

### エージェントログ（.ai-workflow/issue-2/09_evaluation/execute/agent_log.md）の分析

1. **Turn 2**: エージェントが詳細な評価レポートを生成（345行分）
   - エグゼクティブサマリー
   - 7つの評価基準すべての評価
   - DECISION: PASS
   - 推奨事項
   - 結論

2. **Turn 3**: status: success で終了

3. **問題**: **Write ツールが一度も呼び出されていない**
   - エージェントは評価内容を生成したが、ファイルとして保存していない
   - プロンプトの指示（execute.txt:152行目）を読み飛ばしている可能性

## 他のフェーズとの比較

### 成功しているフェーズ

以下のフェーズは同様の「保存してください」指示で正常に動作：
- Planning Phase
- Requirements Phase
- Design Phase
- Test Scenario Phase
- Implementation Phase
- Test Implementation Phase
- Testing Phase
- Documentation Phase
- Report Phase

### 指示の類似性

全フェーズで類似の保存指示を使用：
```
このログを .ai-workflow/issue-5/XX_phase/output/filename.md として保存してください。
```

Evaluation Phase のみ：
```
**重要**: 評価レポートは必ず .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md として保存してください。
```

## 考えられる根本原因

### 1. プロンプト構造の問題

**仮説**: Evaluation Phase のプロンプトが長すぎる/複雑すぎるため、エージェントがファイル保存の指示を読み飛ばしている

**検証項目**:
- [ ] 各フェーズのプロンプトの長さを比較
- [ ] 「保存」指示の位置を比較（プロンプトの何行目にあるか）
- [ ] プロンプトの構造（セクション数、指示の明確さ）を比較

### 2. Evaluation Phase 特有の動作パターン

**仮説**: 評価内容の生成に集中しすぎて、ファイル保存を忘れている

**検証項目**:
- [ ] 他のフェーズのエージェントログと比較（Turnごとの動作）
- [ ] maxTurns 設定の確認（evaluation.ts:108で maxTurns: 50）
- [ ] 他のフェーズの maxTurns 設定と比較

### 3. プロンプトの指示の弱さ

**仮説**: 「保存してください」という指示が弱すぎる

**検証項目**:
- [ ] 他のフェーズでファイル保存に失敗した事例があるか確認
- [ ] プロンプトに「Write ツールを使って」という明示的な指示がない
- [ ] 保存が「必須ステップ」であることが明確でない

### 4. 評価レポートの出力形式

**仮説**: エージェントが「レポートを表示した = 完了」と誤認識

**検証項目**:
- [ ] エージェントが評価レポートを Markdown で出力している（agent_log.md に記録）
- [ ] エージェントが「ファイル保存」と「内容表示」を混同している可能性
- [ ] プロンプトで「表示ではなく保存」を明確にする必要があるか

## 再現性の確認

### 必要な検証

- [ ] Evaluation Phase を複数回実行して再現性を確認
- [ ] 他のワークフロー（Issue #2以外）でも同じ問題が発生するか確認
- [ ] 同じプロンプトで Claude Code を直接実行した場合の動作を確認

## 暫定対処法（案）

### Option 1: プロンプトの明示的な修正

プロンプトの最後に明確なステップを追加：

```markdown
## 最終ステップ - 評価レポートの保存（必須）

評価が完了したら、以下のステップを**必ず**実行してください：

1. Write ツールを使用
2. 上記の評価レポート全文を保存
3. 保存先: .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md

**重要**: このファイルが存在しない場合、フェーズは失敗します。保存を忘れないでください。
```

### Option 2: BasePhase のファイル存在チェック強化

evaluation.ts:110-118 のファイル存在チェックは正しいが、エージェント実行後に即座にチェックしている。エージェントに「保存確認」を促す仕組みが必要かもしれない。

### Option 3: エージェントの maxTurns 調整

maxTurns: 50 が多すぎる可能性。他のフェーズと比較して適切な値に調整。

## 実装タスク

1. **調査フェーズ**:
   - [ ] 各フェーズのプロンプトを比較分析
   - [ ] 各フェーズのエージェントログを比較（成功例）
   - [ ] maxTurns 設定を全フェーズで確認
   - [ ] Evaluation Phase を複数回実行して再現性確認

2. **修正フェーズ**:
   - [ ] プロンプトを修正（調査結果に基づいて）
   - [ ] 必要に応じて evaluation.ts のコードを修正
   - [ ] テストケースを追加（ファイル保存の検証）

3. **検証フェーズ**:
   - [ ] 修正後のプロンプトで Evaluation Phase を実行
   - [ ] evaluation_report.md が正しく作成されることを確認
   - [ ] 他のフェーズに影響がないことを確認

## 関連ファイル

- `src/phases/evaluation.ts`: Evaluation Phase の実装（110行目でファイル存在チェック）
- `src/prompts/evaluation/execute.txt`: Evaluation Phase のプロンプト（152行目に保存指示）
- `.ai-workflow/issue-2/09_evaluation/execute/agent_log.md`: 失敗したエージェントログ

## 期待される成果

1. 根本原因の特定
2. Evaluation Phase で evaluation_report.md が確実に作成される
3. 他のフェーズに影響を与えない修正
4. 再発防止策（プロンプトのベストプラクティス）

## 優先度

**High** - Evaluation Phase が完了しないと、ワークフロー全体が失敗する

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-5/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 2:" または "## Phase 2:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 設計内容との照合

設計書（design.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載の設計項目が記述されているか
- Task記載の戦略判断が明記されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 2-2: テスト戦略の決定
  - 不足: テスト戦略の判断根拠が記載されていません
- [ ] Task 2-3: 影響範囲分析
  - 不足: 既存コードへの影響範囲が分析されていません

これらのタスクを完了してから再提出してください。
```

### ⚠️ 重要: Planning.mdの内容はレビュー結果に含めない

Planning.mdの読み込みと照合作業は必要ですが、**planning.mdの全文やPlanning Phaseのレビュー内容をレビュー結果に含めないでください**。

レビュー結果には以下のみを含めること:
- 設計書（design.md）に対する評価
- Planning.mdとの照合で発見した未完了タスク（FAIL時のみ）
- 設計書固有の改善提案

Planning Phaseのレビュー詳細やplanning.mdの内容全体は出力しないこと。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
