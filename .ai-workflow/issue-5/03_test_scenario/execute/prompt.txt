# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-5/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-5/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-5/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #5
- **タイトル**: Evaluation Phase: 評価レポートファイルが作成されない問題の調査と修正
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/5
- **ラベル**: bug

### 本文

## 問題の症状

Evaluation Phase (Phase 9) の実行時に、エージェントが評価レポートの内容を生成するものの、ファイルとして保存されない問題が発生しています。

### エラーメッセージ

```
[ERROR] Phase evaluation: Execute failed: evaluation_report.md が見つかりません: /tmp/jenkins-xxx/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-2/09_evaluation/output/evaluation_report.md
[ERROR] Workflow failed at phase: evaluation
[ERROR] Reason: Phase evaluation failed.
```

## 観察された動作

### エージェントログ（.ai-workflow/issue-2/09_evaluation/execute/agent_log.md）の分析

1. **Turn 2**: エージェントが詳細な評価レポートを生成（345行分）
   - エグゼクティブサマリー
   - 7つの評価基準すべての評価
   - DECISION: PASS
   - 推奨事項
   - 結論

2. **Turn 3**: status: success で終了

3. **問題**: **Write ツールが一度も呼び出されていない**
   - エージェントは評価内容を生成したが、ファイルとして保存していない
   - プロンプトの指示（execute.txt:152行目）を読み飛ばしている可能性

## 他のフェーズとの比較

### 成功しているフェーズ

以下のフェーズは同様の「保存してください」指示で正常に動作：
- Planning Phase
- Requirements Phase
- Design Phase
- Test Scenario Phase
- Implementation Phase
- Test Implementation Phase
- Testing Phase
- Documentation Phase
- Report Phase

### 指示の類似性

全フェーズで類似の保存指示を使用：
```
このログを .ai-workflow/issue-5/XX_phase/output/filename.md として保存してください。
```

Evaluation Phase のみ：
```
**重要**: 評価レポートは必ず .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md として保存してください。
```

## 考えられる根本原因

### 1. プロンプト構造の問題

**仮説**: Evaluation Phase のプロンプトが長すぎる/複雑すぎるため、エージェントがファイル保存の指示を読み飛ばしている

**検証項目**:
- [ ] 各フェーズのプロンプトの長さを比較
- [ ] 「保存」指示の位置を比較（プロンプトの何行目にあるか）
- [ ] プロンプトの構造（セクション数、指示の明確さ）を比較

### 2. Evaluation Phase 特有の動作パターン

**仮説**: 評価内容の生成に集中しすぎて、ファイル保存を忘れている

**検証項目**:
- [ ] 他のフェーズのエージェントログと比較（Turnごとの動作）
- [ ] maxTurns 設定の確認（evaluation.ts:108で maxTurns: 50）
- [ ] 他のフェーズの maxTurns 設定と比較

### 3. プロンプトの指示の弱さ

**仮説**: 「保存してください」という指示が弱すぎる

**検証項目**:
- [ ] 他のフェーズでファイル保存に失敗した事例があるか確認
- [ ] プロンプトに「Write ツールを使って」という明示的な指示がない
- [ ] 保存が「必須ステップ」であることが明確でない

### 4. 評価レポートの出力形式

**仮説**: エージェントが「レポートを表示した = 完了」と誤認識

**検証項目**:
- [ ] エージェントが評価レポートを Markdown で出力している（agent_log.md に記録）
- [ ] エージェントが「ファイル保存」と「内容表示」を混同している可能性
- [ ] プロンプトで「表示ではなく保存」を明確にする必要があるか

## 再現性の確認

### 必要な検証

- [ ] Evaluation Phase を複数回実行して再現性を確認
- [ ] 他のワークフロー（Issue #2以外）でも同じ問題が発生するか確認
- [ ] 同じプロンプトで Claude Code を直接実行した場合の動作を確認

## 暫定対処法（案）

### Option 1: プロンプトの明示的な修正

プロンプトの最後に明確なステップを追加：

```markdown
## 最終ステップ - 評価レポートの保存（必須）

評価が完了したら、以下のステップを**必ず**実行してください：

1. Write ツールを使用
2. 上記の評価レポート全文を保存
3. 保存先: .ai-workflow/issue-{issue_number}/09_evaluation/output/evaluation_report.md

**重要**: このファイルが存在しない場合、フェーズは失敗します。保存を忘れないでください。
```

### Option 2: BasePhase のファイル存在チェック強化

evaluation.ts:110-118 のファイル存在チェックは正しいが、エージェント実行後に即座にチェックしている。エージェントに「保存確認」を促す仕組みが必要かもしれない。

### Option 3: エージェントの maxTurns 調整

maxTurns: 50 が多すぎる可能性。他のフェーズと比較して適切な値に調整。

## 実装タスク

1. **調査フェーズ**:
   - [ ] 各フェーズのプロンプトを比較分析
   - [ ] 各フェーズのエージェントログを比較（成功例）
   - [ ] maxTurns 設定を全フェーズで確認
   - [ ] Evaluation Phase を複数回実行して再現性確認

2. **修正フェーズ**:
   - [ ] プロンプトを修正（調査結果に基づいて）
   - [ ] 必要に応じて evaluation.ts のコードを修正
   - [ ] テストケースを追加（ファイル保存の検証）

3. **検証フェーズ**:
   - [ ] 修正後のプロンプトで Evaluation Phase を実行
   - [ ] evaluation_report.md が正しく作成されることを確認
   - [ ] 他のフェーズに影響がないことを確認

## 関連ファイル

- `src/phases/evaluation.ts`: Evaluation Phase の実装（110行目でファイル存在チェック）
- `src/prompts/evaluation/execute.txt`: Evaluation Phase のプロンプト（152行目に保存指示）
- `.ai-workflow/issue-2/09_evaluation/execute/agent_log.md`: 失敗したエージェントログ

## 期待される成果

1. 根本原因の特定
2. Evaluation Phase で evaluation_report.md が確実に作成される
3. 他のフェーズに影響を与えない修正
4. 再発防止策（プロンプトのベストプラクティス）

## 優先度

**High** - Evaluation Phase が完了しないと、ワークフロー全体が失敗する

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-{issue_number}/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
