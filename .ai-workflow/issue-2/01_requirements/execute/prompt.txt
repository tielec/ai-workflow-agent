# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-2/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #2
- **タイトル**: Evaluation Phase 完了後の .ai-workflow クリーンアップオプション
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/2
- **ラベル**: enhancement

### 本文

## 背景・動機

現在の AI Workflow では、Report Phase (Phase 8) 完了後に `cleanupWorkflowLogs()` が実行され、デバッグログ（`execute/`, `review/`, `revise/` ディレクトリ）が削除されます。これにより約 70% のリポジトリサイズ削減が実現できています。

しかし、Evaluation Phase (Phase 9) が完了し、ワークフロー全体が正常に終了した後も、`.ai-workflow/issue-*` ディレクトリ全体が残り続けます。これには以下の成果物が含まれます：

- `metadata.json`
- 各フェーズの `output/*.md` ファイル
- `00_planning/` ディレクトリ全体

PR がマージされた後、これらの成果物が不要になるケースがあるため、オプションでクリーンアップできる機能が求められています。

## 提案内容

Evaluation Phase (Phase 9) 完了後に、オプションで `.ai-workflow/issue-*` ディレクトリ全体を削除する機能を実装する。

### CLI オプション

\`\`\`bash
# Evaluation Phase 完了後にワークフローディレクトリを削除
node dist/index.js execute --issue 123 --phase evaluation --cleanup-on-complete

# または、全フェーズ実行時にも適用可能
node dist/index.js execute --issue 123 --phase all --cleanup-on-complete
\`\`\`

### 動作仕様

1. **トリガー条件**:
   - Evaluation Phase (Phase 9) が `completed` ステータスになった直後
   - `--cleanup-on-complete` フラグが指定されている場合のみ

2. **削除対象**:
   - `.ai-workflow/issue-<NUM>/` ディレクトリ全体

3. **削除前の確認**:
   - 削除前にログで警告を表示
   - オプション: `--cleanup-on-complete-force` で確認をスキップ

4. **Git コミット**:
   - `.ai-workflow/issue-<NUM>/` の削除を自動コミット
   - コミットメッセージ例: `chore: cleanup workflow artifacts for issue #123`

## 実装の詳細

### 1. CLI オプション追加

`src/main.ts` に以下のオプションを追加:

\`\`\`typescript
.option('--cleanup-on-complete', 'Delete .ai-workflow directory after evaluation phase completes', false)
.option('--cleanup-on-complete-force', 'Skip confirmation before cleanup', false)
\`\`\`

### 2. Evaluation Phase への統合

`src/phases/evaluation.ts` の `run()` メソッド内で、フェーズ完了後にクリーンアップを実行:

\`\`\`typescript
// Evaluation Phase 完了後
if (options.cleanupOnComplete) {
  await this.cleanupWorkflowArtifacts(options.force);
}
\`\`\`

### 3. クリーンアップメソッド実装

`BasePhase` または `EvaluationPhase` に以下のメソッドを追加:

\`\`\`typescript
protected async cleanupWorkflowArtifacts(force: boolean = false): Promise<void> {
  const workflowDir = this.metadata.workflowDir; // .ai-workflow/issue-<NUM>

  if (!force) {
    console.warn(\`[WARNING] About to delete workflow directory: \${workflowDir}\`);
    console.warn('[WARNING] This action cannot be undone.');
    // 実装: ユーザー確認プロンプト（Jenkins環境では自動スキップ）
  }

  try {
    console.info(\`[INFO] Deleting workflow artifacts: \${workflowDir}\`);
    fs.removeSync(workflowDir);
    console.info('[OK] Workflow artifacts deleted successfully.');
  } catch (error) {
    console.error(\`[ERROR] Failed to delete workflow artifacts: \${error.message}\`);
    throw error;
  }
}
\`\`\`

## 考慮事項

### セーフティ機能

1. **削除前の確認**:
   - 対話的な環境では、削除前に確認を求める
   - Jenkins などの CI 環境では、`--cleanup-on-complete-force` を使用

2. **Git コミット前に削除**:
   - クリーンアップは Git コミット前に実行
   - 削除後に自動コミット & プッシュ

3. **エラーハンドリング**:
   - クリーンアップ失敗時もワークフロー全体は成功として扱う
   - エラーログを出力して継続

### ユースケース

**ケース 1: PR マージ後の自動クリーンアップ**
\`\`\`bash
# Jenkins で PR マージ後に実行
node dist/index.js execute --issue 123 --phase evaluation --cleanup-on-complete-force
\`\`\`

**ケース 2: ローカル開発での手動クリーンアップ**
\`\`\`bash
# 確認プロンプト付きで削除
node dist/index.js execute --issue 123 --phase evaluation --cleanup-on-complete
\`\`\`

**ケース 3: 成果物を保持したい場合**
\`\`\`bash
# デフォルト動作（クリーンアップしない）
node dist/index.js execute --issue 123 --phase evaluation
\`\`\`

### 後方互換性

- `--cleanup-on-complete` オプションは完全にオプショナル
- デフォルトでは従来通り成果物を保持
- 既存のワークフローに影響なし

## 実装優先度

**Medium** - Report Phase のクリーンアップ機能が既に実装されているため、同様のアプローチで実装可能。CI/CD パイプラインでのリソース管理に有用。

## 関連機能

- Report Phase のワークフローログクリーンアップ機能（既存）
- `--force-reset` オプション（メタデータリセット）

## テストケース

1. **正常系**:
   - Evaluation Phase 完了 + `--cleanup-on-complete` → ディレクトリ削除成功
   - 削除後の Git コミット & プッシュ成功

2. **異常系**:
   - ディレクトリが存在しない場合 → エラーログ出力、ワークフローは成功
   - 削除権限がない場合 → エラーログ出力、ワークフローは成功

3. **確認プロンプト**:
   - 対話的環境 + `--cleanup-on-complete` → 確認プロンプト表示
   - CI環境 + `--cleanup-on-complete-force` → 確認なしで削除

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-2/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
