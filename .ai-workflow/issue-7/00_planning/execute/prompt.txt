# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue概要

- **Issue番号**: #7
- **タイトル**: カスタムブランチ名での作業をサポート
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/7
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は Issue URL に基づいて自動的にブランチ名（ai-workflow/issue-7）を生成しますが、任意のブランチ名を指定して作業できるようにしたいです。

## 背景

### 現在の動作

AI Workflow を実行すると、以下の形式でブランチが自動作成されます：
- ブランチ名: ai-workflow/issue-{issue_number}
- 例: Issue #123 の場合 → ai-workflow/issue-123

### 問題点

以下のようなケースでカスタムブランチ名が必要になります：

1. **既存ブランチでの作業**: 既に作成済みのブランチ（feature/new-api など）で AI Workflow を実行したい
2. **命名規則への対応**: チームのブランチ命名規則（feature/, bugfix/, hotfix/ など）に合わせたい
3. **複数 Issue の統合作業**: 複数の Issue をまとめて1つのブランチで作業したい（例: feature/user-auth で Issue #10, #11, #12 を対応）
4. **ブランチ名の可読性**: より説明的なブランチ名を使いたい（例: feature/add-aws-credentials-support）

## 要件

### 機能要件

**FR-1: CLI オプションの追加**
- --branch オプションを追加し、カスタムブランチ名を指定可能にする
- 例: ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/my-branch

**FR-2: デフォルト動作の維持**
- --branch オプションが指定されない場合、現在の動作（ai-workflow/issue-{issue_number}）を維持
- 後方互換性を保つ

**FR-3: ブランチ存在チェック**
- 指定されたブランチが存在する場合: そのブランチに checkout
- 指定されたブランチが存在しない場合: 新規作成
- リモートにのみ存在する場合: fetch して checkout

**FR-4: メタデータ保存**
- 指定されたブランチ名を metadata.json の branch_name フィールドに保存
- execute コマンドは保存されたブランチ名を使用

**FR-5: Jenkins パラメータ対応**
- Jenkinsfile に BRANCH_NAME パラメータを追加（任意、Job DSL で定義）
- パラメータが指定された場合、init コマンドに --branch オプションとして渡す

### 受け入れ基準

**AC-1: CLI でカスタムブランチ名を指定できる**
```
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/custom-branch
→ feature/custom-branch が作成/checkout される
```

**AC-2: デフォルト動作が変わらない**
```
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123
→ ai-workflow/issue-123 が作成される（従来通り）
```

**AC-3: 既存ブランチに切り替えられる**
```
git checkout -b feature/existing-branch
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/existing-branch
→ 既存の feature/existing-branch で作業が開始される
```

**AC-4: メタデータに保存される**
```
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/custom
cat .ai-workflow/issue-123/metadata.json | jq .branch_name
→ "feature/custom"
```

**AC-5: Jenkins でブランチ名を指定できる**
- Jenkins Job の BRANCH_NAME パラメータに feature/custom-branch を入力
- AI Workflow が指定されたブランチで実行される

**AC-6: ブランチ名のバリデーション**
- 不正なブランチ名（空白、特殊文字など）を検証してエラーメッセージを表示
- Git の命名規則に従ったブランチ名のみ受け入れる

## 実装アプローチ

### 1. CLI オプションの追加（src/main.ts）

init コマンドに --branch オプションを追加

### 2. ブランチ名解決ロジック（src/main.ts）

カスタムブランチ名が指定された場合はそれを使用し、未指定の場合はデフォルト（ai-workflow/issue-{issue_number}）を使用。ブランチ名のバリデーションを実装。

Git ブランチ名の命名規則：
- 空白を含まない
- .. を含まない
- ~, ^, :, ?, *, [ を含まない
- / で始まらない、終わらない

### 3. Git Manager の更新（src/core/git-manager.ts）

既存の createBranch() メソッドと switchBranch() メソッドを使用してカスタムブランチに対応。

### 4. メタデータ管理（src/core/metadata-manager.ts）

branch_name フィールドにカスタムブランチ名を保存（既存のフィールドを使用）。

### 5. Jenkinsfile の更新

Initialize Workflow stage で BRANCH_NAME パラメータが指定されている場合、--branch オプションとして渡す

### 6. Job DSL の更新（参考、実装はスコープ外）

BRANCH_NAME パラメータを string 型で追加（任意、デフォルト: 空文字列）

## スコープ外

以下は今回のスコープに含めません：

- Job DSL ファイルの実装（別ファイルで管理されているため、ドキュメント参照のみ）
- ブランチ保護ルールのチェック
- PR 作成時のベースブランチ自動判定
- 複数リポジトリでのブランチ名統一

## 関連ファイル

- src/main.ts: CLI コマンド定義、init コマンド処理
- src/core/git-manager.ts: ブランチ作成・切り替え処理
- src/core/metadata-manager.ts: メタデータ管理
- Jenkinsfile: パイプライン定義、Initialize Workflow stage
- jenkins/jobs/dsl/ai-workflow/ai_workflow_orchestrator.groovy: Job DSL（参考）

## 期待される成果

1. CLI で --branch オプションを使ってカスタムブランチ名を指定できる
2. デフォルト動作（自動ブランチ名生成）が維持される
3. Jenkins でブランチ名をパラメータとして受け入れる
4. ブランチ名のバリデーションが実装される
5. 既存ブランチでの作業が可能になる

## テストシナリオ

### シナリオ1: デフォルトブランチ名（後方互換性）
```
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123
git branch --show-current
Expected: ai-workflow/issue-123
```

### シナリオ2: カスタムブランチ名（新規作成）
```
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123 --branch feature/add-logging
git branch --show-current
Expected: feature/add-logging
```

### シナリオ3: 既存ブランチでの作業
```
git checkout -b feature/existing-work
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123 --branch feature/existing-work
git branch --show-current
Expected: feature/existing-work（既存ブランチを使用）
```

### シナリオ4: 不正なブランチ名
```
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123 --branch "invalid branch name"
Expected: Error: Invalid branch name: invalid branch name
```

### シナリオ5: Jenkins パラメータ
- Jenkins Job で BRANCH_NAME = feature/jenkins-custom を指定
- AI Workflow が feature/jenkins-custom ブランチで実行される
- metadata.json の branch_name が feature/jenkins-custom になる

## 優先度

**Medium** - 既存機能の拡張であり、デフォルト動作に影響しない

## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

## ⚠️ 重要: チェックリスト標準フォーマット（必須）

各フェーズのタスクは、**必ずチェックリスト形式**で記述してください。このチェックリストは、Review Phaseで完了判定に使用されます。

### 標準フォーマット

```markdown
### Phase X: [フェーズ名] (見積もり: X~Yh)

- [ ] Task X-1: [タスク名] (見積もり時間)
  - [サブタスク1]
  - [サブタスク2]
- [ ] Task X-2: [タスク名] (見積もり時間)
  - [サブタスク1]
```

**重要**: このチェックリストは、Review Phaseで完了判定に使用されます。各タスクは明確で検証可能な内容にしてください。

**良い例**:
```
- [ ] Task 4-1: CLI層の分離 (3~5h)
  - cli/commands.py の作成
  - main.pyからCLIロジックを抽出
```

**悪い例**:
```
- [ ] リファクタリングを実施
```
（検証不可能なため不適切）

### 各フェーズのタスクリスト

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)

- [ ] Task 1-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2
- [ ] Task 1-2: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 2: 設計 (見積もり: Xh)

- [ ] Task 2-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 3: テストシナリオ (見積もり: Xh)

- [ ] Task 3-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 4: 実装 (見積もり: Xh)

- [ ] Task 4-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 5: テストコード実装 (見積もり: Xh)

- [ ] Task 5-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 6: テスト実行 (見積もり: Xh)

- [ ] Task 6-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 7: ドキュメント (見積もり: Xh)

- [ ] Task 7-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 8: レポート (見積もり: Xh)

- [ ] Task 8-1: [タスク名] (見積もり時間)
  - サブタスク1

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能
- **検証可能**: Review Phaseで「完了したか」を客観的に判断できる内容

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-{issue_number}/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
