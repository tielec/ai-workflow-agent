# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-7/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #7
- **タイトル**: カスタムブランチ名での作業をサポート
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/7
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は Issue URL に基づいて自動的にブランチ名（ai-workflow/issue-7）を生成しますが、任意のブランチ名を指定して作業できるようにしたいです。

## 背景

### 現在の動作

AI Workflow を実行すると、以下の形式でブランチが自動作成されます：
- ブランチ名: ai-workflow/issue-{issue_number}
- 例: Issue #123 の場合 → ai-workflow/issue-123

### 問題点

以下のようなケースでカスタムブランチ名が必要になります：

1. **既存ブランチでの作業**: 既に作成済みのブランチ（feature/new-api など）で AI Workflow を実行したい
2. **命名規則への対応**: チームのブランチ命名規則（feature/, bugfix/, hotfix/ など）に合わせたい
3. **複数 Issue の統合作業**: 複数の Issue をまとめて1つのブランチで作業したい（例: feature/user-auth で Issue #10, #11, #12 を対応）
4. **ブランチ名の可読性**: より説明的なブランチ名を使いたい（例: feature/add-aws-credentials-support）

## 要件

### 機能要件

**FR-1: CLI オプションの追加**
- --branch オプションを追加し、カスタムブランチ名を指定可能にする
- 例: ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/my-branch

**FR-2: デフォルト動作の維持**
- --branch オプションが指定されない場合、現在の動作（ai-workflow/issue-{issue_number}）を維持
- 後方互換性を保つ

**FR-3: ブランチ存在チェック**
- 指定されたブランチが存在する場合: そのブランチに checkout
- 指定されたブランチが存在しない場合: 新規作成
- リモートにのみ存在する場合: fetch して checkout

**FR-4: メタデータ保存**
- 指定されたブランチ名を metadata.json の branch_name フィールドに保存
- execute コマンドは保存されたブランチ名を使用

**FR-5: Jenkins パラメータ対応**
- Jenkinsfile に BRANCH_NAME パラメータを追加（任意、Job DSL で定義）
- パラメータが指定された場合、init コマンドに --branch オプションとして渡す

### 受け入れ基準

**AC-1: CLI でカスタムブランチ名を指定できる**
```
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/custom-branch
→ feature/custom-branch が作成/checkout される
```

**AC-2: デフォルト動作が変わらない**
```
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123
→ ai-workflow/issue-123 が作成される（従来通り）
```

**AC-3: 既存ブランチに切り替えられる**
```
git checkout -b feature/existing-branch
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/existing-branch
→ 既存の feature/existing-branch で作業が開始される
```

**AC-4: メタデータに保存される**
```
ai-workflow-v2 init --issue-url https://github.com/org/repo/issues/123 --branch feature/custom
cat .ai-workflow/issue-123/metadata.json | jq .branch_name
→ "feature/custom"
```

**AC-5: Jenkins でブランチ名を指定できる**
- Jenkins Job の BRANCH_NAME パラメータに feature/custom-branch を入力
- AI Workflow が指定されたブランチで実行される

**AC-6: ブランチ名のバリデーション**
- 不正なブランチ名（空白、特殊文字など）を検証してエラーメッセージを表示
- Git の命名規則に従ったブランチ名のみ受け入れる

## 実装アプローチ

### 1. CLI オプションの追加（src/main.ts）

init コマンドに --branch オプションを追加

### 2. ブランチ名解決ロジック（src/main.ts）

カスタムブランチ名が指定された場合はそれを使用し、未指定の場合はデフォルト（ai-workflow/issue-{issue_number}）を使用。ブランチ名のバリデーションを実装。

Git ブランチ名の命名規則：
- 空白を含まない
- .. を含まない
- ~, ^, :, ?, *, [ を含まない
- / で始まらない、終わらない

### 3. Git Manager の更新（src/core/git-manager.ts）

既存の createBranch() メソッドと switchBranch() メソッドを使用してカスタムブランチに対応。

### 4. メタデータ管理（src/core/metadata-manager.ts）

branch_name フィールドにカスタムブランチ名を保存（既存のフィールドを使用）。

### 5. Jenkinsfile の更新

Initialize Workflow stage で BRANCH_NAME パラメータが指定されている場合、--branch オプションとして渡す

### 6. Job DSL の更新（参考、実装はスコープ外）

BRANCH_NAME パラメータを string 型で追加（任意、デフォルト: 空文字列）

## スコープ外

以下は今回のスコープに含めません：

- Job DSL ファイルの実装（別ファイルで管理されているため、ドキュメント参照のみ）
- ブランチ保護ルールのチェック
- PR 作成時のベースブランチ自動判定
- 複数リポジトリでのブランチ名統一

## 関連ファイル

- src/main.ts: CLI コマンド定義、init コマンド処理
- src/core/git-manager.ts: ブランチ作成・切り替え処理
- src/core/metadata-manager.ts: メタデータ管理
- Jenkinsfile: パイプライン定義、Initialize Workflow stage
- jenkins/jobs/dsl/ai-workflow/ai_workflow_orchestrator.groovy: Job DSL（参考）

## 期待される成果

1. CLI で --branch オプションを使ってカスタムブランチ名を指定できる
2. デフォルト動作（自動ブランチ名生成）が維持される
3. Jenkins でブランチ名をパラメータとして受け入れる
4. ブランチ名のバリデーションが実装される
5. 既存ブランチでの作業が可能になる

## テストシナリオ

### シナリオ1: デフォルトブランチ名（後方互換性）
```
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123
git branch --show-current
Expected: ai-workflow/issue-123
```

### シナリオ2: カスタムブランチ名（新規作成）
```
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123 --branch feature/add-logging
git branch --show-current
Expected: feature/add-logging
```

### シナリオ3: 既存ブランチでの作業
```
git checkout -b feature/existing-work
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123 --branch feature/existing-work
git branch --show-current
Expected: feature/existing-work（既存ブランチを使用）
```

### シナリオ4: 不正なブランチ名
```
ai-workflow-v2 init --issue-url https://github.com/tielec/ai-workflow-agent/issues/123 --branch "invalid branch name"
Expected: Error: Invalid branch name: invalid branch name
```

### シナリオ5: Jenkins パラメータ
- Jenkins Job で BRANCH_NAME = feature/jenkins-custom を指定
- AI Workflow が feature/jenkins-custom ブランチで実行される
- metadata.json の branch_name が feature/jenkins-custom になる

## 優先度

**Medium** - 既存機能の拡張であり、デフォルト動作に影響しない

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-{issue_number}/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
