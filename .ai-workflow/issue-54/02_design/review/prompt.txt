# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-54/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-54/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #54
- **タイトル**: バグ: metadata.jsonにGitHub Personal Access Tokenが含まれpush protectionで拒否される
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/54
- **ラベル**: なし

### 本文

## 概要
`init` コマンド実行時に、Git remote URL に含まれる GitHub Personal Access Token が `metadata.json` に保存されてしまい、GitHub の push protection によって push が拒否される問題が発生しています。

**重要度:** HIGH（セキュリティリスク）

## 再現手順

1. HTTPS形式でリポジトリをクローン（トークン埋め込み）:
```bash
git clone https://ghp_xxxxxxxxxxxx@github.com/tielec/infrastructure-as-code.git
```

2. `init` コマンドを実行:
```bash
node dist/index.js init --issue-url https://github.com/tielec/infrastructure-as-code/issues/423
```

3. 結果: push が GitHub push protection により拒否される

## エラーメッセージ

```
[ERROR] Push failed: remote: error: GH013: Repository rule violations found for refs/heads/ai-workflow/issue-423.        
remote: 
remote: - GITHUB PUSH PROTECTION        
remote:   —————————————————————————————————————————        
remote:     Resolve the following violations before pushing again        
remote: 
remote:     - Push cannot contain secrets        
remote: 
remote:             
remote:       —— GitHub Personal Access Token ——————————————————————        
remote:        locations:        
remote:          - commit: a42733bf5a526ef7ab5b0df50b07279f79387a50        
remote:            path: .ai-workflow/issue-423/metadata.json:9        
```

## 原因分析

### 1. Remote URL取得時にトークンが含まれる

`src/commands/init.ts:235-236`:
```typescript
const remoteUrl = await git.remote(['get-url', 'origin']);
const remoteUrlStr = typeof remoteUrl === 'string' ? remoteUrl.trim() : String(remoteUrl).trim();
```

このコードは `git remote get-url origin` の結果をそのまま取得しており、HTTPS形式でトークンが埋め込まれている場合（`https://token@github.com/...`）、トークンがそのまま含まれてしまいます。

### 2. metadata.jsonに直接保存

`src/commands/init.ts:237-243`:
```typescript
metadataManager.data.target_repository = {
  path: repoRoot,
  github_name: repositoryName,
  remote_url: remoteUrlStr,  // ← トークンが含まれる可能性
  owner: owner,
  repo: repo,
};
```

### 3. SecretMaskerがmetadata.jsonをスキャンしていない

`src/core/secret-masker.ts:23-27`:
```typescript
private readonly targetFilePatterns = [
  'agent_log_raw.txt',
  'agent_log.md',
  'prompt.txt',
];
```

`metadata.json` がスキャン対象に含まれていないため、トークンがマスクされません。

## 影響範囲

### セキュリティリスク
- GitHub Personal Access Token が Git履歴に残る可能性
- リポジトリが public の場合、トークンが公開される
- トークンの無効化が必要になる

### 機能面の影響
- `init` コマンドが完了できない
- ワークフローを開始できない
- 手動でトークンを削除してコミットを修正する必要がある

## 提案する解決策

### 解決策1: Remote URLからトークンを除去（推奨）

`src/commands/init.ts` でremote URL取得後にトークンを除去:

```typescript
// src/utils/git-url-utils.ts (新規作成)

/**
 * Git remote URLからトークン/認証情報を除去
 * 
 * @example
 * sanitizeGitUrl('https://token@github.com/owner/repo.git')
 * // => 'https://github.com/owner/repo.git'
 * 
 * @example
 * sanitizeGitUrl('https://user:pass@github.com/owner/repo.git')
 * // => 'https://github.com/owner/repo.git'
 * 
 * @example
 * sanitizeGitUrl('git@github.com:owner/repo.git')
 * // => 'git@github.com:owner/repo.git' (変更なし)
 */
export function sanitizeGitUrl(url: string): string {
  // HTTPS形式の認証情報を除去: https://token@github.com -> https://github.com
  // パターン: https://[user[:pass]@]host/path
  const httpsPattern = /^(https?:\/\/)([^@]+@)?(.+)$/;
  const match = url.match(httpsPattern);
  
  if (match) {
    const [, protocol, , rest] = match;
    return `${protocol}${rest}`;
  }
  
  // SSH形式やその他はそのまま返す
  return url;
}
```

`src/commands/init.ts` で使用:

```typescript
import { sanitizeGitUrl } from '../utils/git-url-utils.js';

// ...

const remoteUrl = await git.remote(['get-url', 'origin']);
const remoteUrlStr = typeof remoteUrl === 'string' ? remoteUrl.trim() : String(remoteUrl).trim();
const sanitizedUrl = sanitizeGitUrl(remoteUrlStr);  // ← トークン除去

metadataManager.data.target_repository = {
  path: repoRoot,
  github_name: repositoryName,
  remote_url: sanitizedUrl,  // ← サニタイズ済みURL
  owner: owner,
  repo: repo,
};
```

### 解決策2: SecretMaskerにmetadata.jsonを追加（追加の安全策）

`src/core/secret-masker.ts`:

```typescript
private readonly targetFilePatterns = [
  'agent_log_raw.txt',
  'agent_log.md',
  'prompt.txt',
  'metadata.json',  // ← 追加
];
```

**注意**: これだけでは不十分です。metadata.jsonがコミットされる前にマスキングする必要がありますが、現在の実装では `commitWorkflowInit()` でマスキングが行われていない可能性があります。

### 解決策3: commitWorkflowInit でマスキングを確実に実行

`src/core/git-manager.ts` または `src/core/git/commit-manager.ts`:

```typescript
async commitWorkflowInit(issueNumber: number, branchName: string): Promise<CommitResult> {
  const workflowDir = path.join(this.repoRoot, '.ai-workflow', `issue-${issueNumber}`);
  
  // metadata.json 作成直後にマスキング実行
  try {
    const maskingResult = await this.secretMasker.maskSecretsInWorkflowDir(workflowDir);
    if (maskingResult.secretsMasked > 0) {
      console.info(`[INFO] Masked ${maskingResult.secretsMasked} secrets in metadata.json`);
    }
  } catch (error) {
    // マスキング失敗は致命的エラーとして扱う
    console.error(`[ERROR] Secret masking failed: ${(error as Error).message}`);
    throw new Error('Cannot commit metadata.json with unmasked secrets');
  }
  
  // ... コミット処理 ...
}
```

## 推奨アプローチ

**解決策1（URL サニタイズ）を優先実装**:
- 根本原因（トークンがmetadataに含まれること）を解決
- シンプルで確実
- 副作用がない

**解決策2 と 3 を追加の安全策として実装**:
- Defense in Depth（多層防御）
- 他の箇所でトークンが混入した場合にも対応

## 実装タスク

- [ ] `src/utils/git-url-utils.ts` を作成
- [ ] `sanitizeGitUrl()` 関数を実装
- [ ] `src/commands/init.ts` でremote URLをサニタイズ（2箇所: 192行, 236行）
- [ ] `sanitizeGitUrl()` のユニットテストを追加
  - [ ] HTTPS + トークン形式のテスト
  - [ ] HTTPS + ユーザー:パスワード形式のテスト
  - [ ] SSH形式のテスト（変更なし）
  - [ ] 通常のHTTPS形式のテスト（変更なし）
- [ ] `SecretMasker` に `metadata.json` を追加
- [ ] `commitWorkflowInit()` でマスキングを確実に実行
- [ ] 統合テストでトークン埋め込みURLでの動作を確認

## 見積もり
1日

## 関連Issue
セキュリティ重要度: HIGH

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-54/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 2:" または "## Phase 2:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 設計内容との照合

設計書（design.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載の設計項目が記述されているか
- Task記載の戦略判断が明記されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 2-2: テスト戦略の決定
  - 不足: テスト戦略の判断根拠が記載されていません
- [ ] Task 2-3: 影響範囲分析
  - 不足: 既存コードへの影響範囲が分析されていません

これらのタスクを完了してから再提出してください。
```

### ⚠️ 重要: Planning.mdの内容はレビュー結果に含めない

Planning.mdの読み込みと照合作業は必要ですが、**planning.mdの全文やPlanning Phaseのレビュー内容をレビュー結果に含めないでください**。

レビュー結果には以下のみを含めること:
- 設計書（design.md）に対する評価
- Planning.mdとの照合で発見した未完了タスク（FAIL時のみ）
- 設計書固有の改善提案

Planning Phaseのレビュー詳細やplanning.mdの内容全体は出力しないこと。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ⚠️ 最重要: 品質ゲートは絶対条件

**品質ゲート（5項目）は必須要件です。1つでも満たされていない場合、判定は自動的にFAILになります。**

- 品質ゲートは「最低限クリアすべき基準」であり、交渉の余地はありません
- 「80点で十分」の原則は、品質ゲートを満たした上での改善提案に適用されます
- 品質ゲートを満たさない状態で次フェーズに進むことは許されません

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

### 判定ルール

#### PASS（合格）

以下の**すべて**を満たす場合のみPASS：
- ✅ **5つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーが存在しない
- ✅ 軽微な改善提案のみ（または改善提案なし）

#### PASS_WITH_SUGGESTIONS（条件付き合格）

以下の**すべて**を満たす場合のみPASS_WITH_SUGGESTIONS：
- ✅ **5つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーは存在しない
- ✅ 次フェーズに進めるが、検討すべき改善点がある

#### FAIL（不合格）

以下の**いずれか1つでも**該当すればFAIL：
- ❌ **品質ゲート（5項目）のうち1つでも満たされていない**
- ❌ ブロッカーが1つ以上存在する

**重要: 品質ゲートは絶対条件であり、1つでも満たされていなければ自動的にFAILです。**

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

**⚠️ 重要: 各項目に対して明示的にPASS/FAILを判定してください。1つでもFAILがあれば最終判定は自動的にFAILです。**

- [x/  ] **実装戦略の判断根拠が明記されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **テスト戦略の判断根拠が明記されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **既存コードへの影響範囲が分析されている**: **PASS / FAIL** - （判定理由）
- [x/  ] **変更が必要なファイルがリストアップされている**: **PASS / FAIL** - （判定理由）
- [x/  ] **設計が実装可能である**: **PASS / FAIL** - （判定理由）

**品質ゲート総合判定: PASS / FAIL**
- PASS: 上記5項目すべてがPASS
- FAIL: 上記5項目のうち1つでもFAIL

**品質ゲート判定がFAILの場合、最終判定は自動的にFAILになります。**

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

**重要**: 最終行に必ず上記フォーマットで判定を明記してください。
