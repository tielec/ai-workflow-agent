# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-54/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-54/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-54/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #54
- **タイトル**: バグ: metadata.jsonにGitHub Personal Access Tokenが含まれpush protectionで拒否される
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/54
- **ラベル**: なし

### 本文

## 概要
`init` コマンド実行時に、Git remote URL に含まれる GitHub Personal Access Token が `metadata.json` に保存されてしまい、GitHub の push protection によって push が拒否される問題が発生しています。

**重要度:** HIGH（セキュリティリスク）

## 再現手順

1. HTTPS形式でリポジトリをクローン（トークン埋め込み）:
```bash
git clone https://ghp_xxxxxxxxxxxx@github.com/tielec/infrastructure-as-code.git
```

2. `init` コマンドを実行:
```bash
node dist/index.js init --issue-url https://github.com/tielec/infrastructure-as-code/issues/423
```

3. 結果: push が GitHub push protection により拒否される

## エラーメッセージ

```
[ERROR] Push failed: remote: error: GH013: Repository rule violations found for refs/heads/ai-workflow/issue-423.        
remote: 
remote: - GITHUB PUSH PROTECTION        
remote:   —————————————————————————————————————————        
remote:     Resolve the following violations before pushing again        
remote: 
remote:     - Push cannot contain secrets        
remote: 
remote:             
remote:       —— GitHub Personal Access Token ——————————————————————        
remote:        locations:        
remote:          - commit: a42733bf5a526ef7ab5b0df50b07279f79387a50        
remote:            path: .ai-workflow/issue-423/metadata.json:9        
```

## 原因分析

### 1. Remote URL取得時にトークンが含まれる

`src/commands/init.ts:235-236`:
```typescript
const remoteUrl = await git.remote(['get-url', 'origin']);
const remoteUrlStr = typeof remoteUrl === 'string' ? remoteUrl.trim() : String(remoteUrl).trim();
```

このコードは `git remote get-url origin` の結果をそのまま取得しており、HTTPS形式でトークンが埋め込まれている場合（`https://token@github.com/...`）、トークンがそのまま含まれてしまいます。

### 2. metadata.jsonに直接保存

`src/commands/init.ts:237-243`:
```typescript
metadataManager.data.target_repository = {
  path: repoRoot,
  github_name: repositoryName,
  remote_url: remoteUrlStr,  // ← トークンが含まれる可能性
  owner: owner,
  repo: repo,
};
```

### 3. SecretMaskerがmetadata.jsonをスキャンしていない

`src/core/secret-masker.ts:23-27`:
```typescript
private readonly targetFilePatterns = [
  'agent_log_raw.txt',
  'agent_log.md',
  'prompt.txt',
];
```

`metadata.json` がスキャン対象に含まれていないため、トークンがマスクされません。

## 影響範囲

### セキュリティリスク
- GitHub Personal Access Token が Git履歴に残る可能性
- リポジトリが public の場合、トークンが公開される
- トークンの無効化が必要になる

### 機能面の影響
- `init` コマンドが完了できない
- ワークフローを開始できない
- 手動でトークンを削除してコミットを修正する必要がある

## 提案する解決策

### 解決策1: Remote URLからトークンを除去（推奨）

`src/commands/init.ts` でremote URL取得後にトークンを除去:

```typescript
// src/utils/git-url-utils.ts (新規作成)

/**
 * Git remote URLからトークン/認証情報を除去
 * 
 * @example
 * sanitizeGitUrl('https://token@github.com/owner/repo.git')
 * // => 'https://github.com/owner/repo.git'
 * 
 * @example
 * sanitizeGitUrl('https://user:pass@github.com/owner/repo.git')
 * // => 'https://github.com/owner/repo.git'
 * 
 * @example
 * sanitizeGitUrl('git@github.com:owner/repo.git')
 * // => 'git@github.com:owner/repo.git' (変更なし)
 */
export function sanitizeGitUrl(url: string): string {
  // HTTPS形式の認証情報を除去: https://token@github.com -> https://github.com
  // パターン: https://[user[:pass]@]host/path
  const httpsPattern = /^(https?:\/\/)([^@]+@)?(.+)$/;
  const match = url.match(httpsPattern);
  
  if (match) {
    const [, protocol, , rest] = match;
    return `${protocol}${rest}`;
  }
  
  // SSH形式やその他はそのまま返す
  return url;
}
```

`src/commands/init.ts` で使用:

```typescript
import { sanitizeGitUrl } from '../utils/git-url-utils.js';

// ...

const remoteUrl = await git.remote(['get-url', 'origin']);
const remoteUrlStr = typeof remoteUrl === 'string' ? remoteUrl.trim() : String(remoteUrl).trim();
const sanitizedUrl = sanitizeGitUrl(remoteUrlStr);  // ← トークン除去

metadataManager.data.target_repository = {
  path: repoRoot,
  github_name: repositoryName,
  remote_url: sanitizedUrl,  // ← サニタイズ済みURL
  owner: owner,
  repo: repo,
};
```

### 解決策2: SecretMaskerにmetadata.jsonを追加（追加の安全策）

`src/core/secret-masker.ts`:

```typescript
private readonly targetFilePatterns = [
  'agent_log_raw.txt',
  'agent_log.md',
  'prompt.txt',
  'metadata.json',  // ← 追加
];
```

**注意**: これだけでは不十分です。metadata.jsonがコミットされる前にマスキングする必要がありますが、現在の実装では `commitWorkflowInit()` でマスキングが行われていない可能性があります。

### 解決策3: commitWorkflowInit でマスキングを確実に実行

`src/core/git-manager.ts` または `src/core/git/commit-manager.ts`:

```typescript
async commitWorkflowInit(issueNumber: number, branchName: string): Promise<CommitResult> {
  const workflowDir = path.join(this.repoRoot, '.ai-workflow', `issue-${issueNumber}`);
  
  // metadata.json 作成直後にマスキング実行
  try {
    const maskingResult = await this.secretMasker.maskSecretsInWorkflowDir(workflowDir);
    if (maskingResult.secretsMasked > 0) {
      console.info(`[INFO] Masked ${maskingResult.secretsMasked} secrets in metadata.json`);
    }
  } catch (error) {
    // マスキング失敗は致命的エラーとして扱う
    console.error(`[ERROR] Secret masking failed: ${(error as Error).message}`);
    throw new Error('Cannot commit metadata.json with unmasked secrets');
  }
  
  // ... コミット処理 ...
}
```

## 推奨アプローチ

**解決策1（URL サニタイズ）を優先実装**:
- 根本原因（トークンがmetadataに含まれること）を解決
- シンプルで確実
- 副作用がない

**解決策2 と 3 を追加の安全策として実装**:
- Defense in Depth（多層防御）
- 他の箇所でトークンが混入した場合にも対応

## 実装タスク

- [ ] `src/utils/git-url-utils.ts` を作成
- [ ] `sanitizeGitUrl()` 関数を実装
- [ ] `src/commands/init.ts` でremote URLをサニタイズ（2箇所: 192行, 236行）
- [ ] `sanitizeGitUrl()` のユニットテストを追加
  - [ ] HTTPS + トークン形式のテスト
  - [ ] HTTPS + ユーザー:パスワード形式のテスト
  - [ ] SSH形式のテスト（変更なし）
  - [ ] 通常のHTTPS形式のテスト（変更なし）
- [ ] `SecretMasker` に `metadata.json` を追加
- [ ] `commitWorkflowInit()` でマスキングを確実に実行
- [ ] 統合テストでトークン埋め込みURLでの動作を確認

## 見積もり
1日

## 関連Issue
セキュリティ重要度: HIGH

## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-54/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
