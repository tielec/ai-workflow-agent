# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-51/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #51
- **タイトル**: 機能追加: 環境変数アクセスを一元化する設定管理を追加
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/51
- **ラベル**: なし

### 本文

## 概要
環境変数が 20 箇所以上で `process.env` を通じて直接アクセスされており、以下の問題があります：
- 一元化された検証がない
- デフォルト値が不整合
- テストが困難（process.env のモックが必要）
- 環境変数の型安全性がない
- 必須/オプションの設定のドキュメントがない

**重要度:** MEDIUM

## 現在のパターン
```typescript
const homeDir = process.env.HOME ?? null;
const token = process.env.GITHUB_TOKEN ?? null;
const codexKey = process.env.CODEX_API_KEY ?? process.env.OPENAI_API_KEY;
```

## 提案する解決策
設定サービスを作成:

```typescript
// src/core/config.ts

export interface IConfig {
  // GitHub
  getGitHubToken(): string;
  getGitHubRepository(): string | null;
  
  // エージェント
  getCodexApiKey(): string | null;
  getClaudeCredentialsPath(): string | null;
  getClaudeOAuthToken(): string | null;
  
  // Git
  getGitCommitUserName(): string | null;
  getGitCommitUserEmail(): string | null;
  
  // パス
  getHomeDir(): string;
  getReposRoot(): string | null;
  
  // 動作
  isCI(): boolean;
}

export class Config implements IConfig {
  getGitHubToken(): string {
    const token = process.env.GITHUB_TOKEN;
    if (!token) {
      throw new Error('GITHUB_TOKEN environment variable is required');
    }
    return token;
  }
  
  getGitHubRepository(): string | null {
    return process.env.GITHUB_REPOSITORY ?? null;
  }
  
  getCodexApiKey(): string | null {
    return process.env.CODEX_API_KEY ?? process.env.OPENAI_API_KEY ?? null;
  }
  
  getClaudeCredentialsPath(): string | null {
    return process.env.CLAUDE_CODE_CREDENTIALS_PATH ?? null;
  }
  
  getClaudeOAuthToken(): string | null {
    return process.env.CLAUDE_CODE_OAUTH_TOKEN ?? null;
  }
  
  getGitCommitUserName(): string | null {
    return process.env.GIT_COMMIT_USER_NAME ?? null;
  }
  
  getGitCommitUserEmail(): string | null {
    return process.env.GIT_COMMIT_USER_EMAIL ?? null;
  }
  
  getHomeDir(): string {
    const home = process.env.HOME ?? process.env.USERPROFILE;
    if (!home) {
      throw new Error('HOME or USERPROFILE environment variable is required');
    }
    return home;
  }
  
  getReposRoot(): string | null {
    return process.env.REPOS_ROOT ?? null;
  }
  
  isCI(): boolean {
    return process.env.CI === 'true' || !!process.env.JENKINS_HOME;
  }
}

// シングルトンインスタンス
export const config = new Config();
```

使用例:

```typescript
import { config } from '@/core/config';

// 検証付きの型安全なアクセス
const token = config.getGitHubToken(); // 設定されていない場合は例外

// null処理付きのオプション設定
const reposRoot = config.getReposRoot();
if (reposRoot) {
  // 使用
}
```

## メリット
- 一元化された検証
- 型安全な設定アクセス
- 自己文書化（メソッド名が必須設定を示す）
- テストが容易（Config インスタンスをモック）
- デフォルト値の変更が単一ポイントで可能
- 設定不足時のより良いエラーメッセージ

## 実装計画
1. Config クラスを作成（1日）
2. process.env アクセスを段階的に置き換え（2日）：
   - commands/ から開始
   - 次に core/
   - 最後に phases/
3. 検証テストを追加（0.5日）

## 見積もり
2-3日

## 影響を受けるファイル
20ファイル以上で直接 process.env アクセス

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-51/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
