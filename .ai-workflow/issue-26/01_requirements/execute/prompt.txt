# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-26/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #26
- **タイトル**: [REFACTOR] 残り4ファイルの軽量リファクタリング
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/26
- **ラベル**: なし

### 本文

## 概要
比較的小規模な4ファイルについて、重複ロジックの抽出とヘルパー関数の分離により、可読性と保守性を向上させます。

## 対象ファイル
- `src/core/codex-agent-client.ts` (359行)
- `src/core/claude-agent-client.ts` (354行)
- `src/core/metadata-manager.ts` (342行)
- `src/core/phase-dependencies.ts` (336行)

## 目標
- 各ファイルを **250行以下** に削減（努力目標）
- 重複ロジックの削減
- ヘルパー関数の適切な分離

## 実装内容

### codex-agent-client.ts
- JSONイベントパース処理の共通化
- ログフォーマット処理の分離

### claude-agent-client.ts
- SDKイベントハンドリングの共通化
- ログフォーマット処理の分離

### metadata-manager.ts
- ファイルI/O操作の共通化
- バリデーション処理の分離

### phase-dependencies.ts
- プリセット定義の構造化
- 依存関係検証ロジックの整理

## 設計指針
1. 各ファイル内での小規模な整理にとどめる
2. 破壊的変更を避ける
3. 既存のテストを維持
4. 必要に応じてヘルパーモジュールを作成

## 検証項目
- [ ] 全エージェントクライアントのテストがパス
- [ ] メタデータ操作のテストがパス
- [ ] 依存関係検証のテストがパス
- [ ] 各ファイルのコード行数が削減

## 関連Issue
親Issue: #1

## 優先度
**低** - 現状でも比較的管理可能なサイズ、他の改善完了後に対処

## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-26/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
