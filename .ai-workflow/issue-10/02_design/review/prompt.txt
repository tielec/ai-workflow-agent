# 詳細設計フェーズ - レビュープロンプト

## レビュー対象
設計書をクリティカルシンキングの観点からレビューしてください。

### 設計書
@.ai-workflow/issue-10/02_design/output/design.md

### 要件定義書（参考）
@.ai-workflow/issue-10/01_requirements/output/requirements.md

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #10
- **タイトル**: Git コミット頻度とレジューム粒度の改善
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/10
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は各フェーズ終了後にまとめて Git コミットを行い、レジュームも各フェーズ単位で実行されます。これを改善し、execute / review / revise の各ステップ後にコミット＆プッシュを行い、ステップ単位でのレジュームを可能にします。

## 背景

### 現在の動作

**Git コミットのタイミング**:
- 各フェーズ（planning, requirements, design, etc.）が完了した後に1回だけコミット
- コミットメッセージ: "[ai-workflow] Phase X (phase_name) - completed"

**レジュームの粒度**:
- フェーズ単位でのレジューム
- metadata.json の phases[phase_name].status が "completed" か確認
- 失敗したフェーズは最初から再実行

### 問題点

以下のシナリオで非効率な再実行が発生します：

#### シナリオ1: Review 失敗後の再実行

```
Phase: Requirements
├── execute() ✅ 成功（requirements.md 生成、15分）
├── review() ❌ 失敗（レビュー基準を満たさない）
└── revise() - 未実行

→ レジューム時: execute() から再実行（15分が無駄）
→ 理想: review() から再実行したい
```

#### シナリオ2: Revise 失敗後の再実行

```
Phase: Implementation
├── execute() ✅ 成功（コード実装、30分）
├── review() ✅ 成功（レビュー通過、5分）
├── revise() ❌ 失敗（修正中にエラー、3回目のリトライで失敗）
└── Git コミット - 未実行（フェーズ未完了）

→ レジューム時: execute() から再実行（30分+5分が無駄）
→ 理想: revise() から再実行したい
```

#### シナリオ3: CI/CD での再実行コスト

Jenkins などの CI 環境で実行した場合：
- 各フェーズで Claude API を呼び出すため、再実行コストが高い
- フェーズ全体の再実行はトークン消費量と実行時間を無駄に増加させる

## 提案する改善内容

### 1. Git コミット＆プッシュの細分化

各ステップ（execute / review / revise）の完了後に Git コミット＆プッシュを実行：

```
Phase: Requirements
├── execute() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - execute completed"
├── review() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - review completed"
└── revise() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - revise completed"
```

### 2. レジューム粒度の細分化

metadata.json に現在のステップを記録し、ステップ単位でレジューム：

```json
{
  "phases": {
    "requirements": {
      "status": "in_progress",
      "current_step": "review",
      "completed_steps": ["execute"],
      "output_files": {
        "execute": ".ai-workflow/issue-123/01_requirements/output/requirements.md"
      }
    }
  }
}
```

### 3. CI 環境でのレジューム動作

Jenkins などの CI 環境では各ビルドでワークスペースがリセットされるため：

1. ビルド開始時にリモートブランチから最新状態を pull
2. metadata.json（リモートに存在）を読み込み
3. current_step から処理を再開
4. 各ステップ完了後にコミット＆プッシュ（リモートに記録）

```
Jenkins Build #1:
├── execute() ✅ → コミット＆プッシュ成功
├── review() ❌ 失敗
└── ビルド終了（ワークスペース削除）

Jenkins Build #2（レジューム）:
├── git pull（最新状態を取得）
├── metadata.json 読み込み（current_step: "review", completed_steps: ["execute"]）
├── execute() ⏭️ スキップ
└── review() 🔄 再実行
```

## 機能要件

### FR-1: ステップ単位の Git コミット＆プッシュ

**要件**: execute, review, revise の各ステップ完了後に Git コミット＆プッシュを実行

**コミットメッセージ形式**:
```
[ai-workflow] Phase {phase_number} ({phase_name}) - {step} completed

Issue: #10
Phase: {phase_number} ({phase_name})
Step: {step}
Status: completed

Auto-generated by AI Workflow
```

**プッシュ動作**:
- コミット成功後、即座にリモートブランチへプッシュ
- プッシュ失敗時は最大3回リトライ（既存の pushToRemote() の機能）
- リトライでも失敗した場合、ステップは未完了として記録

### FR-2: メタデータの拡張

**新規フィールド**:
```typescript
interface PhaseMetadata {
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  current_step?: 'execute' | 'review' | 'revise' | null;
  completed_steps: ('execute' | 'review' | 'revise')[];
  // 既存フィールド
  retry_count: number;
  output_files: Record<string, string>;
  // ...
}
```

**メタデータの保存タイミング**:
- 各ステップ開始前: current_step を更新
- 各ステップ完了後: completed_steps に追加、current_step を null に
- メタデータも Git コミットに含めてプッシュ

### FR-3: ステップ単位のレジューム

**要件**: レジューム時に current_step から処理を再開

**動作**:
1. リモートブランチから最新状態を pull（CI 環境）
2. metadata.json の current_step を確認
3. completed_steps に含まれるステップはスキップ
4. current_step から処理を再開
5. 各ステップ完了後に completed_steps を更新してプッシュ

### FR-4: プッシュ失敗時の動作

**要件**: プッシュ失敗時は同ステップ内でリトライ、全て失敗したらステップ未完了

**動作**:
1. コミット成功後、pushToRemote() を実行（最大3回リトライ）
2. プッシュ成功 → ステップ完了、completed_steps に追加
3. プッシュ失敗（3回リトライ後）→ ステップ未完了、current_step のまま
4. 次回レジューム時、同じステップを最初から再実行

**重要**: CI 環境ではローカルコミットはワークスペースリセットで消えるため、プッシュ成功が必須

## 受け入れ基準

### AC-1: Execute ステップ後に Git コミット＆プッシュ

```bash
ai-workflow-v2 execute --phase requirements --issue 123
# execute() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed

# リモートにもプッシュされている
git log origin/ai-workflow/issue-123 -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed
```

### AC-2: Review ステップ後に Git コミット＆プッシュ

```bash
# review() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - review completed
```

### AC-3: Revise ステップ後に Git コミット＆プッシュ

```bash
# revise() 完了後（レビュー失敗時のみ実行）
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - revise completed
```

### AC-4: メタデータに current_step が記録され、リモートにプッシュされる

```bash
git pull origin ai-workflow/issue-123
cat .ai-workflow/issue-123/metadata.json | jq '.phases.requirements'
# Expected:
{
  "status": "in_progress",
  "current_step": "review",
  "completed_steps": ["execute"],
  ...
}
```

### AC-5: Execute 完了後のレジューム（CI 環境）

```bash
# Jenkins Build #1: execute 完了、review で失敗
# Jenkins Build #2（レジューム）:
git pull origin ai-workflow/issue-123
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() スキップ、review() から再開
```

### AC-6: プッシュ失敗後の動作

```bash
# コミット成功、プッシュ失敗（3回リトライ後）
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: ステップ未完了、current_step: "execute" のまま

# レジューム
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() を最初から再実行
```

### AC-7: フェーズ完了後の Git ログ

```bash
git log --oneline -3
# Expected:
# abc1234 [ai-workflow] Phase 1 (requirements) - revise completed
# def5678 [ai-workflow] Phase 1 (requirements) - review completed
# ghi9012 [ai-workflow] Phase 1 (requirements) - execute completed
```

## 優先度

**High** - レジューム機能の改善により、CI/CD 実行時間とコストを大幅に削減できる


## 品質ゲート（Phase 2）

設計書は以下の品質ゲートをクリアする必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-10/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 2:" または "## Phase 2:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 設計内容との照合

設計書（design.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載の設計項目が記述されているか
- Task記載の戦略判断が明記されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 2-2: テスト戦略の決定
  - 不足: テスト戦略の判断根拠が記載されていません
- [ ] Task 2-3: 影響範囲分析
  - 不足: 既存コードへの影響範囲が分析されていません

これらのタスクを完了してから再提出してください。
```

### ⚠️ 重要: Planning.mdの内容はレビュー結果に含めない

Planning.mdの読み込みと照合作業は必要ですが、**planning.mdの全文やPlanning Phaseのレビュー内容をレビュー結果に含めないでください**。

レビュー結果には以下のみを含めること:
- 設計書（design.md）に対する評価
- Planning.mdとの照合で発見した未完了タスク（FAIL時のみ）
- 設計書固有の改善提案

Planning Phaseのレビュー詳細やplanning.mdの内容全体は出力しないこと。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 設計書が次フェーズ（テストシナリオ作成）に進める状態であれば合格
   - 細かい表現の改善は改善提案として記載（ブロッカーにしない）

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テストシナリオ）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - 実装フェーズで対応可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「ダメ」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 戦略判断の妥当性（最重要）

**実装戦略（CREATE/EXTEND/REFACTOR）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 要件定義書の内容と整合しているか
- 既存コードへの影響が適切に評価されているか

**テスト戦略（UNIT_ONLY/INTEGRATION_ONLY/BDD_ONLY/UNIT_INTEGRATION/UNIT_BDD/INTEGRATION_BDD/ALL）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 機能の複雑度に見合ったテスト戦略か
- 要件定義の受け入れ基準と整合しているか

**テストコード戦略（EXTEND_TEST/CREATE_TEST/BOTH_TEST）**:
- 判断根拠が具体的かつ論理的に記載されているか
- 既存テストとの関係が明確か

### 2. 影響範囲分析の適切性

- 既存コードへの影響が網羅的に分析されているか
- 依存関係が正しく把握されているか
- マイグレーションの必要性が評価されているか

### 3. ファイルリストの完全性

- 新規作成ファイルがリストアップされているか
- 修正が必要な既存ファイルがリストアップされているか
- パスが具体的で実装可能か

### 4. 設計の実装可能性

- 設計が具体的で実装者が迷わないか
- 技術的に実装可能な設計か
- 既存プロジェクトの規約・パターンに準拠しているか

### 5. 要件との対応（トレーサビリティ）

- 要件定義書の各要件に対応する設計があるか
- 要件の漏れがないか

### 6. セキュリティ考慮

- セキュリティリスクが識別されているか
- 対策が具体的か

### 7. 非機能要件への対応

- パフォーマンス考慮があるか
- スケーラビリティ考慮があるか
- 保守性考慮があるか

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 3つの戦略判断（実装・テスト・テストコード）のいずれかが欠落
- 判断根拠が記載されていない、または論理的に破綻している
- 変更ファイルリストが未記載
- 設計が実装不可能（技術的制約に違反）
- 既存システムを破壊する設計
- 重大なセキュリティリスクが未対策
- 要件との対応が不明確

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- より良い設計パターンの提案
- パフォーマンス最適化の余地
- ドキュメントの充実（例: 図表追加）
- エッジケースの追加考慮
- より詳細な影響範囲分析
- セキュリティ対策の強化

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

- [x/  ] **実装戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **テスト戦略の判断根拠が明記されている**: PASS/FAIL - （コメント）
- [x/  ] **既存コードへの影響範囲が分析されている**: PASS/FAIL - （コメント）
- [x/  ] **変更が必要なファイルがリストアップされている**: PASS/FAIL - （コメント）
- [x/  ] **設計が実装可能である**: PASS/FAIL - （コメント）

## 詳細レビュー

### 1. 戦略判断の妥当性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. 影響範囲分析の適切性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. ファイルリストの完全性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 4. 設計の実装可能性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 5. 要件との対応

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 6. セキュリティ考慮

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 7. 非機能要件への対応

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（設計書全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

## レビュー実施

上記フォーマットに従って、設計書のクリティカルシンキングレビューを実施してください。

## ⚠️ 重要: 判定の出力は必須

**レビュー結果の最後に、必ず以下のいずれかの形式で判定を出力してください：**

```
---
**判定: PASS**
```

または

```
---
**判定: PASS_WITH_SUGGESTIONS**
```

または

```
---
**判定: FAIL**
```

**この判定がないと、レビュー結果が正しく処理されません。必ず3つのいずれかの判定を、上記の正確な形式で明示的に出力してください。**
