# 詳細設計フェーズ - 実行プロンプト

## タスク概要
要件定義書とGitHub Issueの内容から、詳細な設計書を作成してください。このフェーズでは、**実装戦略・テスト戦略・テストコード戦略の判断**も行います。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-10/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-10/01_requirements/output/requirements.md

### GitHub Issue情報
## Issue概要

- **Issue番号**: #10
- **タイトル**: Git コミット頻度とレジューム粒度の改善
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/10
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は各フェーズ終了後にまとめて Git コミットを行い、レジュームも各フェーズ単位で実行されます。これを改善し、execute / review / revise の各ステップ後にコミット＆プッシュを行い、ステップ単位でのレジュームを可能にします。

## 背景

### 現在の動作

**Git コミットのタイミング**:
- 各フェーズ（planning, requirements, design, etc.）が完了した後に1回だけコミット
- コミットメッセージ: "[ai-workflow] Phase X (phase_name) - completed"

**レジュームの粒度**:
- フェーズ単位でのレジューム
- metadata.json の phases[phase_name].status が "completed" か確認
- 失敗したフェーズは最初から再実行

### 問題点

以下のシナリオで非効率な再実行が発生します：

#### シナリオ1: Review 失敗後の再実行

```
Phase: Requirements
├── execute() ✅ 成功（requirements.md 生成、15分）
├── review() ❌ 失敗（レビュー基準を満たさない）
└── revise() - 未実行

→ レジューム時: execute() から再実行（15分が無駄）
→ 理想: review() から再実行したい
```

#### シナリオ2: Revise 失敗後の再実行

```
Phase: Implementation
├── execute() ✅ 成功（コード実装、30分）
├── review() ✅ 成功（レビュー通過、5分）
├── revise() ❌ 失敗（修正中にエラー、3回目のリトライで失敗）
└── Git コミット - 未実行（フェーズ未完了）

→ レジューム時: execute() から再実行（30分+5分が無駄）
→ 理想: revise() から再実行したい
```

#### シナリオ3: CI/CD での再実行コスト

Jenkins などの CI 環境で実行した場合：
- 各フェーズで Claude API を呼び出すため、再実行コストが高い
- フェーズ全体の再実行はトークン消費量と実行時間を無駄に増加させる

## 提案する改善内容

### 1. Git コミット＆プッシュの細分化

各ステップ（execute / review / revise）の完了後に Git コミット＆プッシュを実行：

```
Phase: Requirements
├── execute() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - execute completed"
├── review() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - review completed"
└── revise() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - revise completed"
```

### 2. レジューム粒度の細分化

metadata.json に現在のステップを記録し、ステップ単位でレジューム：

```json
{
  "phases": {
    "requirements": {
      "status": "in_progress",
      "current_step": "review",
      "completed_steps": ["execute"],
      "output_files": {
        "execute": ".ai-workflow/issue-123/01_requirements/output/requirements.md"
      }
    }
  }
}
```

### 3. CI 環境でのレジューム動作

Jenkins などの CI 環境では各ビルドでワークスペースがリセットされるため：

1. ビルド開始時にリモートブランチから最新状態を pull
2. metadata.json（リモートに存在）を読み込み
3. current_step から処理を再開
4. 各ステップ完了後にコミット＆プッシュ（リモートに記録）

```
Jenkins Build #1:
├── execute() ✅ → コミット＆プッシュ成功
├── review() ❌ 失敗
└── ビルド終了（ワークスペース削除）

Jenkins Build #2（レジューム）:
├── git pull（最新状態を取得）
├── metadata.json 読み込み（current_step: "review", completed_steps: ["execute"]）
├── execute() ⏭️ スキップ
└── review() 🔄 再実行
```

## 機能要件

### FR-1: ステップ単位の Git コミット＆プッシュ

**要件**: execute, review, revise の各ステップ完了後に Git コミット＆プッシュを実行

**コミットメッセージ形式**:
```
[ai-workflow] Phase {phase_number} ({phase_name}) - {step} completed

Issue: #10
Phase: {phase_number} ({phase_name})
Step: {step}
Status: completed

Auto-generated by AI Workflow
```

**プッシュ動作**:
- コミット成功後、即座にリモートブランチへプッシュ
- プッシュ失敗時は最大3回リトライ（既存の pushToRemote() の機能）
- リトライでも失敗した場合、ステップは未完了として記録

### FR-2: メタデータの拡張

**新規フィールド**:
```typescript
interface PhaseMetadata {
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  current_step?: 'execute' | 'review' | 'revise' | null;
  completed_steps: ('execute' | 'review' | 'revise')[];
  // 既存フィールド
  retry_count: number;
  output_files: Record<string, string>;
  // ...
}
```

**メタデータの保存タイミング**:
- 各ステップ開始前: current_step を更新
- 各ステップ完了後: completed_steps に追加、current_step を null に
- メタデータも Git コミットに含めてプッシュ

### FR-3: ステップ単位のレジューム

**要件**: レジューム時に current_step から処理を再開

**動作**:
1. リモートブランチから最新状態を pull（CI 環境）
2. metadata.json の current_step を確認
3. completed_steps に含まれるステップはスキップ
4. current_step から処理を再開
5. 各ステップ完了後に completed_steps を更新してプッシュ

### FR-4: プッシュ失敗時の動作

**要件**: プッシュ失敗時は同ステップ内でリトライ、全て失敗したらステップ未完了

**動作**:
1. コミット成功後、pushToRemote() を実行（最大3回リトライ）
2. プッシュ成功 → ステップ完了、completed_steps に追加
3. プッシュ失敗（3回リトライ後）→ ステップ未完了、current_step のまま
4. 次回レジューム時、同じステップを最初から再実行

**重要**: CI 環境ではローカルコミットはワークスペースリセットで消えるため、プッシュ成功が必須

## 受け入れ基準

### AC-1: Execute ステップ後に Git コミット＆プッシュ

```bash
ai-workflow-v2 execute --phase requirements --issue 123
# execute() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed

# リモートにもプッシュされている
git log origin/ai-workflow/issue-123 -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed
```

### AC-2: Review ステップ後に Git コミット＆プッシュ

```bash
# review() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - review completed
```

### AC-3: Revise ステップ後に Git コミット＆プッシュ

```bash
# revise() 完了後（レビュー失敗時のみ実行）
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - revise completed
```

### AC-4: メタデータに current_step が記録され、リモートにプッシュされる

```bash
git pull origin ai-workflow/issue-123
cat .ai-workflow/issue-123/metadata.json | jq '.phases.requirements'
# Expected:
{
  "status": "in_progress",
  "current_step": "review",
  "completed_steps": ["execute"],
  ...
}
```

### AC-5: Execute 完了後のレジューム（CI 環境）

```bash
# Jenkins Build #1: execute 完了、review で失敗
# Jenkins Build #2（レジューム）:
git pull origin ai-workflow/issue-123
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() スキップ、review() から再開
```

### AC-6: プッシュ失敗後の動作

```bash
# コミット成功、プッシュ失敗（3回リトライ後）
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: ステップ未完了、current_step: "execute" のまま

# レジューム
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() を最初から再実行
```

### AC-7: フェーズ完了後の Git ログ

```bash
git log --oneline -3
# Expected:
# abc1234 [ai-workflow] Phase 1 (requirements) - revise completed
# def5678 [ai-workflow] Phase 1 (requirements) - review completed
# ghi9012 [ai-workflow] Phase 1 (requirements) - execute completed
```

## 優先度

**High** - レジューム機能の改善により、CI/CD 実行時間とコストを大幅に削減できる


### 既存コードベースの理解

このリポジトリのプロジェクト構造、アーキテクチャ、コーディング規約を理解するため、以下のドキュメントを参照してください：

- プロジェクト全体のガイドライン: @CLAUDE.md（存在する場合）
- アーキテクチャ設計: @ARCHITECTURE.md（存在する場合）
- プロジェクトREADME: @README.md
- その他、関連するREADME、CONTRIBUTION.md等のドキュメント

上記ドキュメントから以下を把握してください：
- プロジェクトの目的とアーキテクチャ
- ディレクトリ構造とコンポーネント構成
- 既存のコーディング規約やパターン
- 開発ワークフロー

## 設計書作成手順

### 1. 既存コードベース分析

要件定義書とIssue内容から、以下を分析してください：

1. **影響範囲の特定**
   - どのコンポーネント（Ansible/Pulumi/Jenkins/Scripts）が影響を受けるか
   - 既存ファイルの修正が必要か、新規ファイルの作成が必要か
   - 依存関係のあるコンポーネントは何か

2. **既存パターンの調査**
   - 類似の機能実装がないか調査
   - 既存のコーディング規約やパターンを確認
   - 再利用可能なコンポーネントの特定

### 2. 実装戦略の判断（必須）

以下の3つから選択し、**判断根拠を明記**してください：

- **CREATE（新規作成）**: 既存コードとの依存関係がなく、完全に新しい機能
- **EXTEND（拡張）**: 既存コードを拡張・修正する必要がある
- **REFACTOR（リファクタリング）**: 既存コードの構造改善が主目的

**判断基準**：
- 既存ファイルへの影響範囲
- 新規ファイルの作成数
- 既存機能との統合度

**出力形式**：
```markdown
### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- （理由1）
- （理由2）
```

### 3. テスト戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **UNIT_ONLY**: Unitテストのみ
- **INTEGRATION_ONLY**: Integrationテストのみ
- **BDD_ONLY**: BDDテストのみ
- **UNIT_INTEGRATION**: Unit + Integration
- **UNIT_BDD**: Unit + BDD
- **INTEGRATION_BDD**: Integration + BDD
- **ALL**: すべて

**判断基準**：
- 機能の複雑度
- ユーザーストーリーの有無
- 既存テストとの整合性

**出力形式**：
```markdown
### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- （理由1）
- （理由2）
```

### 4. テストコード戦略の判断（必須）

以下から選択し、**判断根拠を明記**してください：

- **EXTEND_TEST（既存テストの拡張）**: 既存テストファイルに追加
- **CREATE_TEST（新規テスト作成）**: 新しいテストファイルを作成
- **BOTH_TEST（両方）**: 既存テストの拡張と新規テストの作成

**判断基準**：
- 既存テストファイルの有無
- 既存テストとの関連性

**出力形式**：
```markdown
### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- （理由1）
- （理由2）
```

### 5. 設計書の構成

以下のセクションを含む設計書を作成してください：

#### 必須セクション：

1. **アーキテクチャ設計**
   - システム全体図
   - コンポーネント間の関係
   - データフロー

2. **実装戦略判断**（セクション2で記載）

3. **テスト戦略判断**（セクション3で記載）

4. **テストコード戦略判断**（セクション4で記載）

5. **影響範囲分析**
   - 既存コードへの影響
   - 依存関係の変更
   - マイグレーション要否

6. **変更・追加ファイルリスト**
   - 新規作成ファイル（相対パス）
   - 修正が必要な既存ファイル（相対パス）
   - 削除が必要なファイル（相対パス）

7. **詳細設計**
   - クラス設計（必要な場合）
   - 関数設計（主要な関数のみ）
   - データ構造設計
   - インターフェース設計

8. **セキュリティ考慮事項**
   - 認証・認可
   - データ保護
   - セキュリティリスクと対策

9. **非機能要件への対応**
   - パフォーマンス
   - スケーラビリティ
   - 保守性

10. **実装の順序**
    - 実装順序の推奨
    - 依存関係の考慮

## 品質ゲート（Phase 2）

設計書は以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略の判断根拠が明記されている**
- [ ] **テスト戦略の判断根拠が明記されている**
- [ ] **既存コードへの影響範囲が分析されている**
- [ ] **変更が必要なファイルがリストアップされている**
- [ ] **設計が実装可能である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **既存プロジェクト構造を尊重**: 既存のディレクトリ構造やコーディング規約に従ってください
2. **トレーサビリティ**: 要件定義書の各要件に対応する設計を明示してください
3. **実装可能性**: 実装できない設計や曖昧な設計は避けてください
4. **判断の明示**: 3つの戦略判断（実装・テスト・テストコード）は必ず明記してください
5. **レビューされることを意識**: 設計書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（5つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 判断根拠は具体的かつ論理的に記載すること

## 出力形式

設計書は `.ai-workflow/issue-{issue_number}/02_design/output/design.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。図表が必要な場合はMarkdownのコードブロックやテーブルを活用してください。

## 実装開始

上記を踏まえ、詳細設計書を作成してください。
