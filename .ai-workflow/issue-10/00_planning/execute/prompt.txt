# プロジェクト計画フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細なプロジェクト計画書を作成してください。
Phase 0はプロジェクトマネージャの役割を担い、開発作業を計画的かつ効率的に進められるようにします。

## Issue情報

## Issue概要

- **Issue番号**: #10
- **タイトル**: Git コミット頻度とレジューム粒度の改善
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/10
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は各フェーズ終了後にまとめて Git コミットを行い、レジュームも各フェーズ単位で実行されます。これを改善し、execute / review / revise の各ステップ後にコミット＆プッシュを行い、ステップ単位でのレジュームを可能にします。

## 背景

### 現在の動作

**Git コミットのタイミング**:
- 各フェーズ（planning, requirements, design, etc.）が完了した後に1回だけコミット
- コミットメッセージ: "[ai-workflow] Phase X (phase_name) - completed"

**レジュームの粒度**:
- フェーズ単位でのレジューム
- metadata.json の phases[phase_name].status が "completed" か確認
- 失敗したフェーズは最初から再実行

### 問題点

以下のシナリオで非効率な再実行が発生します：

#### シナリオ1: Review 失敗後の再実行

```
Phase: Requirements
├── execute() ✅ 成功（requirements.md 生成、15分）
├── review() ❌ 失敗（レビュー基準を満たさない）
└── revise() - 未実行

→ レジューム時: execute() から再実行（15分が無駄）
→ 理想: review() から再実行したい
```

#### シナリオ2: Revise 失敗後の再実行

```
Phase: Implementation
├── execute() ✅ 成功（コード実装、30分）
├── review() ✅ 成功（レビュー通過、5分）
├── revise() ❌ 失敗（修正中にエラー、3回目のリトライで失敗）
└── Git コミット - 未実行（フェーズ未完了）

→ レジューム時: execute() から再実行（30分+5分が無駄）
→ 理想: revise() から再実行したい
```

#### シナリオ3: CI/CD での再実行コスト

Jenkins などの CI 環境で実行した場合：
- 各フェーズで Claude API を呼び出すため、再実行コストが高い
- フェーズ全体の再実行はトークン消費量と実行時間を無駄に増加させる

## 提案する改善内容

### 1. Git コミット＆プッシュの細分化

各ステップ（execute / review / revise）の完了後に Git コミット＆プッシュを実行：

```
Phase: Requirements
├── execute() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - execute completed"
├── review() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - review completed"
└── revise() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - revise completed"
```

### 2. レジューム粒度の細分化

metadata.json に現在のステップを記録し、ステップ単位でレジューム：

```json
{
  "phases": {
    "requirements": {
      "status": "in_progress",
      "current_step": "review",
      "completed_steps": ["execute"],
      "output_files": {
        "execute": ".ai-workflow/issue-123/01_requirements/output/requirements.md"
      }
    }
  }
}
```

### 3. CI 環境でのレジューム動作

Jenkins などの CI 環境では各ビルドでワークスペースがリセットされるため：

1. ビルド開始時にリモートブランチから最新状態を pull
2. metadata.json（リモートに存在）を読み込み
3. current_step から処理を再開
4. 各ステップ完了後にコミット＆プッシュ（リモートに記録）

```
Jenkins Build #1:
├── execute() ✅ → コミット＆プッシュ成功
├── review() ❌ 失敗
└── ビルド終了（ワークスペース削除）

Jenkins Build #2（レジューム）:
├── git pull（最新状態を取得）
├── metadata.json 読み込み（current_step: "review", completed_steps: ["execute"]）
├── execute() ⏭️ スキップ
└── review() 🔄 再実行
```

## 機能要件

### FR-1: ステップ単位の Git コミット＆プッシュ

**要件**: execute, review, revise の各ステップ完了後に Git コミット＆プッシュを実行

**コミットメッセージ形式**:
```
[ai-workflow] Phase {phase_number} ({phase_name}) - {step} completed

Issue: #10
Phase: {phase_number} ({phase_name})
Step: {step}
Status: completed

Auto-generated by AI Workflow
```

**プッシュ動作**:
- コミット成功後、即座にリモートブランチへプッシュ
- プッシュ失敗時は最大3回リトライ（既存の pushToRemote() の機能）
- リトライでも失敗した場合、ステップは未完了として記録

### FR-2: メタデータの拡張

**新規フィールド**:
```typescript
interface PhaseMetadata {
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  current_step?: 'execute' | 'review' | 'revise' | null;
  completed_steps: ('execute' | 'review' | 'revise')[];
  // 既存フィールド
  retry_count: number;
  output_files: Record<string, string>;
  // ...
}
```

**メタデータの保存タイミング**:
- 各ステップ開始前: current_step を更新
- 各ステップ完了後: completed_steps に追加、current_step を null に
- メタデータも Git コミットに含めてプッシュ

### FR-3: ステップ単位のレジューム

**要件**: レジューム時に current_step から処理を再開

**動作**:
1. リモートブランチから最新状態を pull（CI 環境）
2. metadata.json の current_step を確認
3. completed_steps に含まれるステップはスキップ
4. current_step から処理を再開
5. 各ステップ完了後に completed_steps を更新してプッシュ

### FR-4: プッシュ失敗時の動作

**要件**: プッシュ失敗時は同ステップ内でリトライ、全て失敗したらステップ未完了

**動作**:
1. コミット成功後、pushToRemote() を実行（最大3回リトライ）
2. プッシュ成功 → ステップ完了、completed_steps に追加
3. プッシュ失敗（3回リトライ後）→ ステップ未完了、current_step のまま
4. 次回レジューム時、同じステップを最初から再実行

**重要**: CI 環境ではローカルコミットはワークスペースリセットで消えるため、プッシュ成功が必須

## 受け入れ基準

### AC-1: Execute ステップ後に Git コミット＆プッシュ

```bash
ai-workflow-v2 execute --phase requirements --issue 123
# execute() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed

# リモートにもプッシュされている
git log origin/ai-workflow/issue-123 -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed
```

### AC-2: Review ステップ後に Git コミット＆プッシュ

```bash
# review() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - review completed
```

### AC-3: Revise ステップ後に Git コミット＆プッシュ

```bash
# revise() 完了後（レビュー失敗時のみ実行）
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - revise completed
```

### AC-4: メタデータに current_step が記録され、リモートにプッシュされる

```bash
git pull origin ai-workflow/issue-123
cat .ai-workflow/issue-123/metadata.json | jq '.phases.requirements'
# Expected:
{
  "status": "in_progress",
  "current_step": "review",
  "completed_steps": ["execute"],
  ...
}
```

### AC-5: Execute 完了後のレジューム（CI 環境）

```bash
# Jenkins Build #1: execute 完了、review で失敗
# Jenkins Build #2（レジューム）:
git pull origin ai-workflow/issue-123
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() スキップ、review() から再開
```

### AC-6: プッシュ失敗後の動作

```bash
# コミット成功、プッシュ失敗（3回リトライ後）
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: ステップ未完了、current_step: "execute" のまま

# レジューム
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() を最初から再実行
```

### AC-7: フェーズ完了後の Git ログ

```bash
git log --oneline -3
# Expected:
# abc1234 [ai-workflow] Phase 1 (requirements) - revise completed
# def5678 [ai-workflow] Phase 1 (requirements) - review completed
# ghi9012 [ai-workflow] Phase 1 (requirements) - execute completed
```

## 優先度

**High** - レジューム機能の改善により、CI/CD 実行時間とコストを大幅に削減できる


## プロジェクト計画書の構成

以下のセクションを含むプロジェクト計画書を作成してください：

### 1. Issue分析
- **複雑度**: 簡単/中程度/複雑を判定
  - 簡単: 単一ファイルの修正、シンプルな機能追加（見積もり: ~4時間）
  - 中程度: 複数ファイルの修正、既存機能の拡張（見積もり: 4~16時間）
  - 複雑: アーキテクチャ変更、新規サブシステム追加（見積もり: 16時間~）
- **見積もり工数**: X時間（根拠を記載）
- **リスク評価**: 低/中/高

### 2. 実装戦略判断

**重要**: このセクションは最も重要です。Phase 2（Design）で使用されるため、必ず明記してください。

#### 実装戦略: CREATE / EXTEND / REFACTOR

**判断根拠**:
- CREATE: 新規ファイル・クラス・モジュールの作成が中心
- EXTEND: 既存コードの拡張（機能追加）が中心
- REFACTOR: 既存コードのリファクタリング（構造改善）が中心

（判断理由を具体的に記載）

#### テスト戦略: UNIT_ONLY / INTEGRATION_ONLY / BDD_ONLY / UNIT_INTEGRATION / UNIT_BDD / INTEGRATION_BDD / ALL

**判断根拠**:
- UNIT_ONLY: ユニットテストのみ（単純なロジック、外部依存なし）
- INTEGRATION_ONLY: インテグレーションテストのみ（外部システム連携中心）
- BDD_ONLY: BDDテストのみ（ユーザーストーリー中心）
- UNIT_INTEGRATION: ユニット + インテグレーション（一般的な機能開発）
- UNIT_BDD: ユニット + BDD（エンドユーザー向け機能）
- INTEGRATION_BDD: インテグレーション + BDD（システム間連携＋ユーザーストーリー）
- ALL: すべてのテストレベル（大規模な変更、高リスク）

（判断理由を具体的に記載）

#### テストコード戦略: EXTEND_TEST / CREATE_TEST / BOTH_TEST

**判断根拠**:
- EXTEND_TEST: 既存テストファイルに追加（既存機能の拡張時）
- CREATE_TEST: 新規テストファイル作成（新規機能追加時）
- BOTH_TEST: 両方（既存テスト拡張 + 新規テスト作成）

（判断理由を具体的に記載）

### 3. 影響範囲分析
- **既存コードへの影響**: 変更が必要なファイル・モジュール
- **依存関係の変更**: 新規依存の追加、既存依存の変更
- **マイグレーション要否**: データベーススキーマ変更、設定ファイル変更等

### 4. タスク分割

## ⚠️ 重要: チェックリスト標準フォーマット（必須）

各フェーズのタスクは、**必ずチェックリスト形式**で記述してください。このチェックリストは、Review Phaseで完了判定に使用されます。

### 標準フォーマット

```markdown
### Phase X: [フェーズ名] (見積もり: X~Yh)

- [ ] Task X-1: [タスク名] (見積もり時間)
  - [サブタスク1]
  - [サブタスク2]
- [ ] Task X-2: [タスク名] (見積もり時間)
  - [サブタスク1]
```

**重要**: このチェックリストは、Review Phaseで完了判定に使用されます。各タスクは明確で検証可能な内容にしてください。

**良い例**:
```
- [ ] Task 4-1: CLI層の分離 (3~5h)
  - cli/commands.py の作成
  - main.pyからCLIロジックを抽出
```

**悪い例**:
```
- [ ] リファクタリングを実施
```
（検証不可能なため不適切）

### 各フェーズのタスクリスト

各フェーズについて、サブタスクを洗い出してください：

#### Phase 1: 要件定義 (見積もり: Xh)

- [ ] Task 1-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2
- [ ] Task 1-2: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 2: 設計 (見積もり: Xh)

- [ ] Task 2-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 3: テストシナリオ (見積もり: Xh)

- [ ] Task 3-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 4: 実装 (見積もり: Xh)

- [ ] Task 4-1: [タスク名] (見積もり時間)
  - サブタスク1
  - サブタスク2

#### Phase 5: テストコード実装 (見積もり: Xh)

- [ ] Task 5-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 6: テスト実行 (見積もり: Xh)

- [ ] Task 6-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 7: ドキュメント (見積もり: Xh)

- [ ] Task 7-1: [タスク名] (見積もり時間)
  - サブタスク1

#### Phase 8: レポート (見積もり: Xh)

- [ ] Task 8-1: [タスク名] (見積もり時間)
  - サブタスク1

**タスク粒度基準**:
- 1タスク = 1~4時間程度で完了可能な作業単位
- 明確な完了条件（Done criteria）を持つ
- 他のタスクから独立して実装・テスト可能
- **検証可能**: Review Phaseで「完了したか」を客観的に判断できる内容

### 5. 依存関係

タスク間の依存関係をMermaid形式で図示してください：

```mermaid
graph TD
    P1[Phase 1] --> P2[Phase 2]
    P2 --> P3[Phase 3]
    P3 --> P4[Phase 4]
    P4 --> P5[Phase 5]
    P5 --> P6[Phase 6]
    P6 --> P7[Phase 7]
```

### 6. リスクと軽減策

潜在的なリスクを洗い出し、各リスクに対する軽減策を記載してください：

#### リスク1: （リスク名）
- **影響度**: 低/中/高
- **確率**: 低/中/高
- **軽減策**: （具体的な対策）

#### リスク2: （リスク名）
...

**リスクカテゴリ**:
- 技術的リスク: 新技術の学習コスト、既存システムとの統合問題
- スコープリスク: 要件の曖昧さ、スコープクリープ
- リソースリスク: 工数不足、スキル不足
- 依存リスク: 外部システム依存、ブロッキング問題

### 7. 品質ゲート

各フェーズの合格基準を定義してください：

#### Phase 1: 要件定義
- [ ] 機能要件が明確に記載されている
- [ ] 受け入れ基準が定義されている
...

#### Phase 2: 設計
- [ ] 実装戦略の判断根拠が明記されている
- [ ] テスト戦略の判断根拠が明記されている
...

（以下、Phase 3~7についても記載）

## 出力形式

Markdown形式でプロジェクト計画書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-{issue_number}/00_planning/output/planning.md
```

## 品質ゲート（Phase 0）

作成するプロジェクト計画書は、以下の品質ゲートを満たす必要があります：

- [ ] **実装戦略が明確に決定されている**（CREATE/EXTEND/REFACTOR）
- [ ] **テスト戦略が明確に決定されている**（UNIT_ONLY/.../ALL）
- [ ] **テストコード戦略が明確に決定されている**（EXTEND_TEST/CREATE_TEST/BOTH_TEST）
- [ ] **影響範囲が分析されている**
- [ ] **タスク分割が適切な粒度である**（1タスク = 1~4時間）
- [ ] **リスクが洗い出されている**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **実装戦略の判断**: Phase 2で使用されるため、必ず明記してください
   - 実装戦略: CREATE/EXTEND/REFACTOR
   - テスト戦略: UNIT_ONLY/.../ALL
   - テストコード戦略: EXTEND_TEST/CREATE_TEST/BOTH_TEST

2. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な計画を記述
   - NG例: "適切に対応する"、"必要に応じて実施"
   - OK例: "Phase 2で詳細設計を実施"、"最大3回のリトライを実施"

3. **実現可能性**: 見積もりが現実的か、リソースは十分か確認
   - タスク粒度が大きすぎないか（1タスク = 1~4時間）
   - 依存関係が正確に記載されているか

4. **リスク分析の網羅性**: 重要なリスクが見逃されていないか確認
   - 技術的リスク、スコープリスク、リソースリスク、依存リスク

5. **レビューされることを意識**: 作成した計画書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（6つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント

## プロジェクト計画書の作成を開始してください
