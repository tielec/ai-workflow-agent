# 要件定義フェーズ - 実行プロンプト

## タスク概要

GitHubのIssue情報から詳細な要件定義書を作成してください。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-10/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### GitHub Issue情報

## Issue概要

- **Issue番号**: #10
- **タイトル**: Git コミット頻度とレジューム粒度の改善
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/10
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は各フェーズ終了後にまとめて Git コミットを行い、レジュームも各フェーズ単位で実行されます。これを改善し、execute / review / revise の各ステップ後にコミット＆プッシュを行い、ステップ単位でのレジュームを可能にします。

## 背景

### 現在の動作

**Git コミットのタイミング**:
- 各フェーズ（planning, requirements, design, etc.）が完了した後に1回だけコミット
- コミットメッセージ: "[ai-workflow] Phase X (phase_name) - completed"

**レジュームの粒度**:
- フェーズ単位でのレジューム
- metadata.json の phases[phase_name].status が "completed" か確認
- 失敗したフェーズは最初から再実行

### 問題点

以下のシナリオで非効率な再実行が発生します：

#### シナリオ1: Review 失敗後の再実行

```
Phase: Requirements
├── execute() ✅ 成功（requirements.md 生成、15分）
├── review() ❌ 失敗（レビュー基準を満たさない）
└── revise() - 未実行

→ レジューム時: execute() から再実行（15分が無駄）
→ 理想: review() から再実行したい
```

#### シナリオ2: Revise 失敗後の再実行

```
Phase: Implementation
├── execute() ✅ 成功（コード実装、30分）
├── review() ✅ 成功（レビュー通過、5分）
├── revise() ❌ 失敗（修正中にエラー、3回目のリトライで失敗）
└── Git コミット - 未実行（フェーズ未完了）

→ レジューム時: execute() から再実行（30分+5分が無駄）
→ 理想: revise() から再実行したい
```

#### シナリオ3: CI/CD での再実行コスト

Jenkins などの CI 環境で実行した場合：
- 各フェーズで Claude API を呼び出すため、再実行コストが高い
- フェーズ全体の再実行はトークン消費量と実行時間を無駄に増加させる

## 提案する改善内容

### 1. Git コミット＆プッシュの細分化

各ステップ（execute / review / revise）の完了後に Git コミット＆プッシュを実行：

```
Phase: Requirements
├── execute() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - execute completed"
├── review() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - review completed"
└── revise() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - revise completed"
```

### 2. レジューム粒度の細分化

metadata.json に現在のステップを記録し、ステップ単位でレジューム：

```json
{
  "phases": {
    "requirements": {
      "status": "in_progress",
      "current_step": "review",
      "completed_steps": ["execute"],
      "output_files": {
        "execute": ".ai-workflow/issue-123/01_requirements/output/requirements.md"
      }
    }
  }
}
```

### 3. CI 環境でのレジューム動作

Jenkins などの CI 環境では各ビルドでワークスペースがリセットされるため：

1. ビルド開始時にリモートブランチから最新状態を pull
2. metadata.json（リモートに存在）を読み込み
3. current_step から処理を再開
4. 各ステップ完了後にコミット＆プッシュ（リモートに記録）

```
Jenkins Build #1:
├── execute() ✅ → コミット＆プッシュ成功
├── review() ❌ 失敗
└── ビルド終了（ワークスペース削除）

Jenkins Build #2（レジューム）:
├── git pull（最新状態を取得）
├── metadata.json 読み込み（current_step: "review", completed_steps: ["execute"]）
├── execute() ⏭️ スキップ
└── review() 🔄 再実行
```

## 機能要件

### FR-1: ステップ単位の Git コミット＆プッシュ

**要件**: execute, review, revise の各ステップ完了後に Git コミット＆プッシュを実行

**コミットメッセージ形式**:
```
[ai-workflow] Phase {phase_number} ({phase_name}) - {step} completed

Issue: #10
Phase: {phase_number} ({phase_name})
Step: {step}
Status: completed

Auto-generated by AI Workflow
```

**プッシュ動作**:
- コミット成功後、即座にリモートブランチへプッシュ
- プッシュ失敗時は最大3回リトライ（既存の pushToRemote() の機能）
- リトライでも失敗した場合、ステップは未完了として記録

### FR-2: メタデータの拡張

**新規フィールド**:
```typescript
interface PhaseMetadata {
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  current_step?: 'execute' | 'review' | 'revise' | null;
  completed_steps: ('execute' | 'review' | 'revise')[];
  // 既存フィールド
  retry_count: number;
  output_files: Record<string, string>;
  // ...
}
```

**メタデータの保存タイミング**:
- 各ステップ開始前: current_step を更新
- 各ステップ完了後: completed_steps に追加、current_step を null に
- メタデータも Git コミットに含めてプッシュ

### FR-3: ステップ単位のレジューム

**要件**: レジューム時に current_step から処理を再開

**動作**:
1. リモートブランチから最新状態を pull（CI 環境）
2. metadata.json の current_step を確認
3. completed_steps に含まれるステップはスキップ
4. current_step から処理を再開
5. 各ステップ完了後に completed_steps を更新してプッシュ

### FR-4: プッシュ失敗時の動作

**要件**: プッシュ失敗時は同ステップ内でリトライ、全て失敗したらステップ未完了

**動作**:
1. コミット成功後、pushToRemote() を実行（最大3回リトライ）
2. プッシュ成功 → ステップ完了、completed_steps に追加
3. プッシュ失敗（3回リトライ後）→ ステップ未完了、current_step のまま
4. 次回レジューム時、同じステップを最初から再実行

**重要**: CI 環境ではローカルコミットはワークスペースリセットで消えるため、プッシュ成功が必須

## 受け入れ基準

### AC-1: Execute ステップ後に Git コミット＆プッシュ

```bash
ai-workflow-v2 execute --phase requirements --issue 123
# execute() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed

# リモートにもプッシュされている
git log origin/ai-workflow/issue-123 -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed
```

### AC-2: Review ステップ後に Git コミット＆プッシュ

```bash
# review() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - review completed
```

### AC-3: Revise ステップ後に Git コミット＆プッシュ

```bash
# revise() 完了後（レビュー失敗時のみ実行）
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - revise completed
```

### AC-4: メタデータに current_step が記録され、リモートにプッシュされる

```bash
git pull origin ai-workflow/issue-123
cat .ai-workflow/issue-123/metadata.json | jq '.phases.requirements'
# Expected:
{
  "status": "in_progress",
  "current_step": "review",
  "completed_steps": ["execute"],
  ...
}
```

### AC-5: Execute 完了後のレジューム（CI 環境）

```bash
# Jenkins Build #1: execute 完了、review で失敗
# Jenkins Build #2（レジューム）:
git pull origin ai-workflow/issue-123
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() スキップ、review() から再開
```

### AC-6: プッシュ失敗後の動作

```bash
# コミット成功、プッシュ失敗（3回リトライ後）
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: ステップ未完了、current_step: "execute" のまま

# レジューム
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() を最初から再実行
```

### AC-7: フェーズ完了後の Git ログ

```bash
git log --oneline -3
# Expected:
# abc1234 [ai-workflow] Phase 1 (requirements) - revise completed
# def5678 [ai-workflow] Phase 1 (requirements) - review completed
# ghi9012 [ai-workflow] Phase 1 (requirements) - execute completed
```

## 優先度

**High** - レジューム機能の改善により、CI/CD 実行時間とコストを大幅に削減できる


## 要件定義書の構成

以下のセクションを含む要件定義書を作成してください：

### 0. Planning Documentの確認（Planning Phaseが実行されている場合）
- 開発計画の全体像を把握
- スコープ、技術選定、リスク、スケジュールを確認
- Planning Documentで策定された戦略を踏まえて要件定義を実施

### 1. 概要
- Issue本文の「## 概要」セクションを要約
- 背景と目的を明確に記述
- ビジネス価値・技術的価値を説明

### 2. 機能要件
- Issue本文の「## TODO」セクションから機能要件を抽出
- 各要件を明確かつ検証可能な形で記述
- 優先度（高/中/低）を付与

### 3. 非機能要件
- パフォーマンス要件
- セキュリティ要件
- 可用性・信頼性要件
- 保守性・拡張性要件

### 4. 制約事項
- 技術的制約（使用技術、既存システムとの整合性）
- リソース制約（時間、人員、予算）
- ポリシー制約（セキュリティポリシー、コーディング規約）

### 5. 前提条件
- システム環境
- 依存コンポーネント
- 外部システム連携

### 6. 受け入れ基準
- 各機能要件の受け入れ基準（Given-When-Then形式推奨）
- テスト可能な形で記述

### 7. スコープ外
- 明確にスコープ外とする事項
- 将来的な拡張候補

## 出力形式

Markdown形式で要件定義書を作成し、以下のファイルに保存してください：

```
.ai-workflow/issue-{issue_number}/01_requirements/output/requirements.md
```

## 品質ゲート（Phase 1）

作成する要件定義書は、以下の品質ゲートを満たす必要があります：

- [ ] **機能要件が明確に記載されている**
- [ ] **受け入れ基準が定義されている**
- [ ] **スコープが明確である**
- [ ] **論理的な矛盾がない**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **具体性**: 曖昧な表現を避け、具体的かつ測定可能な要件を記述
   - NG例: "適切に処理する"、"必要に応じて対応"
   - OK例: "3秒以内にレスポンスを返す"、"エラー発生時は管理者に通知"

2. **整合性**: 各セクション間で矛盾がないか確認
   - 機能要件と受け入れ基準が対応しているか
   - 非機能要件と制約事項が矛盾していないか

3. **完全性**: Issue本文の情報を漏れなく反映
   - TODOセクションの項目をすべて機能要件に反映
   - 概要セクションの背景・目的を明確に記述

4. **検証可能性**: 各要件が検証可能（テスト可能）な形で記述
   - 受け入れ基準は Given-When-Then 形式で記述
   - 成功条件・失敗条件が明確に識別可能

5. **レビューされることを意識**: 作成した要件定義書はクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意
   - 改善提案は歓迎されるが、ブロッカーは修正が必須

## 参考情報

必要に応じて以下を参照してください（存在する場合）：
- @CLAUDE.md - プロジェクトの全体方針とコーディングガイドライン
- @ARCHITECTURE.md - アーキテクチャ設計思想
- @CONTRIBUTION.md - 開発ガイドライン
- @README.md - プロジェクト概要と使用方法
- その他、プロジェクト固有のドキュメント
