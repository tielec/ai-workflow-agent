# テストシナリオフェーズ - 実行プロンプト

## タスク概要
要件定義書と設計書から、詳細なテストシナリオを作成してください。**Phase 2で決定されたテスト戦略に基づいて**、適切なテスト種別のシナリオを作成します。

## 入力情報

### Planning Phase成果物
- Planning Document: @.ai-workflow/issue-10/00_planning/output/planning.md

**注意**: Planning Phaseが実行されている場合、開発計画（実装戦略、テスト戦略、リスク、スケジュール）を必ず確認してください。

### 要件定義書
@.ai-workflow/issue-10/01_requirements/output/requirements.md

### 設計書
@.ai-workflow/issue-10/02_design/output/design.md

### テスト戦略（Phase 2で決定）
**UNIT_INTEGRATION**

### GitHub Issue情報（参考）
## Issue概要

- **Issue番号**: #10
- **タイトル**: Git コミット頻度とレジューム粒度の改善
- **状態**: open
- **URL**: https://github.com/tielec/ai-workflow-agent/issues/10
- **ラベル**: enhancement

### 本文

## 概要

現在、AI Workflow は各フェーズ終了後にまとめて Git コミットを行い、レジュームも各フェーズ単位で実行されます。これを改善し、execute / review / revise の各ステップ後にコミット＆プッシュを行い、ステップ単位でのレジュームを可能にします。

## 背景

### 現在の動作

**Git コミットのタイミング**:
- 各フェーズ（planning, requirements, design, etc.）が完了した後に1回だけコミット
- コミットメッセージ: "[ai-workflow] Phase X (phase_name) - completed"

**レジュームの粒度**:
- フェーズ単位でのレジューム
- metadata.json の phases[phase_name].status が "completed" か確認
- 失敗したフェーズは最初から再実行

### 問題点

以下のシナリオで非効率な再実行が発生します：

#### シナリオ1: Review 失敗後の再実行

```
Phase: Requirements
├── execute() ✅ 成功（requirements.md 生成、15分）
├── review() ❌ 失敗（レビュー基準を満たさない）
└── revise() - 未実行

→ レジューム時: execute() から再実行（15分が無駄）
→ 理想: review() から再実行したい
```

#### シナリオ2: Revise 失敗後の再実行

```
Phase: Implementation
├── execute() ✅ 成功（コード実装、30分）
├── review() ✅ 成功（レビュー通過、5分）
├── revise() ❌ 失敗（修正中にエラー、3回目のリトライで失敗）
└── Git コミット - 未実行（フェーズ未完了）

→ レジューム時: execute() から再実行（30分+5分が無駄）
→ 理想: revise() から再実行したい
```

#### シナリオ3: CI/CD での再実行コスト

Jenkins などの CI 環境で実行した場合：
- 各フェーズで Claude API を呼び出すため、再実行コストが高い
- フェーズ全体の再実行はトークン消費量と実行時間を無駄に増加させる

## 提案する改善内容

### 1. Git コミット＆プッシュの細分化

各ステップ（execute / review / revise）の完了後に Git コミット＆プッシュを実行：

```
Phase: Requirements
├── execute() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - execute completed"
├── review() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - review completed"
└── revise() ✅ → Git コミット＆プッシュ "[ai-workflow] Phase 1 (requirements) - revise completed"
```

### 2. レジューム粒度の細分化

metadata.json に現在のステップを記録し、ステップ単位でレジューム：

```json
{
  "phases": {
    "requirements": {
      "status": "in_progress",
      "current_step": "review",
      "completed_steps": ["execute"],
      "output_files": {
        "execute": ".ai-workflow/issue-123/01_requirements/output/requirements.md"
      }
    }
  }
}
```

### 3. CI 環境でのレジューム動作

Jenkins などの CI 環境では各ビルドでワークスペースがリセットされるため：

1. ビルド開始時にリモートブランチから最新状態を pull
2. metadata.json（リモートに存在）を読み込み
3. current_step から処理を再開
4. 各ステップ完了後にコミット＆プッシュ（リモートに記録）

```
Jenkins Build #1:
├── execute() ✅ → コミット＆プッシュ成功
├── review() ❌ 失敗
└── ビルド終了（ワークスペース削除）

Jenkins Build #2（レジューム）:
├── git pull（最新状態を取得）
├── metadata.json 読み込み（current_step: "review", completed_steps: ["execute"]）
├── execute() ⏭️ スキップ
└── review() 🔄 再実行
```

## 機能要件

### FR-1: ステップ単位の Git コミット＆プッシュ

**要件**: execute, review, revise の各ステップ完了後に Git コミット＆プッシュを実行

**コミットメッセージ形式**:
```
[ai-workflow] Phase {phase_number} ({phase_name}) - {step} completed

Issue: #10
Phase: {phase_number} ({phase_name})
Step: {step}
Status: completed

Auto-generated by AI Workflow
```

**プッシュ動作**:
- コミット成功後、即座にリモートブランチへプッシュ
- プッシュ失敗時は最大3回リトライ（既存の pushToRemote() の機能）
- リトライでも失敗した場合、ステップは未完了として記録

### FR-2: メタデータの拡張

**新規フィールド**:
```typescript
interface PhaseMetadata {
  status: 'pending' | 'in_progress' | 'completed' | 'failed';
  current_step?: 'execute' | 'review' | 'revise' | null;
  completed_steps: ('execute' | 'review' | 'revise')[];
  // 既存フィールド
  retry_count: number;
  output_files: Record<string, string>;
  // ...
}
```

**メタデータの保存タイミング**:
- 各ステップ開始前: current_step を更新
- 各ステップ完了後: completed_steps に追加、current_step を null に
- メタデータも Git コミットに含めてプッシュ

### FR-3: ステップ単位のレジューム

**要件**: レジューム時に current_step から処理を再開

**動作**:
1. リモートブランチから最新状態を pull（CI 環境）
2. metadata.json の current_step を確認
3. completed_steps に含まれるステップはスキップ
4. current_step から処理を再開
5. 各ステップ完了後に completed_steps を更新してプッシュ

### FR-4: プッシュ失敗時の動作

**要件**: プッシュ失敗時は同ステップ内でリトライ、全て失敗したらステップ未完了

**動作**:
1. コミット成功後、pushToRemote() を実行（最大3回リトライ）
2. プッシュ成功 → ステップ完了、completed_steps に追加
3. プッシュ失敗（3回リトライ後）→ ステップ未完了、current_step のまま
4. 次回レジューム時、同じステップを最初から再実行

**重要**: CI 環境ではローカルコミットはワークスペースリセットで消えるため、プッシュ成功が必須

## 受け入れ基準

### AC-1: Execute ステップ後に Git コミット＆プッシュ

```bash
ai-workflow-v2 execute --phase requirements --issue 123
# execute() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed

# リモートにもプッシュされている
git log origin/ai-workflow/issue-123 -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - execute completed
```

### AC-2: Review ステップ後に Git コミット＆プッシュ

```bash
# review() 完了後
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - review completed
```

### AC-3: Revise ステップ後に Git コミット＆プッシュ

```bash
# revise() 完了後（レビュー失敗時のみ実行）
git log -1 --oneline
# Expected: [ai-workflow] Phase 1 (requirements) - revise completed
```

### AC-4: メタデータに current_step が記録され、リモートにプッシュされる

```bash
git pull origin ai-workflow/issue-123
cat .ai-workflow/issue-123/metadata.json | jq '.phases.requirements'
# Expected:
{
  "status": "in_progress",
  "current_step": "review",
  "completed_steps": ["execute"],
  ...
}
```

### AC-5: Execute 完了後のレジューム（CI 環境）

```bash
# Jenkins Build #1: execute 完了、review で失敗
# Jenkins Build #2（レジューム）:
git pull origin ai-workflow/issue-123
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() スキップ、review() から再開
```

### AC-6: プッシュ失敗後の動作

```bash
# コミット成功、プッシュ失敗（3回リトライ後）
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: ステップ未完了、current_step: "execute" のまま

# レジューム
ai-workflow-v2 execute --phase requirements --issue 123
# Expected: execute() を最初から再実行
```

### AC-7: フェーズ完了後の Git ログ

```bash
git log --oneline -3
# Expected:
# abc1234 [ai-workflow] Phase 1 (requirements) - revise completed
# def5678 [ai-workflow] Phase 1 (requirements) - review completed
# ghi9012 [ai-workflow] Phase 1 (requirements) - execute completed
```

## 優先度

**High** - レジューム機能の改善により、CI/CD 実行時間とコストを大幅に削減できる


## テスト戦略別の対応

Phase 2で決定されたテスト戦略に応じて、以下のテストシナリオを作成してください：

### UNIT_ONLY: Unitテストのみ
- 各関数・メソッド単位のテストケース
- 正常系・異常系・境界値テスト
- モック/スタブを使用した単体テスト

### INTEGRATION_ONLY: Integrationテストのみ
- コンポーネント間の連携テスト
- 外部システムとの統合テスト
- データフローの検証

### BDD_ONLY: BDDテストのみ
- ユーザーストーリーベースのシナリオ
- Given-When-Then形式
- ビジネス要件との対応

### UNIT_INTEGRATION: Unit + Integration
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）

### UNIT_BDD: Unit + BDD
- Unitテストシナリオ（上記）
- BDDシナリオ（上記）

### INTEGRATION_BDD: Integration + BDD
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

### ALL: すべて
- Unitテストシナリオ（上記）
- Integrationテストシナリオ（上記）
- BDDシナリオ（上記）

## テストシナリオの構成

### 1. テスト戦略サマリー
- 選択されたテスト戦略（Phase 2から引用）
- テスト対象の範囲
- テストの目的

### 2. Unitテストシナリオ（該当する場合）

各関数・メソッドについて：

**テストケース名**: （関数名_正常系/異常系/境界値）

- **目的**: このテストで検証すること
- **前提条件**: テスト実行前の状態
- **入力**: 関数への入力パラメータ
- **期待結果**: 期待される出力・状態変化
- **テストデータ**: 使用するテストデータ

**例**:
```
テストケース名: calculate_total_正常系
目的: 合計金額が正しく計算されることを検証
前提条件: 商品リストが存在する
入力: items = [{price: 100, quantity: 2}, {price: 200, quantity: 1}]
期待結果: 400が返される
テストデータ: 上記items
```

### 3. Integrationテストシナリオ（該当する場合）

各統合ポイントについて：

**シナリオ名**: （統合する2つのコンポーネント名）

- **目的**: この統合で検証すること
- **前提条件**: 統合テスト実行前の状態
- **テスト手順**: ステップバイステップの手順
- **期待結果**: 統合後の期待される動作
- **確認項目**: 確認すべきポイントのチェックリスト

### 4. BDDシナリオ（該当する場合）

ユーザーストーリーごとに：

**Feature**: （機能名）

**Scenario**: （シナリオ名）

- **Given** (前提条件): システムの初期状態
- **When** (操作): ユーザーが実行するアクション
- **Then** (結果): 期待される結果

**例**:
```gherkin
Feature: ユーザー登録機能

Scenario: 新規ユーザーが正常に登録できる
  Given ユーザーがログインしていない
  When ユーザーが有効なメールアドレスとパスワードで登録フォームを送信する
  Then ユーザーアカウントが作成される
  And 確認メールが送信される
  And ユーザーがログイン画面にリダイレクトされる
```

### 5. テストデータ
- 各テストシナリオで使用するテストデータ
- 正常データ、異常データ、境界値データ

### 6. テスト環境要件
- 必要なテスト環境（ローカル、CI/CD等）
- 必要な外部サービス・データベース
- モック/スタブの必要性

## 品質ゲート（Phase 3）

テストシナリオは以下の品質ゲートを満たす必要があります：

- [ ] **Phase 2の戦略に沿ったテストシナリオである**
- [ ] **主要な正常系がカバーされている**
- [ ] **主要な異常系がカバーされている**
- [ ] **期待結果が明確である**

これらの品質ゲートは**必須要件**です。作成後、クリティカルシンキングレビューが実施され、品質ゲートを満たさない場合は修正が必要になります。

## 注意事項

1. **戦略準拠**: Phase 2のテスト戦略を厳守してください
   - 戦略に含まれないテスト種別は作成不要
   - 例: UNIT_ONLYの場合、Integration/BDDシナリオは不要

2. **要件との対応**: 要件定義書の各要件がテストでカバーされていることを確認
   - 受け入れ基準がテストシナリオに反映されているか
   - 機能要件がすべてテスト対象に含まれているか

3. **実行可能性**: 実際に実行可能なテストシナリオを記述
   - 曖昧な表現を避ける
   - 具体的な入力・出力を記載
   - 検証可能な期待結果

4. **優先度**: すべてのエッジケースではなく、主要なケースに注目
   - 80点で十分（完璧を目指さない）
   - クリティカルパス優先
   - 高リスク領域を優先的にカバー

5. **レビューされることを意識**: テストシナリオはクリティカルシンキングレビューが実施されます
   - 品質ゲート（4つの必須要件）を最優先で満たすこと
   - ブロッカー（次フェーズに進めない問題）がないように注意

## 出力形式

テストシナリオを `.ai-workflow/issue-{issue_number}/03_test_scenario/output/test-scenario.md` として保存してください。

Markdown形式で、見出しを適切に使用し、可読性の高いドキュメントを作成してください。

## 実装開始

上記を踏まえ、テストシナリオを作成してください。
