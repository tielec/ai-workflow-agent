{"type":"system","subtype":"init","cwd":"/tmp/jenkins-06c447d5/workspace/AI_Workflow/ai_workflow_orchestrator","session_id":"a5a6ed15-5e1e-432c-ad31-65ce85fc5563","tools":["Task","Bash","Glob","Grep","ExitPlanMode","Read","Edit","Write","NotebookEdit","WebFetch","TodoWrite","WebSearch","BashOutput","KillShell","Skill","SlashCommand"],"mcp_servers":[],"model":"claude-sonnet-4-5-20250929","permissionMode":"bypassPermissions","slash_commands":["compact","context","cost","init","output-style:new","pr-comments","release-notes","todos","review","security-review"],"apiKeySource":"none","claude_code_version":"2.0.21","output_style":"default","agents":["general-purpose","statusline-setup","output-style-setup","Explore"],"uuid":"36494993-94bb-4509-b900-8a79b8101574"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01BwEAnPPCYS2NP1b79ALyTD","type":"message","role":"assistant","content":[{"type":"text","text":"I'll create comprehensive test scenarios based on the UNIT_INTEGRATION test strategy defined in Phase 2. Let me analyze the requirements and design documents to develop detailed test cases."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":50178,"cache_read_input_tokens":12201,"cache_creation":{"ephemeral_5m_input_tokens":50178,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"a5a6ed15-5e1e-432c-ad31-65ce85fc5563","uuid":"a302fd5a-8ce7-422d-9fe1-f012dd2e7eed"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01BwEAnPPCYS2NP1b79ALyTD","type":"message","role":"assistant","content":[{"type":"tool_use","id":"toolu_01MQpRXRqWWLsVx8vBfbVe1t","name":"Write","input":{"file_path":"/tmp/jenkins-06c447d5/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-10/03_test_scenario/output/test-scenario.md","content":"# テストシナリオ - Issue #10: Git コミット頻度とレジューム粒度の改善\n\n## 0. テスト戦略サマリー\n\n### 選択されたテスト戦略\n**UNIT_INTEGRATION** (Phase 2で決定)\n\n### テスト対象の範囲\n\n1. **Unitテスト対象**:\n   - MetadataManager のステップ管理メソッド\n   - GitManager のコミットメッセージ生成とステップコミット機能\n   - ResumeManager のステップ判定ロジック\n   - WorkflowState のマイグレーション処理\n\n2. **Integrationテスト対象**:\n   - BasePhase.run() の実際のステップ実行フロー（execute → commit → review → commit → revise → commit）\n   - CI環境でのリモート同期（git pull → メタデータ読み込み → ステップスキップ）\n   - プッシュ失敗時のリトライ動作とリカバリー\n   - メタデータマイグレーションの実際の動作\n\n### テストの目的\n\n1. **機能検証**: ステップ単位のコミット＆プッシュ、レジューム機能が要件通り動作することを確認\n2. **信頼性検証**: プッシュ失敗時のリトライ、メタデータ不整合時のフォールバック動作を確認\n3. **互換性検証**: 既存ワークフローへの影響がないこと、マイグレーションが正しく動作することを確認\n4. **CI/CD対応検証**: Jenkins等のCI環境でワークスペースリセット後も正しくレジュームできることを確認\n\n---\n\n## 1. Unitテストシナリオ\n\n### 1.1 MetadataManager - ステップ管理機能\n\n#### TC-U-001: updateCurrentStep_正常系\n\n- **目的**: current_stepフィールドが正しく更新されることを検証\n- **前提条件**: MetadataManagerが初期化され、requirementsフェーズのメタデータが存在する\n- **入力**:\n  - phaseName: 'requirements'\n  - step: 'execute'\n- **期待結果**:\n  - metadata.phases.requirements.current_step が 'execute' に設定される\n  - metadata.jsonに変更が保存される\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\",\n        \"current_step\": null,\n        \"completed_steps\": []\n      }\n    }\n  }\n  ```\n\n#### TC-U-002: updateCurrentStep_nullリセット\n\n- **目的**: current_stepをnullにリセットできることを検証\n- **前提条件**: current_stepが'execute'に設定されている\n- **入力**:\n  - phaseName: 'requirements'\n  - step: null\n- **期待結果**:\n  - metadata.phases.requirements.current_step が null に設定される\n- **テストデータ**: 上記TC-U-001の期待結果を入力とする\n\n#### TC-U-003: addCompletedStep_正常系\n\n- **目的**: completed_stepsにステップが追加されることを検証\n- **前提条件**: completed_stepsが空配列\n- **入力**:\n  - phaseName: 'requirements'\n  - step: 'execute'\n- **期待結果**:\n  - metadata.phases.requirements.completed_steps に 'execute' が追加される\n  - metadata.phases.requirements.current_step が null にリセットされる\n- **テストデータ**: TC-U-001の入力データ\n\n#### TC-U-004: addCompletedStep_重複チェック\n\n- **目的**: 重複したステップが追加されないことを検証（冪等性）\n- **前提条件**: completed_stepsに既に'execute'が含まれている\n- **入力**:\n  - phaseName: 'requirements'\n  - step: 'execute'\n- **期待結果**:\n  - completed_stepsの長さが変わらない\n  - 'execute'が1つだけ存在する\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\",\n        \"current_step\": null,\n        \"completed_steps\": [\"execute\"]\n      }\n    }\n  }\n  ```\n\n#### TC-U-005: addCompletedStep_複数ステップ\n\n- **目的**: 複数のステップが順序通りに追加されることを検証\n- **前提条件**: completed_stepsが空配列\n- **入力**:\n  - 1回目: phaseName='requirements', step='execute'\n  - 2回目: phaseName='requirements', step='review'\n  - 3回目: phaseName='requirements', step='revise'\n- **期待結果**:\n  - completed_steps が ['execute', 'review', 'revise'] になる\n  - 実行順序が保持される\n- **テストデータ**: TC-U-001の入力データ\n\n#### TC-U-006: getCompletedSteps_空配列\n\n- **目的**: 新規フェーズでcompleted_stepsが空配列を返すことを検証\n- **前提条件**: requirementsフェーズが新規作成された\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  - 空配列 [] が返される\n- **テストデータ**: TC-U-001の入力データ\n\n#### TC-U-007: getCompletedSteps_既存ステップ\n\n- **目的**: 完了済みステップが正しく取得できることを検証\n- **前提条件**: completed_stepsに['execute', 'review']が含まれている\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  - ['execute', 'review'] が返される\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"completed_steps\": [\"execute\", \"review\"]\n      }\n    }\n  }\n  ```\n\n#### TC-U-008: getCurrentStep_null\n\n- **目的**: ステップ実行中でない場合にnullが返されることを検証\n- **前提条件**: current_stepがnull\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  - null が返される\n- **テストデータ**: TC-U-001の入力データ\n\n#### TC-U-009: getCurrentStep_実行中\n\n- **目的**: 実行中のステップが正しく取得できることを検証\n- **前提条件**: current_stepが'execute'\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  - 'execute' が返される\n- **テストデータ**: TC-U-001の期待結果を入力とする\n\n---\n\n### 1.2 GitManager - ステップコミット機能\n\n#### TC-U-010: buildStepCommitMessage_正常系\n\n- **目的**: ステップコミットメッセージが正しい形式で生成されることを検証\n- **前提条件**: GitManagerが初期化されている\n- **入力**:\n  - phaseName: 'requirements'\n  - phaseNumber: 1\n  - step: 'execute'\n  - issueNumber: 123\n- **期待結果**:\n  ```\n  [ai-workflow] Phase 1 (requirements) - execute completed\n\n  Issue: #123\n  Phase: 1 (requirements)\n  Step: execute\n  Status: completed\n\n  Auto-generated by AI Workflow\n  ```\n- **テストデータ**: 上記入力パラメータ\n\n#### TC-U-011: buildStepCommitMessage_各ステップ\n\n- **目的**: execute/review/revise各ステップのメッセージが正しく生成されることを検証\n- **前提条件**: GitManagerが初期化されている\n- **入力**:\n  - 共通: phaseName='requirements', phaseNumber=1, issueNumber=123\n  - パターン1: step='execute'\n  - パターン2: step='review'\n  - パターン3: step='revise'\n- **期待結果**:\n  - 各ステップに対応したメッセージが生成される\n  - \"Step: execute/review/revise\" が正しく含まれる\n- **テストデータ**: 上記入力パラメータ\n\n#### TC-U-012: commitStepOutput_正常系\n\n- **目的**: ステップコミットが正しく作成されることを検証\n- **前提条件**:\n  - Gitリポジトリが初期化されている\n  - .ai-workflow/issue-123/01_requirements/output/ に変更ファイルが存在\n- **入力**:\n  - phaseName: 'requirements'\n  - phaseNumber: 1\n  - step: 'execute'\n  - issueNumber: 123\n  - workingDir: '/tmp/workspace'\n- **期待結果**:\n  - CommitResult.success が true\n  - CommitResult.commit_hash が null でない\n  - CommitResult.files_committed に対象ファイルが含まれる\n- **テストデータ**:\n  - 変更ファイル: .ai-workflow/issue-123/01_requirements/output/requirements.md\n  - 変更ファイル: .ai-workflow/issue-123/metadata.json\n\n#### TC-U-013: commitStepOutput_ファイルなし\n\n- **目的**: コミット対象ファイルがない場合の動作を検証\n- **前提条件**:\n  - Gitリポジトリが初期化されている\n  - 変更ファイルが存在しない\n- **入力**: TC-U-012と同じ\n- **期待結果**:\n  - CommitResult.success が true\n  - CommitResult.commit_hash が null\n  - CommitResult.files_committed が空配列\n  - 警告ログ \"[WARNING] No files to commit for step: execute\" が出力される\n- **テストデータ**: 変更ファイルなし\n\n#### TC-U-014: commitStepOutput_コミット失敗\n\n- **目的**: Gitコミット失敗時のエラーハンドリングを検証\n- **前提条件**:\n  - Gitリポジトリが初期化されていない（エラーを誘発）\n- **入力**: TC-U-012と同じ\n- **期待結果**:\n  - CommitResult.success が false\n  - CommitResult.error にエラーメッセージが含まれる\n  - エラーログ \"[ERROR] Step commit failed: ...\" が出力される\n- **テストデータ**: TC-U-012のテストデータ\n\n---\n\n### 1.3 ResumeManager - ステップ判定ロジック\n\n#### TC-U-015: getResumeStep_新規フェーズ\n\n- **目的**: 新規フェーズ（pending）でshouldResume=falseが返されることを検証\n- **前提条件**: requirementsフェーズがpending状態\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  ```javascript\n  {\n    shouldResume: false,\n    resumeStep: null,\n    completedSteps: []\n  }\n  ```\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"pending\"\n      }\n    }\n  }\n  ```\n\n#### TC-U-016: getResumeStep_完了フェーズ\n\n- **目的**: 完了済みフェーズでshouldResume=falseが返されることを検証\n- **前提条件**: requirementsフェーズがcompleted状態\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  ```javascript\n  {\n    shouldResume: false,\n    resumeStep: null,\n    completedSteps: ['execute', 'review', 'revise']\n  }\n  ```\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"completed\",\n        \"completed_steps\": [\"execute\", \"review\", \"revise\"]\n      }\n    }\n  }\n  ```\n\n#### TC-U-017: getResumeStep_current_step設定あり\n\n- **目的**: current_stepが設定されている場合、そこから再開されることを検証\n- **前提条件**:\n  - status: 'in_progress'\n  - current_step: 'review'\n  - completed_steps: ['execute']\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  ```javascript\n  {\n    shouldResume: true,\n    resumeStep: 'review',\n    completedSteps: ['execute']\n  }\n  ```\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\",\n        \"current_step\": \"review\",\n        \"completed_steps\": [\"execute\"]\n      }\n    }\n  }\n  ```\n\n#### TC-U-018: getResumeStep_current_stepなし\n\n- **目的**: current_stepがnullの場合、次のステップが判定されることを検証\n- **前提条件**:\n  - status: 'in_progress'\n  - current_step: null\n  - completed_steps: ['execute']\n- **入力**:\n  - phaseName: 'requirements'\n- **期待結果**:\n  ```javascript\n  {\n    shouldResume: true,\n    resumeStep: 'review',\n    completedSteps: ['execute']\n  }\n  ```\n- **テストデータ**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\",\n        \"current_step\": null,\n        \"completed_steps\": [\"execute\"]\n      }\n    }\n  }\n  ```\n\n#### TC-U-019: getNextStep_ステップ未完了\n\n- **目的**: ステップ未完了の場合にexecuteが返されることを検証\n- **前提条件**: completed_stepsが空配列\n- **入力**:\n  - completedSteps: []\n- **期待結果**:\n  - 'execute' が返される\n- **テストデータ**: 空配列\n\n#### TC-U-020: getNextStep_execute完了\n\n- **目的**: execute完了後にreviewが返されることを検証\n- **前提条件**: completed_stepsに'execute'が含まれる\n- **入力**:\n  - completedSteps: ['execute']\n- **期待結果**:\n  - 'review' が返される\n- **テストデータ**: ['execute']\n\n#### TC-U-021: getNextStep_execute_review完了\n\n- **目的**: execute、review完了後にreviseが返されることを検証\n- **前提条件**: completed_stepsに['execute', 'review']が含まれる\n- **入力**:\n  - completedSteps: ['execute', 'review']\n- **期待結果**:\n  - 'revise' が返される\n- **テストデータ**: ['execute', 'review']\n\n#### TC-U-022: getNextStep_全ステップ完了\n\n- **目的**: 全ステップ完了時のフォールバック動作を検証\n- **前提条件**: completed_stepsに['execute', 'review', 'revise']が含まれる\n- **入力**:\n  - completedSteps: ['execute', 'review', 'revise']\n- **期待結果**:\n  - 'execute' が返される（フォールバック）\n- **テストデータ**: ['execute', 'review', 'revise']\n\n---\n\n### 1.4 WorkflowState - マイグレーション処理\n\n#### TC-U-023: migrate_current_step追加\n\n- **目的**: 古いスキーマにcurrent_stepフィールドが追加されることを検証\n- **前提条件**: metadata.jsonにcurrent_stepフィールドが存在しない\n- **入力**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\"\n      }\n    }\n  }\n  ```\n- **期待結果**:\n  - current_step: null が追加される\n  - migrate()がtrueを返す\n  - バックアップファイルが作成される\n- **テストデータ**: 上記入力JSON\n\n#### TC-U-024: migrate_completed_steps追加_pending\n\n- **目的**: pending状態のフェーズにcompleted_stepsが追加されることを検証\n- **前提条件**: metadata.jsonにcompleted_stepsフィールドが存在しない\n- **入力**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"pending\"\n      }\n    }\n  }\n  ```\n- **期待結果**:\n  - completed_steps: [] が追加される\n  - current_step: null が追加される\n- **テストデータ**: 上記入力JSON\n\n#### TC-U-025: migrate_completed_steps追加_in_progress\n\n- **目的**: in_progress状態のフェーズにcompleted_stepsが追加されることを検証\n- **前提条件**: metadata.jsonにcompleted_stepsフィールドが存在しない\n- **入力**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\"\n      }\n    }\n  }\n  ```\n- **期待結果**:\n  - completed_steps: [] が追加される\n  - current_step: 'execute' が設定される\n- **テストデータ**: 上記入力JSON\n\n#### TC-U-026: migrate_completed_steps追加_completed\n\n- **目的**: completed状態のフェーズにcompleted_stepsが追加されることを検証\n- **前提条件**: metadata.jsonにcompleted_stepsフィールドが存在しない\n- **入力**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"completed\"\n      }\n    }\n  }\n  ```\n- **期待結果**:\n  - completed_steps: ['execute', 'review', 'revise'] が追加される\n  - current_step: null が設定される\n- **テストデータ**: 上記入力JSON\n\n#### TC-U-027: migrate_バックアップ作成\n\n- **目的**: マイグレーション前にバックアップファイルが作成されることを検証\n- **前提条件**: マイグレーションが必要なmetadata.jsonが存在\n- **入力**: TC-U-023の入力データ\n- **期待結果**:\n  - `metadata.json.backup_YYYYMMDD_HHMMSS` が作成される\n  - バックアップファイルの内容が元のmetadata.jsonと同じ\n- **テストデータ**: TC-U-023の入力データ\n\n#### TC-U-028: migrate_既にマイグレーション済み\n\n- **目的**: 既にマイグレーション済みの場合、何もしないことを検証\n- **前提条件**: current_stepとcompleted_stepsが既に存在\n- **入力**:\n  ```json\n  {\n    \"phases\": {\n      \"requirements\": {\n        \"status\": \"in_progress\",\n        \"current_step\": null,\n        \"completed_steps\": []\n      }\n    }\n  }\n  ```\n- **期待結果**:\n  - migrate()がfalseを返す\n  - メタデータが変更されない\n  - バックアップが作成されない\n- **テストデータ**: 上記入力JSON\n\n---\n\n## 2. Integrationテストシナリオ\n\n### 2.1 BasePhase.run() - ステップ実行フロー\n\n#### TC-I-001: execute_review_revise完全フロー\n\n**シナリオ名**: Requirements Phase の完全実行フロー（execute → review → revise）\n\n- **目的**: 各ステップ後にコミット＆プッシュが実行され、メタデータが正しく更新されることを検証\n- **前提条件**:\n  - Gitリポジトリが初期化され、リモートブランチ `ai-workflow/issue-123` が存在\n  - Requirements Phaseが未実行（status: 'pending'）\n- **テスト手順**:\n  1. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  2. execute()が成功し、requirements.mdが生成される\n  3. Gitコミット＆プッシュが実行される（1回目）\n  4. review()が実行され、失敗する（意図的な失敗）\n  5. Gitコミット＆プッシュが実行される（2回目）\n  6. revise()が実行され、成功する\n  7. Gitコミット＆プッシュが実行される（3回目）\n- **期待結果**:\n  - Gitログに3つのコミットが存在:\n    - `[ai-workflow] Phase 1 (requirements) - execute completed`\n    - `[ai-workflow] Phase 1 (requirements) - review completed`\n    - `[ai-workflow] Phase 1 (requirements) - revise completed`\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"]\n    }\n    ```\n  - リモートブランチにも3つのコミットがプッシュされている\n- **確認項目**:\n  - [ ] executeステップ後にローカルコミットが作成される\n  - [ ] executeステップ後にリモートプッシュが成功する\n  - [ ] metadata.jsonのcurrent_stepが'execute'→null→'review'と遷移する\n  - [ ] reviewステップ後にローカルコミットが作成される\n  - [ ] reviewステップ後にリモートプッシュが成功する\n  - [ ] reviseステップ後にローカルコミットが作成される\n  - [ ] reviseステップ後にリモートプッシュが成功する\n  - [ ] フェーズステータスが'completed'になる\n\n#### TC-I-002: execute_review成功フロー\n\n**シナリオ名**: Requirements Phase のレビュー成功フロー（execute → review）\n\n- **目的**: レビューが成功した場合、reviseがスキップされることを検証\n- **前提条件**: TC-I-001と同じ\n- **テスト手順**:\n  1. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  2. execute()が成功し、requirements.mdが生成される\n  3. Gitコミット＆プッシュが実行される（1回目）\n  4. review()が実行され、成功する\n  5. Gitコミット＆プッシュが実行される（2回目）\n  6. revise()がスキップされる\n- **期待結果**:\n  - Gitログに2つのコミットが存在:\n    - `[ai-workflow] Phase 1 (requirements) - execute completed`\n    - `[ai-workflow] Phase 1 (requirements) - review completed`\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\"]\n    }\n    ```\n- **確認項目**:\n  - [ ] reviseステップがスキップされる\n  - [ ] completed_stepsに'revise'が含まれない\n  - [ ] フェーズステータスが'completed'になる\n\n#### TC-I-003: executeステップスキップ（レジューム）\n\n**シナリオ名**: Execute完了後のレジューム（review から再開）\n\n- **目的**: execute完了後のレジュームでexecuteがスキップされ、reviewから再開されることを検証\n- **前提条件**:\n  - executeステップが完了し、リモートにプッシュ済み\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"in_progress\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\"]\n    }\n    ```\n- **テスト手順**:\n  1. ローカルワークスペースをリセット（git reset --hard、CI環境シミュレーション）\n  2. リモートブランチから最新状態をpull\n  3. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  4. executeステップがスキップされる\n  5. reviewステップから再開される\n- **期待結果**:\n  - ログに \"Skipping execute step (already completed)\" が表示される\n  - review()が実行される\n  - Gitログに新しいコミット `[ai-workflow] Phase 1 (requirements) - review completed` が追加される\n- **確認項目**:\n  - [ ] execute()が呼び出されない\n  - [ ] requirements.mdの再生成が行われない\n  - [ ] review()が実行される\n  - [ ] reviewステップ後にコミット＆プッシュが実行される\n\n#### TC-I-004: current_step からのレジューム\n\n**シナリオ名**: current_step='review' からのレジューム\n\n- **目的**: current_stepが設定されている場合、そこから再開されることを検証\n- **前提条件**:\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"in_progress\",\n      \"current_step\": \"review\",\n      \"completed_steps\": [\"execute\"]\n    }\n    ```\n- **テスト手順**:\n  1. リモートブランチから最新状態をpull\n  2. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  3. ResumeManager.getResumeStep() が resumeStep='review' を返す\n  4. executeステップがスキップされる\n  5. reviewステップが実行される\n- **期待結果**:\n  - ログに \"Resuming phase 'requirements' from step 'review'\" が表示される\n  - review()が実行される\n- **確認項目**:\n  - [ ] current_stepが優先的に使用される\n  - [ ] completed_stepsに関係なくcurrent_stepから再開される\n\n---\n\n### 2.2 Git操作 - コミット＆プッシュ\n\n#### TC-I-005: プッシュ成功（正常系）\n\n**シナリオ名**: ステップコミット＆プッシュの正常動作\n\n- **目的**: ステップ完了後にコミット＆プッシュが成功することを検証\n- **前提条件**:\n  - Gitリポジトリが初期化され、リモートブランチが存在\n  - executeステップが完了\n- **テスト手順**:\n  1. BasePhase.commitAndPushStep('execute') を呼び出す\n  2. GitManager.commitStepOutput() が実行される\n  3. GitManager.pushToRemote(3) が実行される（最大3回リトライ）\n  4. プッシュが成功する\n- **期待結果**:\n  - ローカルブランチにコミットが作成される\n  - リモートブランチにコミットがプッシュされる\n  - metadata.jsonのcompleted_stepsに'execute'が追加される\n  - metadata.jsonのcurrent_stepがnullにリセットされる\n- **確認項目**:\n  - [ ] コミットハッシュが取得できる\n  - [ ] リモートブランチにコミットが存在する\n  - [ ] メタデータが正しく更新される\n\n#### TC-I-006: プッシュ失敗（1回目成功）\n\n**シナリオ名**: プッシュ1回目は失敗、2回目で成功\n\n- **目的**: プッシュリトライ機能が正しく動作することを検証\n- **前提条件**:\n  - ネットワーク一時障害をシミュレート（モック）\n  - 1回目のプッシュは失敗、2回目は成功\n- **テスト手順**:\n  1. BasePhase.commitAndPushStep('execute') を呼び出す\n  2. GitManager.pushToRemote(3) が実行される\n  3. 1回目のプッシュが失敗する（エラー: \"network timeout\"）\n  4. 1秒待機後、2回目のプッシュが実行される\n  5. 2回目のプッシュが成功する\n- **期待結果**:\n  - リトライログ \"[INFO] Retrying push (attempt 2/3)...\" が表示される\n  - 2回目のプッシュが成功する\n  - ステップが完了として記録される\n- **確認項目**:\n  - [ ] 1回目の失敗がログに記録される\n  - [ ] リトライが実行される\n  - [ ] 2回目の成功がログに記録される\n  - [ ] completed_stepsに'execute'が追加される\n\n#### TC-I-007: プッシュ失敗（3回リトライ後失敗）\n\n**シナリオ名**: プッシュが3回リトライしても失敗\n\n- **目的**: プッシュ失敗時にステップが未完了として記録されることを検証\n- **前提条件**:\n  - ネットワーク障害をシミュレート（モック）\n  - すべてのプッシュが失敗する\n- **テスト手順**:\n  1. BasePhase.commitAndPushStep('execute') を呼び出す\n  2. GitManager.pushToRemote(3) が実行される\n  3. 1回目のプッシュが失敗する\n  4. 1秒待機後、2回目のプッシュが失敗する\n  5. 2秒待機後、3回目のプッシュが失敗する\n  6. エラーがスローされる\n- **期待結果**:\n  - エラーログ \"[ERROR] Phase requirements: Failed to push step execute: ...\" が表示される\n  - metadata.jsonのcurrent_stepが'execute'のまま維持される\n  - metadata.jsonのcompleted_stepsに'execute'が追加されない\n  - フェーズステータスが'failed'になる\n- **確認項目**:\n  - [ ] 3回のリトライがすべて実行される\n  - [ ] リトライ間隔が1秒、2秒、4秒（指数バックオフ）\n  - [ ] current_stepが維持される\n  - [ ] ローカルコミットは存在する（プッシュのみ失敗）\n\n#### TC-I-008: プッシュ失敗後のレジューム\n\n**シナリオ名**: プッシュ失敗後、次回レジューム時に同じステップを再実行\n\n- **目的**: プッシュ失敗時のレジューム動作を検証\n- **前提条件**:\n  - TC-I-007でプッシュが失敗した状態\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"failed\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": []\n    }\n    ```\n- **テスト手順**:\n  1. ネットワーク障害が復旧（モック解除）\n  2. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  3. ResumeManager.getResumeStep() が resumeStep='execute' を返す\n  4. executeステップが最初から再実行される\n  5. コミット＆プッシュが成功する\n- **期待結果**:\n  - ログに \"Resuming phase 'requirements' from step 'execute'\" が表示される\n  - execute()が再実行される\n  - 今回はプッシュが成功する\n  - completed_stepsに'execute'が追加される\n- **確認項目**:\n  - [ ] executeステップが再実行される\n  - [ ] 前回のローカルコミットは破棄される（新規コミット作成）\n  - [ ] プッシュが成功する\n  - [ ] current_stepがnullにリセットされる\n\n---\n\n### 2.3 CI環境 - リモート同期\n\n#### TC-I-009: CI環境でのレジューム（execute完了後）\n\n**シナリオ名**: Jenkins Build #1でexecute完了、Build #2でreviewから再開\n\n- **目的**: CI環境でワークスペースリセット後も正しくレジュームできることを検証\n- **前提条件**:\n  - Jenkins環境（各ビルドでワークスペースがリセットされる）\n  - Build #1でexecuteステップが完了し、リモートにプッシュ済み\n- **テスト手順**:\n  1. **Jenkins Build #1**:\n     - `git checkout -b ai-workflow/issue-123`\n     - `ai-workflow-v2 execute --phase requirements --issue 123`\n     - executeステップが完了し、コミット＆プッシュ成功\n     - reviewステップで失敗（意図的）\n     - ビルド終了（ワークスペース削除）\n  2. **Jenkins Build #2**（レジューム）:\n     - `git clone <repo> && git checkout ai-workflow/issue-123`\n     - `git pull origin ai-workflow/issue-123`（最新状態を取得）\n     - metadata.json読み込み（completed_steps: [\"execute\"]）\n     - `ai-workflow-v2 execute --phase requirements --issue 123`\n     - executeステップがスキップされる\n     - reviewステップから再開される\n- **期待結果**:\n  - Build #2のログに \"Skipping execute step (already completed)\" が表示される\n  - review()が実行される\n  - トークン消費量がexecuteステップ分削減される\n- **確認項目**:\n  - [ ] リモートブランチからmetadata.jsonが正しく取得される\n  - [ ] completed_stepsが正しく解釈される\n  - [ ] executeステップがスキップされる\n  - [ ] reviewステップが実行される\n\n#### TC-I-010: CI環境でのリモート同期（複数ステップ）\n\n**シナリオ名**: Jenkins Build #1でexecute+review完了、Build #2でreviseから再開\n\n- **目的**: 複数ステップ完了後のCI環境でのレジュームを検証\n- **前提条件**:\n  - Build #1でexecuteとreviewステップが完了し、リモートにプッシュ済み\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"in_progress\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\"]\n    }\n    ```\n- **テスト手順**:\n  1. **Jenkins Build #2**:\n     - ワークスペースリセット\n     - `git clone <repo> && git checkout ai-workflow/issue-123`\n     - `git pull origin ai-workflow/issue-123`\n     - metadata.json読み込み\n     - `ai-workflow-v2 execute --phase requirements --issue 123`\n     - executeとreviewステップがスキップされる\n     - reviseステップから再開される\n- **期待結果**:\n  - ログに \"Skipping execute step (already completed)\" が表示される\n  - ログに \"Skipping review step (already completed)\" が表示される\n  - revise()が実行される\n- **確認項目**:\n  - [ ] 複数のステップがスキップされる\n  - [ ] 正しいステップから再開される\n  - [ ] completed_stepsが正しく更新される\n\n#### TC-I-011: CI環境でのプッシュ失敗とリカバリー\n\n**シナリオ名**: Jenkins Build #1でプッシュ失敗、Build #2でリトライ成功\n\n- **目的**: CI環境でのプッシュ失敗とリカバリー動作を検証\n- **前提条件**:\n  - Build #1でexecuteステップが完了したが、プッシュが失敗\n  - ローカルコミットはワークスペースリセットで消失\n  - metadata.jsonの状態（リモート）:\n    ```json\n    {\n      \"status\": \"failed\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": []\n    }\n    ```\n- **テスト手順**:\n  1. **Jenkins Build #2**:\n     - ワークスペースリセット\n     - `git clone <repo> && git checkout ai-workflow/issue-123`\n     - `git pull origin ai-workflow/issue-123`\n     - metadata.json読み込み（current_step: \"execute\"）\n     - `ai-workflow-v2 execute --phase requirements --issue 123`\n     - executeステップが最初から再実行される\n     - 今回はプッシュが成功する\n- **期待結果**:\n  - executeステップが再実行される\n  - プッシュが成功する\n  - metadata.jsonが正しく更新される\n- **確認項目**:\n  - [ ] current_stepから再実行される\n  - [ ] 前回のローカルコミットは存在しない（ワークスペースリセット）\n  - [ ] 新しいコミットが作成される\n  - [ ] プッシュが成功する\n\n---\n\n### 2.4 メタデータマイグレーション\n\n#### TC-I-012: 既存ワークフローのマイグレーション\n\n**シナリオ名**: 古いスキーマのmetadata.jsonを新しいスキーマにマイグレーション\n\n- **目的**: 既存ワークフローが新しいスキーマに自動的にマイグレーションされることを検証\n- **前提条件**:\n  - 古いスキーマのmetadata.jsonが存在（current_step、completed_stepsフィールドなし）\n  - planning、requirementsフェーズがcompleted状態\n  - designフェーズがin_progress状態\n- **テスト手順**:\n  1. WorkflowState.migrate() を呼び出す\n  2. 各フェーズにcurrent_stepとcompleted_stepsフィールドが追加される\n  3. metadata.json.backupが作成される\n  4. metadata.jsonが保存される\n- **期待結果**:\n  - **planningフェーズ**:\n    ```json\n    {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"]\n    }\n    ```\n  - **requirementsフェーズ**:\n    ```json\n    {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"]\n    }\n    ```\n  - **designフェーズ**:\n    ```json\n    {\n      \"status\": \"in_progress\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": []\n    }\n    ```\n  - metadata.json.backup_YYYYMMDD_HHMMSSが作成される\n- **確認項目**:\n  - [ ] completedフェーズは全ステップ完了と仮定される\n  - [ ] in_progressフェーズはexecuteから再開と仮定される\n  - [ ] バックアップファイルが作成される\n  - [ ] ログに \"[OK] metadata.json migrated successfully\" が表示される\n\n#### TC-I-013: マイグレーション後のワークフロー実行\n\n**シナリオ名**: マイグレーション後、既存ワークフローが正常に動作する\n\n- **目的**: マイグレーション後も既存ワークフローが影響を受けないことを検証\n- **前提条件**:\n  - TC-I-012でマイグレーションが完了\n  - designフェーズがin_progress、current_step='execute'\n- **テスト手順**:\n  1. `ai-workflow-v2 execute --phase design --issue 123` を実行\n  2. executeステップから開始される\n  3. コミット＆プッシュが成功する\n  4. reviewステップが実行される\n- **期待結果**:\n  - designフェーズが正常に実行される\n  - ステップ単位のコミット＆プッシュが動作する\n  - 既存のplanningとrequirementsフェーズに影響がない\n- **確認項目**:\n  - [ ] マイグレーション後も正常にワークフロー実行できる\n  - [ ] ステップ管理機能が正しく動作する\n  - [ ] 既存フェーズのメタデータが保持される\n\n#### TC-I-014: マイグレーション失敗時のロールバック\n\n**シナリオ名**: マイグレーション失敗時にバックアップからロールバック\n\n- **目的**: マイグレーション失敗時のリカバリー手順を検証\n- **前提条件**:\n  - metadata.jsonが破損している（不正なJSON）\n- **テスト手順**:\n  1. WorkflowState.migrate() を呼び出す\n  2. マイグレーションが失敗する\n  3. エラーログが出力される\n  4. 手動でmetadata.json.backupから復元する\n- **期待結果**:\n  - エラーログ \"[ERROR] Migration failed: ...\" が表示される\n  - metadata.json.backupが存在する\n  - バックアップから復元可能\n- **確認項目**:\n  - [ ] マイグレーション失敗がログに記録される\n  - [ ] バックアップファイルが作成されている\n  - [ ] バックアップファイルの内容が正しい\n\n---\n\n### 2.5 エラーハンドリング\n\n#### TC-I-015: execute失敗時の動作\n\n**シナリオ名**: executeステップが失敗した場合の動作\n\n- **目的**: executeステップ失敗時にコミットが作成されず、フェーズがfailedになることを検証\n- **前提条件**:\n  - Requirements Phaseが未実行\n  - execute()が失敗する設定（モック）\n- **テスト手順**:\n  1. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  2. execute()が失敗する\n  3. エラーハンドリングが実行される\n- **期待結果**:\n  - Gitコミットが作成されない\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"failed\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": []\n    }\n    ```\n  - エラーログ \"[ERROR] Phase requirements: Execute failed: ...\" が表示される\n- **確認項目**:\n  - [ ] execute失敗時にコミットが作成されない\n  - [ ] current_stepが'execute'のまま維持される\n  - [ ] completed_stepsが空配列のまま\n  - [ ] フェーズステータスが'failed'になる\n\n#### TC-I-016: review失敗→revise成功\n\n**シナリオ名**: reviewステップが失敗し、reviseで修正成功\n\n- **目的**: review失敗時にreviseが自動的に実行され、成功することを検証\n- **前提条件**:\n  - executeステップが完了\n  - review()が失敗する設定（モック）\n  - revise()が成功する設定（モック）\n- **テスト手順**:\n  1. executeステップが完了し、コミット＆プッシュ成功\n  2. reviewステップが実行され、失敗する\n  3. reviewステップ完了としてコミット＆プッシュ（失敗結果も記録）\n  4. reviseステップが自動的に実行される\n  5. reviseステップが成功し、コミット＆プッシュ\n- **期待結果**:\n  - Gitログに3つのコミット:\n    - `[ai-workflow] Phase 1 (requirements) - execute completed`\n    - `[ai-workflow] Phase 1 (requirements) - review completed`\n    - `[ai-workflow] Phase 1 (requirements) - revise completed`\n  - metadata.jsonの状態:\n    ```json\n    {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"]\n    }\n    ```\n- **確認項目**:\n  - [ ] review失敗時もコミットが作成される\n  - [ ] reviseが自動的に実行される\n  - [ ] revise成功後にフェーズがcompletedになる\n\n#### TC-I-017: メタデータ不整合の検出\n\n**シナリオ名**: current_stepとcompleted_stepsに矛盾がある場合の動作\n\n- **目的**: メタデータ不整合時のフォールバック動作を検証\n- **前提条件**:\n  - metadata.jsonが不整合な状態（手動編集）:\n    ```json\n    {\n      \"status\": \"in_progress\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": [\"execute\", \"review\"]\n    }\n    ```\n    （executeが完了しているのにcurrent_stepが'execute'）\n- **テスト手順**:\n  1. `ai-workflow-v2 execute --phase requirements --issue 123` を実行\n  2. ResumeManager.getResumeStep() がメタデータ不整合を検出\n  3. 警告ログが出力される\n  4. 安全側にフォールバック（current_stepを優先）\n- **期待結果**:\n  - 警告ログ \"[WARNING] Metadata inconsistency detected: current_step is 'execute' but already in completed_steps\" が表示される\n  - current_stepが優先され、executeステップが再実行される\n  - ワークフローが継続する（停止しない）\n- **確認項目**:\n  - [ ] メタデータ不整合が検出される\n  - [ ] 警告ログが出力される\n  - [ ] 安全側にフォールバック（最初から再実行）\n  - [ ] ワークフローが停止しない\n\n---\n\n## 3. テストデータ\n\n### 3.1 正常系テストデータ\n\n#### データセット1: 新規ワークフロー\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"planning\": {\n      \"status\": \"pending\",\n      \"current_step\": null,\n      \"completed_steps\": [],\n      \"retry_count\": 0\n    },\n    \"requirements\": {\n      \"status\": \"pending\",\n      \"current_step\": null,\n      \"completed_steps\": [],\n      \"retry_count\": 0\n    }\n  }\n}\n```\n\n#### データセット2: execute完了後\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"requirements\": {\n      \"status\": \"in_progress\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\"],\n      \"retry_count\": 0,\n      \"output_files\": {\n        \"execute\": \".ai-workflow/issue-123/01_requirements/output/requirements.md\"\n      }\n    }\n  }\n}\n```\n\n#### データセット3: execute+review完了後\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"requirements\": {\n      \"status\": \"in_progress\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\"],\n      \"retry_count\": 0,\n      \"output_files\": {\n        \"execute\": \".ai-workflow/issue-123/01_requirements/output/requirements.md\"\n      }\n    }\n  }\n}\n```\n\n### 3.2 異常系テストデータ\n\n#### データセット4: プッシュ失敗（execute）\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"requirements\": {\n      \"status\": \"failed\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": [],\n      \"retry_count\": 0\n    }\n  }\n}\n```\n\n#### データセット5: メタデータ不整合\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"requirements\": {\n      \"status\": \"in_progress\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": [\"execute\", \"review\"],\n      \"retry_count\": 0\n    }\n  }\n}\n```\n\n### 3.3 マイグレーション用テストデータ\n\n#### データセット6: 旧スキーマ（マイグレーション前）\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"planning\": {\n      \"status\": \"completed\",\n      \"retry_count\": 0\n    },\n    \"requirements\": {\n      \"status\": \"in_progress\",\n      \"retry_count\": 0\n    }\n  }\n}\n```\n\n#### データセット7: 新スキーマ（マイグレーション後）\n\n```json\n{\n  \"issue_number\": \"123\",\n  \"phases\": {\n    \"planning\": {\n      \"status\": \"completed\",\n      \"current_step\": null,\n      \"completed_steps\": [\"execute\", \"review\", \"revise\"],\n      \"retry_count\": 0\n    },\n    \"requirements\": {\n      \"status\": \"in_progress\",\n      \"current_step\": \"execute\",\n      \"completed_steps\": [],\n      \"retry_count\": 0\n    }\n  }\n}\n```\n\n---\n\n## 4. テスト環境要件\n\n### 4.1 ローカル開発環境\n\n- **OS**: macOS / Linux / Windows（WSL2推奨）\n- **Node.js**: 20以上\n- **npm**: 10以上\n- **Git**: 2.30以上\n- **TypeScript**: 5.x\n\n### 4.2 CI/CD環境\n\n- **Jenkins**: 2.x以上\n- **Docker**: 20.x以上（Jenkinsエージェント）\n- **環境変数**:\n  - `GITHUB_TOKEN`: GitHub パーソナルアクセストークン\n  - `GITHUB_REPOSITORY`: `owner/repo` 形式\n  - `GIT_COMMIT_USER_NAME`: Gitコミット作成者名\n  - `GIT_COMMIT_USER_EMAIL`: Gitコミット作成者メール\n\n### 4.3 外部サービス\n\n- **GitHub**: リモートリポジトリ、Issue、PR\n- **Claude API**: AIエージェント（モック可）\n\n### 4.4 モック/スタブの必要性\n\n#### Unitテストでモックが必要な箇所\n\n1. **GitManager**:\n   - `simple-git` ライブラリのモック\n   - コミット成功/失敗のシミュレーション\n   - プッシュ成功/失敗のシミュレーション\n\n2. **MetadataManager**:\n   - ファイルシステム操作（`fs-extra`）のモック\n   - metadata.json読み書きのモック\n\n3. **ResumeManager**:\n   - MetadataManagerのモック\n\n#### Integrationテストでモックが必要な箇所\n\n1. **Claude API**:\n   - execute()、review()、revise()の成功/失敗をモック\n   - トークン消費量の測定（モック）\n\n2. **ネットワーク障害**:\n   - プッシュ失敗をシミュレート\n   - リトライ動作の検証\n\n---\n\n## 5. 受け入れ基準とのマッピング\n\n| 受け入れ基準 | 対応するテストケース | テスト種別 |\n|------------|-------------------|----------|\n| AC-1: Execute ステップ後のGitコミット＆プッシュ | TC-I-001, TC-I-002, TC-I-005 | Integration |\n| AC-2: Review ステップ後のGitコミット＆プッシュ | TC-I-001, TC-I-002, TC-I-005 | Integration |\n| AC-3: Revise ステップ後のGitコミット＆プッシュ | TC-I-001, TC-I-016 | Integration |\n| AC-4: メタデータにcurrent_stepが記録される | TC-U-001, TC-U-002, TC-I-001 | Unit + Integration |\n| AC-5: Execute完了後のレジューム（CI環境） | TC-I-003, TC-I-009 | Integration |\n| AC-6: プッシュ失敗後の動作 | TC-I-007, TC-I-008, TC-I-011 | Integration |\n| AC-7: フェーズ完了後のGitログ | TC-I-001, TC-U-010, TC-U-011 | Unit + Integration |\n| AC-8: メタデータマイグレーション | TC-U-023~TC-U-028, TC-I-012, TC-I-013 | Unit + Integration |\n| AC-9: CI環境でのリモート同期 | TC-I-009, TC-I-010, TC-I-011 | Integration |\n| AC-10: TypeScript型安全性 | コンパイルチェック（npm run build） | Compile-time |\n\n---\n\n## 6. 品質ゲート確認\n\n### Phase 3の品質ゲート\n\n- [x] **Phase 2の戦略に沿ったテストシナリオである**\n  - UNIT_INTEGRATIONに準拠\n  - Unitテスト: TC-U-001 〜 TC-U-028 (28ケース)\n  - Integrationテスト: TC-I-001 〜 TC-I-017 (17ケース)\n\n- [x] **主要な正常系がカバーされている**\n  - TC-I-001: execute → review → revise の完全フロー\n  - TC-I-002: execute → review の成功フロー\n  - TC-I-003: executeスキップ（レジューム）\n  - TC-I-005: プッシュ成功\n  - TC-I-012: メタデータマイグレーション\n\n- [x] **主要な異常系がカバーされている**\n  - TC-I-007: プッシュ失敗（3回リトライ後）\n  - TC-I-008: プッシュ失敗後のレジューム\n  - TC-I-015: execute失敗\n  - TC-I-017: メタデータ不整合\n\n- [x] **期待結果が明確である**\n  - すべてのテストケースで期待結果を明記\n  - 具体的な出力例（JSONデータ、ログメッセージ）を記載\n  - 確認項目をチェックリスト形式で明示\n\n---\n\n## 7. テスト実行計画\n\n### 7.1 Unitテスト実行\n\n```bash\n# すべてのUnitテストを実行\nnpm run test:unit\n\n# 特定のテストファイルのみ実行\nnpm run test tests/unit/step-management.test.ts\n\n# カバレッジ測定\nnpm run test:coverage\n```\n\n**期待カバレッジ**: 90%以上（新規メソッドのみ）\n\n### 7.2 Integrationテスト実行\n\n```bash\n# すべてのIntegrationテストを実行\nnpm run test:integration\n\n# 特定のシナリオのみ実行\nnpm run test tests/integration/step-commit-push.test.ts\n\n# CI環境シミュレーション\nnpm run test tests/integration/step-resume.test.ts\n```\n\n### 7.3 CI/CDパイプラインでのテスト\n\n```groovy\n// Jenkinsfile\nstage('Test') {\n  steps {\n    sh 'npm run test:unit'\n    sh 'npm run test:integration'\n    sh 'npm run test:coverage'\n  }\n}\n```\n\n---\n\n## 8. テストスケジュール\n\n| フェーズ | 期間 | 内容 |\n|---------|------|------|\n| Unitテスト実装 | 1~1.5h | TC-U-001 〜 TC-U-028 の実装 |\n| Integrationテスト実装 | 1~1.5h | TC-I-001 〜 TC-I-017 の実装 |\n| テスト実行と修正 | 1~2h | すべてのテストを実行し、失敗したケースを修正 |\n| カバレッジ確認 | 0.5h | カバレッジレポート生成と分析 |\n\n**合計**: 3.5~5時間\n\n---\n\n## 9. リスクと軽減策\n\n### リスク1: CI環境での統合テスト実行が困難\n\n- **影響度**: 中\n- **確率**: 中\n- **軽減策**:\n  - Docker環境でCI環境をシミュレート\n  - モックを使用してワークスペースリセットを再現\n  - 実際のJenkinsパイプラインでテスト実行を確認\n\n### リスク2: Git操作のモックが複雑\n\n- **影響度**: 中\n- **確率**: 低\n- **軽減策**:\n  - `simple-git-mock` ライブラリを使用\n  - テスト用のGitリポジトリを実際に作成して実行\n  - コミット＆プッシュの成功/失敗をシンプルにモック\n\n### リスク3: テストデータの準備が煩雑\n\n- **影響度**: 低\n- **確率**: 中\n- **軽減策**:\n  - テストデータをJSON形式でファイル化\n  - テストヘルパー関数でメタデータを簡単に生成\n  - フィクスチャファイルを活用\n\n---\n\n## 10. 参考情報\n\n- **Planning Document**: `.ai-workflow/issue-10/00_planning/output/planning.md`\n- **Requirements Document**: `.ai-workflow/issue-10/01_requirements/output/requirements.md`\n- **Design Document**: `.ai-workflow/issue-10/02_design/output/design.md`\n- **CLAUDE.md**: プロジェクトの全体方針とコーディングガイドライン\n- **ARCHITECTURE.md**: アーキテクチャ設計思想\n- **Issue #10**: https://github.com/tielec/ai-workflow-agent/issues/10\n\n---\n\n**作成日**: 2025-01-XX\n**Issue**: #10\n**Phase**: Test Scenario (Phase 3)\n**Status**: Draft\n"}}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":50178,"cache_read_input_tokens":12201,"cache_creation":{"ephemeral_5m_input_tokens":50178,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"a5a6ed15-5e1e-432c-ad31-65ce85fc5563","uuid":"462b8925-bcf6-4fd1-8471-744596ad3191"}
{"type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01MQpRXRqWWLsVx8vBfbVe1t","type":"tool_result","content":"File created successfully at: /tmp/jenkins-06c447d5/workspace/AI_Workflow/ai_workflow_orchestrator/.ai-workflow/issue-10/03_test_scenario/output/test-scenario.md"}]},"parent_tool_use_id":null,"session_id":"a5a6ed15-5e1e-432c-ad31-65ce85fc5563","uuid":"b5ad8e7e-60ae-446c-9fff-2098c5afb0a3"}
{"type":"assistant","message":{"model":"claude-sonnet-4-5-20250929","id":"msg_01KUZxS84Jg4W44aavvMTPS7","type":"message","role":"assistant","content":[{"type":"text","text":"I've successfully created a comprehensive test scenario document for Issue #10. Here's a summary of what was created:\n\n## Test Scenario Summary\n\n### Coverage\n- **Test Strategy**: UNIT_INTEGRATION (as defined in Phase 2)\n- **28 Unit Test Cases** (TC-U-001 to TC-U-028)\n- **17 Integration Test Cases** (TC-I-001 to TC-I-017)\n\n### Key Test Areas\n\n#### 1. Unit Tests\n- **MetadataManager** (9 test cases): Step management methods, field updates, duplication checks\n- **GitManager** (5 test cases): Commit message generation, step commits, error handling\n- **ResumeManager** (8 test cases): Resume logic, next step determination, various phase states\n- **WorkflowState** (6 test cases): Migration logic, backup creation, schema updates\n\n#### 2. Integration Tests\n- **BasePhase.run() Flow** (4 test cases): Complete execution flows, step skipping, resume scenarios\n- **Git Operations** (4 test cases): Commit & push success, retry logic, push failures\n- **CI Environment** (3 test cases): Remote sync, workspace reset, recovery after failures\n- **Metadata Migration** (3 test cases): Schema migration, backward compatibility, rollback\n- **Error Handling** (3 test cases): Step failures, review/revise flow, metadata inconsistency\n\n### Test Data\n- 7 comprehensive datasets covering:\n  - Normal workflows\n  - Error scenarios\n  - Migration scenarios\n  - Metadata inconsistencies\n\n### Quality Gates ✓\nAll Phase 3 quality gates have been met:\n- ✓ Test scenarios align with UNIT_INTEGRATION strategy\n- ✓ Main success paths are covered (AC-1 to AC-10)\n- ✓ Main error paths are covered\n- ✓ Expected results are clearly defined\n\n### Test Environment\n- Local development setup requirements\n- CI/CD (Jenkins) environment specifications\n- Mock/stub requirements for isolated testing\n\nThe test scenarios provide comprehensive coverage of the step-level commit & push and resume functionality, ensuring reliability in both local and CI environments."}],"stop_reason":null,"stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":16379,"cache_read_input_tokens":62379,"cache_creation":{"ephemeral_5m_input_tokens":16379,"ephemeral_1h_input_tokens":0},"output_tokens":1,"service_tier":"standard"}},"parent_tool_use_id":null,"session_id":"a5a6ed15-5e1e-432c-ad31-65ce85fc5563","uuid":"a6b5a38b-560c-4c52-953d-a8dd872c0447"}
{"type":"result","subtype":"success","is_error":false,"duration_ms":233061,"duration_api_ms":235087,"num_turns":7,"result":"I've successfully created a comprehensive test scenario document for Issue #10. Here's a summary of what was created:\n\n## Test Scenario Summary\n\n### Coverage\n- **Test Strategy**: UNIT_INTEGRATION (as defined in Phase 2)\n- **28 Unit Test Cases** (TC-U-001 to TC-U-028)\n- **17 Integration Test Cases** (TC-I-001 to TC-I-017)\n\n### Key Test Areas\n\n#### 1. Unit Tests\n- **MetadataManager** (9 test cases): Step management methods, field updates, duplication checks\n- **GitManager** (5 test cases): Commit message generation, step commits, error handling\n- **ResumeManager** (8 test cases): Resume logic, next step determination, various phase states\n- **WorkflowState** (6 test cases): Migration logic, backup creation, schema updates\n\n#### 2. Integration Tests\n- **BasePhase.run() Flow** (4 test cases): Complete execution flows, step skipping, resume scenarios\n- **Git Operations** (4 test cases): Commit & push success, retry logic, push failures\n- **CI Environment** (3 test cases): Remote sync, workspace reset, recovery after failures\n- **Metadata Migration** (3 test cases): Schema migration, backward compatibility, rollback\n- **Error Handling** (3 test cases): Step failures, review/revise flow, metadata inconsistency\n\n### Test Data\n- 7 comprehensive datasets covering:\n  - Normal workflows\n  - Error scenarios\n  - Migration scenarios\n  - Metadata inconsistencies\n\n### Quality Gates ✓\nAll Phase 3 quality gates have been met:\n- ✓ Test scenarios align with UNIT_INTEGRATION strategy\n- ✓ Main success paths are covered (AC-1 to AC-10)\n- ✓ Main error paths are covered\n- ✓ Expected results are clearly defined\n\n### Test Environment\n- Local development setup requirements\n- CI/CD (Jenkins) environment specifications\n- Mock/stub requirements for isolated testing\n\nThe test scenarios provide comprehensive coverage of the step-level commit & push and resume functionality, ensuring reliability in both local and CI environments.","session_id":"a5a6ed15-5e1e-432c-ad31-65ce85fc5563","total_cost_usd":0.52607275,"usage":{"input_tokens":9,"cache_creation_input_tokens":66557,"cache_read_input_tokens":74580,"output_tokens":16826,"server_tool_use":{"web_search_requests":0},"service_tier":"standard","cache_creation":{"ephemeral_1h_input_tokens":0,"ephemeral_5m_input_tokens":66557}},"modelUsage":{"claude-haiku-4-5-20251001":{"inputTokens":633,"outputTokens":212,"cacheReadInputTokens":0,"cacheCreationInputTokens":0,"webSearchRequests":0,"costUSD":0.001693,"contextWindow":200000},"claude-sonnet-4-5-20250929":{"inputTokens":9,"outputTokens":16826,"cacheReadInputTokens":74580,"cacheCreationInputTokens":66557,"webSearchRequests":0,"costUSD":0.52437975,"contextWindow":200000}},"permission_denials":[],"uuid":"1137b3a2-dc98-4cbd-a3ed-d5bc7713c69a"}