# 実装フェーズ - レビュープロンプト

## レビュー対象

### 実装ログ
@.ai-workflow/issue-102/04_implementation/output/implementation.md

### 実装されたコード
実装ログに記載されたファイルを確認してください。

### 設計書（参考）
@.ai-workflow/issue-102/02_design/output/design.md

### テストシナリオ（参考）
@.ai-workflow/issue-102/03_test_scenario/output/test-scenario.md

### 実装戦略（Phase 2で決定）
**EXTEND**

## 品質ゲート（Phase 4）

実装は以下の品質ゲートをクリアする必要があります：

- [ ] **Phase 2の設計に沿った実装である**
- [ ] **既存コードの規約に準拠している**
- [ ] **基本的なエラーハンドリングがある**
- [ ] **明らかなバグがない**

**注意**:
- Phase 4では**実コード（ビジネスロジック）の実装**のみを対象とします
- テストコードの実装はPhase 5（test_implementation）で行います
- 8フェーズワークフロー（Issue #324以降）での変更点です

## ⚠️ 重要: Planning Phaseチェックリストとの照合（必須）

### 1. Planning.mdの読み込み

以下のファイルを読み込んでください：
- @.ai-workflow/issue-102/00_planning/output/planning.md

### 2. 該当フェーズのチェックリストを抽出

Planning.mdから、現在のフェーズ（"### Phase 4:" または "## Phase 4:"）のセクションを見つけ、タスクチェックリストを抽出してください。

**注意**: チェックリストが見つからない場合は、このチェックをスキップしてください。

### 3. 実装内容との照合

実装ログ（implementation.md）と照合し、各タスクが完了しているかチェックしてください。

**完了の判定基準**:
- Task記載のファイルが作成されているか
- Task記載の機能が実装されているか
- サブタスクがすべて完了しているか

### 4. Planning.mdの更新

照合結果に基づき、planning.mdのチェックボックスを更新してください：

- 完了したタスク: `- [ ]` → `- [x]`
- 未完了のタスク: `- [ ]` のまま

**Editツールを使用**して、該当フェーズのセクションを更新してください。

### 5. レビュー判定への反映

- **すべてのタスクが完了**（全て `[x]`）: PASS または PASS_WITH_SUGGESTIONS
- **未完了タスクがある**（`[ ]` が残っている）: FAIL
  - レビューフィードバックに未完了タスクをリストアップ
  - 具体的に何が不足しているか説明

**例（FAIL時のフィードバック）**:
```
## Planning Phaseチェックリスト照合結果: FAIL

以下のタスクが未完了です：

- [ ] Task 4-2: ワークフロー制御ロジックの抽出
  - 不足: core/workflow_controller.py が実装されていません
- [ ] Task 4-3: 設定管理の独立化
  - 不足: core/config_manager.py が実装されていません

これらのタスクを完了してから再提出してください。
```

### ⚠️ 重要: Planning.mdの内容はレビュー結果に含めない

Planning.mdの読み込みと照合作業は必要ですが、**planning.mdの全文やPlanning Phaseのレビュー内容をレビュー結果に含めないでください**。

レビュー結果には以下のみを含めること:
- 実装ログ（implementation.md）に対する評価
- Planning.mdとの照合で発見した未完了タスク（FAIL時のみ）
- 実装固有の改善提案

Planning Phaseのレビュー詳細やplanning.mdの内容全体は出力しないこと。

## レビュー姿勢

このレビューは「**80点で十分**」の原則に基づいて実施してください：

1. **完璧ではなく、十分を目指す**
   - 実装が次フェーズ（テスト実行）に進める状態であれば合格
   - 細かい最適化は改善提案として記載

2. **ブロッカーと改善提案を明確に区別**
   - ブロッカー: 次フェーズ（テスト実行）に進めない重大な問題
   - 改善提案: 次フェーズに進めるが、改善が望ましい事項

3. **実用的でバランスの取れた判断**
   - プロジェクトを前に進めることを最優先
   - テストフェーズで検出可能な問題はブロッカーにしない

4. **建設的なフィードバック**
   - 「間違い」ではなく「こうすればより良い」という表現
   - 具体的な改善案を提示

## レビュー観点

### 1. 設計との整合性（最重要）

- 設計書の内容に沿っているか
- 設計書に記載されたファイルが実装されているか
- 設計から逸脱していないか

### 2. コーディング規約への準拠

- プロジェクトのコーディング規約に従っているか
- 既存コードのスタイルと一貫性があるか
- 命名規則が適切か

### 3. エラーハンドリング

- 基本的なエラーハンドリングがあるか
- 例外が適切に処理されているか
- エラーメッセージが明確か

### 4. バグの有無

- 明らかな論理エラーがないか
- Null参照エラーの可能性がないか
- 境界値の扱いが適切か

### 5. 保守性

- コードが読みやすいか
- コメント・ドキュメントが適切か
- 複雑すぎないか

## ⚠️ 最重要: 品質ゲートは絶対条件

**品質ゲート（4項目）は必須要件です。1つでも満たされていない場合、判定は自動的にFAILになります。**

- 品質ゲートは「最低限クリアすべき基準」であり、交渉の余地はありません
- 「80点で十分」の原則は、品質ゲートを満たした上での改善提案に適用されます
- 品質ゲートを満たさない状態で次フェーズに進むことは許されません

## ブロッカー（BLOCKER）と改善提案（SUGGESTION）の区別

### ブロッカー（BLOCKER）: 次フェーズに進めない重大な問題

**ブロッカーの例**:
- 設計書と完全に不一致の実装
- 明らかな論理エラー（動作しない）
- セキュリティ上の重大な脆弱性
- 既存システムを破壊する変更

### 改善提案（SUGGESTION）: 次フェーズに進めるが、改善が望ましい事項

**改善提案の例**:
- パフォーマンス最適化
- コードの可読性向上
- エッジケースの追加処理
- テストカバレッジの拡大
- コメントの充実

### 判定ルール

#### PASS（合格）

以下の**すべて**を満たす場合のみPASS：
- ✅ **4つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーが存在しない
- ✅ 軽微な改善提案のみ（または改善提案なし）

#### PASS_WITH_SUGGESTIONS（条件付き合格）

以下の**すべて**を満たす場合のみPASS_WITH_SUGGESTIONS：
- ✅ **4つの品質ゲートすべてが満たされている**（1つでも×があればFAIL）
- ✅ ブロッカーは存在しない
- ✅ 次フェーズに進めるが、検討すべき改善点がある

#### FAIL（不合格）

以下の**いずれか1つでも**該当すればFAIL：
- ❌ **品質ゲート（4項目）のうち1つでも満たされていない**
- ❌ ブロッカーが1つ以上存在する

**重要: 品質ゲートは絶対条件であり、1つでも満たされていなければ自動的にFAILです。**

## 出力フォーマット

以下の形式で出力してください：

```markdown
## 品質ゲート評価

**⚠️ 重要: 各項目に対して明示的にPASS/FAILを判定してください。1つでもFAILがあれば最終判定は自動的にFAILです。**

- [x/  ] **Phase 2の設計に沿った実装である**: **PASS / FAIL** - （判定理由）
- [x/  ] **既存コードの規約に準拠している**: **PASS / FAIL** - （判定理由）
- [x/  ] **基本的なエラーハンドリングがある**: **PASS / FAIL** - （判定理由）
- [x/  ] **明らかなバグがない**: **PASS / FAIL** - （判定理由）

**品質ゲート総合判定: PASS / FAIL**
- PASS: 上記4項目すべてがPASS
- FAIL: 上記4項目のうち1つでもFAIL

**品質ゲート判定がFAILの場合、最終判定は自動的にFAILになります。**

## 詳細レビュー

### 1. 設計との整合性

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 2. コーディング規約への準拠

**良好な点**:
- （具体的な良い点）

**懸念点**:
- （懸念があれば記載）

### 3. エラーハンドリング

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

### 4. バグの有無

**良好な点**:
- （明らかなバグがないことを確認）

**懸念点**:
- （潜在的なバグがあれば記載）

### 5. 保守性

**良好な点**:
- （具体的な良い点）

**改善の余地**:
- （改善提案があれば記載）

## ブロッカー（BLOCKER）

**次フェーズに進めない重大な問題**

（ブロッカーがある場合のみ記載）
1. **（ブロッカー1のタイトル）**
   - 問題: （具体的な問題）
   - 影響: （次フェーズにどう影響するか）
   - 対策: （どう修正すべきか）

## 改善提案（SUGGESTION）

**次フェーズに進めるが、改善が望ましい事項**

（改善提案がある場合のみ記載）
1. **（提案1のタイトル）**
   - 現状: （現在の状態）
   - 提案: （こうすればより良い）
   - 効果: （改善による効果）

## 総合評価

（実装全体の総合的な評価）

**主な強み**:
- （良い点をまとめる）

**主な改善提案**:
- （改善提案をまとめる）

（総括コメント）

---
**判定: PASS / PASS_WITH_SUGGESTIONS / FAIL**
```

**重要**: 最終行に必ず上記フォーマットで判定を明記してください。実装ログだけでなく、実際に実装されたコードファイルも確認してください。
